%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: lovepets.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: 
%%CreationDate: 3/5/2020
%%BoundingBox: 0 0 3000 1500
%%HiResBoundingBox: 0 0 3000 1500
%%CropBox: 0 0 3000 1500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 11503 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD80FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFD83FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FF
%CFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FF
%CFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FD83FFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD
%81FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFFFFFA8A8A8FD07FFA8FF
%CFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FF
%CFFFA8FFCFFD31FFA827272752277D527C7DA8CFFD44FFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFA8F8272727F827F827F8272727A8FFFFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD30
%FFA8A827272752FD0827F87DFD43FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA87D52
%27F8FD0B27F82727FFCFFFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FD2AFFA8FD0C2752FD0627A8FD44FFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFD07FFCFFFFFFFCFFFFF
%7DFD1227F8A8FD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCF
%FFFFFFA8FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFD12FFA87DCAFD0AFFA8A8FD09FFA8FD122752A8FD17FF7C
%A8FD06FFA8277DFD20FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFFF7D2727
%7DFFA87D527DA8FFA8522752CFFFCFFFA8FFCFFFCFFF2727F8272727F827
%2727F8272727F8FD0427FFFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA87D2752CFFFFFA8522752527DFFFFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFD12FF7DA852272727F827272752
%5227A852FD0AFFA8FD1227A8FD17FFA87DF87DFF7D272727A8272727A8FD
%1DFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA85252F8FD0727F8275252FD
%04FFCFFFFFFFCFFFFF7DF8FD0F27F87DFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFD04FFA87D522752F8272727A8522727F852A8FFFFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD14FF7DFD042752FD08277D
%FD0CFFA85252FD0E2752FD18FFA852FD0627FF52FD042752A8FD1AFFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFA827F8FD062752FD0427F8A8FFFFA8FF
%CFFFA8FFCFFFA8FFFFFFA8A82727F8272727F8272727F827F827A8FFC9CA
%A8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA852F827F82727275227
%2727F827F8277DFFFFFFAFFFFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FD11FFA8FD092752FD0427A8FD10FFA8FD0D277DFFC1C2FD15FFFD1027
%52FFFFC9C8FD16FFCFFFFFFFCFFFFFFFCFFFFFFFCFFF7DFD0D27F8A8FFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFA827F8FD0727F8272727F8A8CAC9FD04
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF52FD112752FFC9C1CFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD12FFFD0E277DFD10FFCA2727F8FD07
%27527D272727FD16FF52FD1327A8CAFD14FFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFCFFF7D272727F8272727F8272727F827F8A8FFFFCFFFA8FFCFFFA8FF
%CFFFA8FFCFFFFFFF7D5227522752527DA87D2752272727FFFFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFCFFFCFFF2727F8272727F8272727F8272727F827
%2727F82727A8FFFFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFD10FFA8FD
%0F27A8FD1BFF7D7D52520552FD14FFA8FD10275252275227F8A8FD13FFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFF7DF8FD0E27CAFD04FFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFD07FFCFFFFFA8527D4B277DFFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFD04FFA82727F852FD0C275252517D5227A7FFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFD12FFA852F8FD0C2752FD1DFFA87D274BFD15FF7DFD
%042752FD0A27F87D7C7D7D5252FD14FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%A8FFFF7D2727F827F8272727F827052727FFFFFFA8FFCFFFA8FFCFFFA8FF
%CFFFA8FFCFFFA8FFCFFFCFFFFFFFCFA85251F8A8FFFFCAFFFFFFA8FFCFFF
%A8FFCFFFA8FFCFFFA8FFFF7DF8272727F8272727F8272727F827F827A8FF
%A87D27A8FFFFCFFFFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FD14FF7D7D7DA8
%7D5227516E4B0552FD12FF27FD04527DFD04522727F87DFD04FF52FD11FF
%7DFD0F277DFFFFFFA8A8FD04FF52FD12FFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FD07FFA87D272726C06E2727FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFA8
%27F827F827F827F827F827F852FD04FF7D2727A8FD04FFCFFFFFFFCFFFFF
%FFCFFFFF7DF8FD0E27FD04FFA8A1FFFFFF52F852FD05FFCFFFFFFFCFFFFF
%FFCFFD0EFF7D527DFD07FFA8A87D524A272752A8FD11FFFD0A27F87DFD05
%FF52272727A8FD0EFF7DFD0E27FD05FF7DFFFFFFA82727277DFD0EFFA8FF
%CFFFA8FFCFFFA8FFCFFFA827F82727A7A8FD04FFA85252272752A8FFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA852F827F8FD0527F87DFFFFCFFFFF
%7DF8FD0427A8FFFFCFFFA8FFCFFFA8FFCFFFFFA8F827F8272727F8272727
%F82727A8FFFFFFA87DFD04FF7DF827F827A8FFA8FFCFFFA8FFCFFFA8FFCF
%FD0DFF7DFD0527527DFFFFA8FD047DA8FD15FF52FD072752A8FD06FFFD07
%27A8FD0CFFCFFD07275252272727CAFFFFCFA87DFD04FFA8FD052752FD0D
%FFCFFFFFFFCFFFFFFFCFFFFFFFFD0627F82727FD057DFFFFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFD04FF7DF8FD0627A852A8FD04FF52FD0827FF
%FFFFCFFFFFFFCFFFFFFFCFFF52FD052752FF522752FFFFFFA7A8A8FD05FF
%FD0627F8A8FD04FFCFFFFFFFCFFD0EFF7DFD0627527DA8A8A87DFFA8FD05
%FFA8FD11FF7DFD08277DA8FFFFFF7DFD0A27FD0DFF5252F8527DFFFFA8A8
%FFFFFFA87D7DA8FD04FFA8FD0827FD0CFFCFFFA8FFCFFFA8FFCFFFCF52F8
%27F8FD04277D7DFD07FFA8A82752FFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FF
%FFA8F8272727F82727FD047DFF7D272727F8272727F827272752FFFFFFA8
%FFCFFFA8FFCFFFCFFFA8A8A8FD09FF7D52A8FD04FF7DF8FD0527F8277DFF
%A8FFCFFFA8FFCFFFA8FD0CFFFD0727527D7DA8FFFFFFA8A85252272727FD
%12FF52FD052752527D527D52FD0D277DFD16FFA852277D7D7DFFFFFF2727
%2752FD052752FD0DFFCFFFFFFFCFFFFFFF52FD0827527DA87D7D2727F827
%2727F852FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF52FD0827522727F8
%FD0B27F827A8FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFA87D52F82752
%52277D7C7C52FD0A27A8FD04FFCFFFFFFFCFFD0BFF52FD0C27F8FD072752
%FD13FFFD1827F852FD12FFFD07277D527D5252FD0A277DFD0AFFA8FFCFFF
%A8FFCFFFFFCF2727F8272727F8272727F8272727F8272727F827F87DFFFF
%CFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFFF7DF8FD0727F8272727F8FD0727
%F8272727F87DFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFA827F8272727F827
%27522752F827F8272727F8272727F87DFFFFA8FFCFFFA8FFCFFD0AFFA8FD
%15277DFD14FF52FD0D2752FD0B27FD11FF27272752FD122752FD0AFFCFFF
%FFFFCFFD04FFA8FD1527A8FD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%275227272752FD0627F8FD0D277DFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF
%52F8FD0B27F852FD0627F852FFFFCFFFFFFFCFFD0CFFA8FD142752FD15FF
%522752FD1627F852FD10FF522727522752FD102752FD0AFFCFFFA8FFCFFF
%A8FFFFA8F8272727F8272727F8272727F8272727F827272752FFFFFFA8FF
%CFFFA8FFCFFFA8FFCFFFA8FFCFFFCFFFFD0B27522727F8272727F8272727
%F8FD0427FFFFFFA8FFCFFFA8FFCFFFA8FFCFFFFF52F8FD0527F852FD0A27
%F827F852A8FFCFFFA8FFCFFFA8FD0AFFA8FD1327F8A8FD15FF52FD052752
%272727522752FD0E27A8FD0FFF52272752272727522727275227272752FD
%0727FD0CFFCFFFFFFFCFFFFFA820FD1327A8FFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFF522727275252FD0527522752F8FD0B27F8A8FFFFCF
%FFFFFFCFFFFFFFCFFFFFFF7D52FD0427F852FD1027A8FFFFFFCFFFFFFFCF
%FD0AFFA8FD132752FD16FF522727F87DFF52FD14277DFD0DFF7DFD062752
%52FD1027FD0AFFA8FFCFFFA8FFCFFFCFFF2727F8272727F8272727F8FD07
%27F827277C7DFFFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFFFFF5227272752
%FF52FD062752FD0627F8272727F827F87DFFFFCFFFA8FFCFFFA8FFFFFF52
%272752F8FD0727F8272727F8272727F8272727F827A8FFA8FFCFFFA8FFCF
%FD0BFF52FD0D2752272727522727F827277DFD11FF7D2727F87DFF7DF827
%2752FD10277DFD0BFF52272752272727522752FD1127A8FD09FFCFFFFFFF
%CFFFFFFFCFFF52FD122752F8272727F852FD04FFCFFFFFFFCFFFFFFFCFFF
%FFFF522727277DFF7DFD1327F87DFD04FFCFFD05FF52FD042752F8272727
%F8FD1127A1FFCFFFFFFFCFFD0DFFA8FD12277D52FD0527A8FD0FFF7DF827
%F87DFF7DF827275252272752FD072752FD04277DFD07FFCF7DFD11275227
%2727522727F852272727FD0AFFCFFFA8FFCFFFA8FFCFFFFF7DF827F82727
%27F8272727F8272727F82727FFA8272727F82752FFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FF5227F8277DFF52FD0427A8FD0627F8FD0727F8A8FFFFA8FFCF
%FFFFA8F827F827F8272752F827F8272727F8FD0727F8272752A852F852CF
%FFCFFFA8FFCFFFA8FD0DFFA85252FD09275227272752A87DFD0527A8FD0E
%FFA8FD04277DFF5227272752FD092751275127272752FD09FFA85252527D
%7DFFFD0F277D7DFFFF7D2727A8FD0CFFCFFFFFFFCFFFFFFFCFFD04FFCF52
%27F8FD0827522727F8272727F852CFFFCFFFFFFFCFFFFFFFCFFD04FF52F8
%2727277DA8F8FD0C2752FD062752FFFFFFCFFFFFFFCFFFFFFFCFFFFFFF52
%FD0727F82727522727F852FFFFFF7DF8277DFFCFFFFFFFCFFFFFFFCFFD12
%FFA852F8FD062752FD072752A8FD0FFF52FD0427FF7D2727522727275227
%2727525252FD0727FD0FFFA8FD062752527D7DFFFFA8F82752FFA852F852
%A8FD0CFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFFF7D5227F8FD0527
%F827F827F852A8FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFFFFF7DA8A7FFA87D
%F827F827F827F827F827F827F827F827F82752FFFFFFA8FFCFFFA8FFCFFF
%A8FFCFFFCFFF5227277D7DA8A8FD05FFA87D7DCF7D2727A8FFFFA8FFCFFF
%A8FFCFFFA8FFCFFD16FF7D5252A876522727275252A8FD17FFA8527D527D
%5252527D5252275252522752527DA8FD21FFA87D7DFD10FFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFD05FFCFFD04FFA87DA8A8FD05FFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFD0FFFA8FD07FFCFFFFFFFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCF
%FD83FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD81FFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-03-05T23:04:05+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-03-05T23:04:05+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-03-05T23:04:05+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CACAAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwD1JkUuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxVZJNDFT1JFTkaLyIFT4CuKr8VdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQuparpel2rXepXcNlbL9qe4kWJB/snI&#xA;GKvLfOv/ADkb5J0vT7qLQLj9LawEK2wSNxbLIdgzyME5KvX4K16VHUNK+X9Z1PUdZuZdY1S/+t6j&#xA;dSMZg5cy9iG+z6apvRVB2p0ApkkKVnrGr2KMllfXFqrCjLDK8YINa14kYqyHQ/zZ/MbRESOw125E&#xA;MbFlhmInTfqKTB9vbGlfYvknzND5n8qaZr0ShBfQh5I1NQkqkpKgP+TIrDIpTvFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqw7zR+a/lLyx5gh0XWXngeWFJ2vViL20Qld0jWV1JZ&#xA;WYxn9mnvjSp6PNHlo6dFqf6Vsxp04rDeNPGsTU60ctx274qv0vzJ5d1YkaVqlpfkbkWs8U3/ACbZ&#xA;sVSPXvzT8k6Jqsek3d/6uou6RyW1sjTtD6kixhpigKxjk42Y136Yqy3FXYq+cf8AnKawu/01pF43&#xA;qtbS2UsVtR/3KSwuZJuSnbk8TjfavHvTYhDwDCrsVXIWowU05D4h4gGv8MVaVGc0UEn2xV9if849&#xA;6fdWf5W6Z68qyC5eeeBUIYJG8hAWo2rUEnwrTIlL0jFXYq7FXYq7FWHat+aGg6J5oGha1HJp8UzL&#xA;HaarJxNq8hjRyjMDyjP7wULDid98VZbPc29vA9xPKkMEY5SSyMFRVHcsdgMVea65+fXlW01WC10q&#xA;mr2MLodc1OBiILOCSVYFflxIlPqSD7J6Y0r0XT9R0/UbSO80+5iu7SUVjuIHWSNh7MpIxVE4q7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq+a/wA/PzAi0/zvfadpscN21xo40nWY7hXaNecpuIzHwdP3kfOoPQV8&#xA;ehCHhIRTCXMqhlNBEeXI17ig4/jhVXhg1C2S21FPUtonlZba9HJQJIuJbi671TmpNN8VZb+WWo6t&#xA;da/H5Ytkjki8w39j9euCpadY7S4FwxRya0+HkwNa0GBX2tgS7FUg87+TNJ84eXrjRdS5LHLRobhK&#xA;epFKv2XWv3Edxtir5h83f847fmBoTSS2EC65YrUrLZ/33Htyt2+OvsnL54bQ8xmhlhleGZGjljYp&#xA;JG4KsrKaFWB3BBwqtqRirq7AeGKvqP8A5xb8wNeeTb/R5WqdJueUW/SG5BcCn/GRXP05EpD2WC5t&#xA;pxyglSUUBqjBhRhVTt4jcZXDJGe8SD7mc8co/UCFXLGDsVdirsVeS/8AOQHl1Ljyze6k0Ze2MCJc&#xA;uBUwzW7M9pOB/KTLJDJTs4J2XEK+atY88eaNV0ax0S81GebSdOThbWztsaGoL0+3x6JyrxGwySE7&#xA;8lajpFv5B892t40a3d1bWC2SMRycpd8mVR1JBKtt0AwKlnlXz95n8n6oLzRLwxKxH1m0J5283H4T&#xA;6iD4Typ9pdxXY4VfVP5Y/nD5e882wgSljrka8rjTZGqSB1eFtuafiO/jkaSz7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq+I/zhEP/KzfMTQzi4je7ZhKp5CpA5KCP5Gqn0ZIIYdirfJuIWp4gkhewJpU/hirL/yf&#xA;lli/M7y40QJY3qIaV+y4Kt0/yScSr7dyKXYq7FXYq+Svzo/LTzwnnbWNah0aa40u9nM0NxZqZ14l&#xA;RUyKgLIa/a5Dr44Qh5idK1QPwNnPzrTj6b1r0pSmFU9078tPOl7ayXz6bJp+mQrzn1LUP9Et0StO&#xA;XObjy3NKICcVVPJvm3U/IvmlNX0mb65aRv6FwVDpBdQ7F0+MAjpVSRUbGnbFX2F5H/Qc+hRapojF&#xA;tO1Sl1AGpVFcf3W38jchTt0zB0mihpwRDkTfu8nL1WsnnIMuYFftZBmY4rsVdirsVeIf85T+Y5rP&#xA;yxpmhwuU/Ss7y3AH7UVqFPE+xkkVv9jhCvmE0rsKDCh2KuxVWsr28sbuK8s5nt7qBg8M8TFHRh0K&#xA;sNxir6K8gfnUPN9pbaBr17+ivMSOq2uoIxhgvOQKFJOOySNXtsT9nj0zA1+lllhUJGMh5183N0Op&#xA;jincoiUT5W99zNcN2KuxV2KuxV2KuxV2KoLW7a/utGv7XT5xa389vLFa3LAkRyuhVH23+FjXFXw5&#xA;5v8AJfmbynqR0/XbR7dySYZftQyju8Ug2btXuO4GSQkWKuxV6D+QdkLv819DVvsQtPO3/PO3kZf+&#xA;GpgKvszAl2KuxV2KuxV2KoDXltn0a9S5l9CF4WVpvhBQsKKyl1kUMGIK1U79sVfKfnXTk8x+YNP8&#xA;v6O66hrVxOIuUt7f3txEtDX1GmhtbeOMD4isaNQDqB1KH1N5W8vWXlzy7p+h2f8AvPYQrEG6Fm6u&#xA;593clj88CU1xV2KuxV2KvmT/AJyvuHbzPolua8I7J5BvtWSUg7f88xhCHiXK2+qhQj/WuZJk5Dh6&#xA;dBRQnGvKtd+X0YVUsVdirO/ys8kar5k/T9xYWhu5LDTZo7eOqryubtTBGtXKrUI0jbn9nAVTjzR+&#xA;Wl5DcaV5btbeRtWd44beIKUCQCQwz309QDS5u2Kw16RRjrUY2r6y06ySx0+1sY3eRLWGOBJJGLuw&#xA;jUKCzHcsabnAlEYq7FXYq7FXYq7FXYq8w82/n75X8sedG8uX1vNNDDGn1y/gIf0Zn+LgY9iwCEFi&#xA;GqOlDjSsx0vWvJvnTSudnNaazYNQyQuqyhT2EkMg5IfZlxVK/MXkDQE0K5TQ7JNDuRST6xo9narc&#xA;tx/ZUMm9fYg++Kvl7zDo2ieXvMyT3Wpz6sZ2l+v2V7ZXNpfKZkYc5EmHBvib7SyVJ7Zi67FkyYjH&#xA;GeGe1H3EFytDlhjyiWQXDe/iCGa/kR5B85r57tfNTaUdO0NPXJNzWIsk8bqqwow5tQsN6caDrmRj&#xA;iYxAJsgc+9oySEpEgUCeXc+nskwdirsVdir49/5yC+s2n5t6xLHI8ZuI7VwVJXYW0aUqOu6YQhgc&#xA;fmDXo0CR6ldIg6Ks8gA+gNhVXs77zXq93Dp1rdXt7c3LhIbZZZZGdu1FqcVfU35LflBH5Ns21XVu&#xA;M/ma9SkzV5C3jbcxI3diftt9A23MSUpH/wA5J/mNNo+mW3ljS7hodSv+NxdzRMVeK3RvgAZaEGR1&#xA;+4HxwhVn5Jfnr+m2i8t+aZlXVzRLDUGoq3PYRydhL4H9r/W+0CFe4Yq7FXYq+Yf+crY3Hm3RpCPg&#xA;awKq3iVmckf8MMIQ8Qwq7FUdoeh6rruq2+laVbtdX103CKJPxJPQKBuSdgMVfaX5a+RbHyN5Th0t&#xA;XV7je41K76CSZh8Rqf2EA4r7DxrkUo+wRNY1VdYCU0+2XhpzFaGd6MGuPEoquyQ+IZ23DKcVeSf8&#xA;5L/mNc6fBa+U9KuWhurkC51OSJirrED+6i5Dcc2BZvYDscIVl/5H/mcPOfl36tfyD9P6YFjvQdjM&#xA;h2ScD/K6N/lfMYCr0rFXYq7FXYq7FUp81+YLby75b1LW7neKwgebgdubgURPm7kKPnir4Q1C/u9R&#xA;v7m/vJDNd3crzXErdWkkYsx+knJITryFp+sXuvquk6hNpd1DG0pvYBMWVVIrvCPhG/Vyq+J6Yq+m&#xA;LfQfPOt+UIFl1uDXgS6v6iQW4miBCtHJ6TX1vL9n4WKqyH4tz8Jilk3lvyJHpd0ZL6VNRjtqfoky&#xA;+s7WwNQ6p68s9B9mm9ffoAqifMn5ieTvLk0VtqmpRR3s7rHFZIfUnLOQoqi1Kjf7TUGKskxV2Kux&#xA;V2Kvln/nKbSnt/PFhqIWkV9YqvLxkgkYN9yOmEIeMYVe2/k5dahpk2mS2OnQ6VBP+9urt+E+o6hE&#xA;hrLwaYKltZAj45KKABQOz4Cr3Xzb+ZPlny55VbzFLcrc28gAsIomHK4kdeUap7FSG5fy7+GBL4w8&#xA;zeYtS8x69ea1qT87u9kLvT7Kr0RF/wAlFAUewySEsVmVgykhgagjYgjFX1R+Qn5wHzJaL5b12auv&#xA;WqVtblzvdQqO57yoOv8AMN+tciQl7LirsVebfnh+WE/njQbeTTio1rTC72aOwRZUk4+pEWOwJ4Aq&#xA;T38K1xCvAtO/ID8yr/Vnsxphs7VJCpvrt0SMICQG+EszVp+wDhtD1fW/+cabCbyzo+jaTdxwXdtc&#xA;NNq2qzozSzCRArcEXailRxQsAB3rWotLO/Jf5beXPIGj3D6NZvfan6TNNcuV+s3DKOQiVjRUViKB&#xA;RQeNeuKoPy5r1r5m1260/VuN1NYIst1axSrJZWsrScI4JVQenJKeNfid6Fa0Q7YqzPW9XtNG0e91&#xA;W8PG1sYZLiY9+MalqD3NKDFXwh5h1vUNe1q91q/YvdX0zSyMdwK9EX2RaKB2GSQmP5f+cbzyh5rs&#xA;dbtiSkL8LuEf7tt3NJU+kbjwYA4q+5bK8tr2zgvbWQS2tzGk0Eq9GjkUMrD5g5FKtirsVdirsVeH&#xA;/wDOVHmN7TyzpmgxEg6pO085B/3VagUU/OSRT/scIV8xYUI/RNVbS9QS7ESzKNnjZUJK1B+FnSTg&#xA;dvtKK/fir0+2/wCck/M+naathpGm20KL0lu5bm8kBpT4TJIOI22X7I8MFKxPX/zi/MjXOS3muXEU&#xA;L9YLUi2SngfRCFh/rE4aVj3l+2kvvMWm2wq0l1dwRin2i0kqr1PffFX35kUuxV2KuxV5X/zkV5Ll&#xA;8w+R/wBIWkfqX+hu10igVZrdhSdR8gFf/Y4hXyNkkJzp/mTVdPiVCy3FtKA7W8vxRyNH8EXrgUMq&#xA;xcQUjclPahIKqG1fX9Y1h431G5e4MIbhy6AyNydv9Z2O5+Q6ADFUvAJIAFSdgBiriCDQ9cVRGm6j&#xA;e6bf2+oWMzW95ayLLBMhoyupqDir7Y/LDz3bedfKVtqyAR3ifuNRtx/uu4QDlT/JYEMvsfHIpZbi&#xA;rsVdirGPzJ84T+T/ACfe+YILQXr2piX0WYov72VYuRYBtgXxV8teb/zp/MbzVbTRzXX1HSxRZrWw&#xA;UxJR6gCR6tIwNOhbj7YaQ7yf5yhhtLXT/Vh0620+Rbq0tW2hmvlBP16/larSLBxqkKAljxUL1JVT&#xA;H8wPzZ13VvL7aH+kpLmxuxCBHIsYm9CD4hLcMg/vbmSkhQNRFAG/I40ry8yOYljP2FZmX5sAD/xE&#xA;YVW4q+vP+ccdfk1X8tLe3lblLpNxLZVPXgKSx/QFl4j5ZEpeo4q7FXYq7FXzR/zlgT/iDQR2+qS/&#xA;8nBhCvCcKHYq7FW2RlCkggOKqfEVIr94xVnv5E6G2r/mhoyleUNi7X0x/lFupZD/AMjeAwFX2fgS&#xA;7FXYq7FXEAih6Yq/P+8gRppkQk3ELurj+dVJ+Me+2/3+OSQh2cG0RARVJHJG1fjVaf8AEDirdrHz&#xA;lZa0pHI3Sv2Y2b+GKrmHoW0ZWnqXCli3dUDFOI9yVNfb6cVQ+KuxV7D/AM4x+aJdO88S6I7/AOi6&#xA;1AwVD09e3BkRv+ADj7sBV9WYEuxV2KsF/PG3+sflT5hj48qQxyU6f3U8clfo41xCvjazkkWKcAAx&#xA;oFkkU1+IA+nx+n1ckhTa1cziOL4w45RtsKpStTvQUH2t9t/DFVPiPTDCtakHwG238cVVpP8AjnQf&#xA;8Zpv+Ix4qh6n78VfSv8AzidcFtC1+33pHdQyU7fvIyNv+ReApe8YFdirsVdir5u/5yztmXVfLlzv&#xA;xkguYx4VjeNj/wAnMIV4HhQ7FXYqvkmZ0iUgARKUHuCzN/xtir2T/nG3XvJ+ganql9rupw2F5dxp&#xA;a2In5KpQN6kxaQjgu/p05MK4Cr6gtLy0vLdLm0njuLeQVjmiZXRh4hlJBwJVsVdirsVdir4F8xI9&#xA;t5l1NEBieG9nChfhKFJWpSnSlMkhl/nr8uDoXkrQPNEEhNrrsNq80DVBjuHgeRuIAC8HHxL4b9sC&#xA;sI0+qSyyHZVgm5EEbc42jH3s4GFXXzvJBZO29IOHLb9iRwBt4LTFUIev9MVdirKfysu3tfzI8tSo&#xA;SC2o20Rp4TSCI/g+JV9yZFLsVcSAKnpir56/On85rXUmvPJ3l5o7i0MNwNV1DZkcxxO/pQnwVl+J&#xA;+52G3UgK+fYZOENwCCRIgjUjoDzV9/oQ4UI64k+oWP1Lb69ICLlv2oYyQfQr2YkVfw+zseYxVLlF&#xA;YXoCSpVjQHZdxU/SRiq95ENlFGD8ayyMR7MsYH/ETiqjir6F/wCcSp6P5ogJO4spFHYU9cN9O4wF&#xA;X0RgS7FXYq7FXkf/ADkp5SvNb8kw6jZRNNc6LMZ5EUVb6vIvGUgDf4SFY+wOIV8nZJDsVdiq+Z5H&#xA;cGT7QVQNqfCqgL/woGKsnvvJGpj8v9O84xlG095pLGdKkOriRyj77FWrx26Ee+KoPyf548yeUdTj&#xA;v9GvHhowM9tUmGZR1WWP7LVG1eo7UOKvuHQtVi1fRNP1aJSkWoW0N1Gh6hZ4xIAfobIpR2KuxV2K&#xA;vgzzx6f+NfMHpOJIv0ld8JBsGX13o305JD2z84yP+hfPI4ruf0WQP+3bLgCvDfL2l3erXkumWfA3&#xA;VzBIYvVdYk/cj12BdyqrVYiBU9aYVQDlhF6TGhjdjw9yAGNen7IxVSxVcsZKM/RF2r4k9AMVZH+W&#xA;UEs/5i+WEjHJhqlnIR/kxzq7H6FU4q+6MilTnmWCCSZgzLErOwQFmIUVPFRuT7Yq+WvzQ/5yH1Tz&#xA;HZT6JoVs+labNVLqd3BuZk7p8Hwxqf2gCSelaVGGkPJ9KJF1J0/3nuR1/wCXeQYVWW161vFIqIDK&#xA;zI8cp6oVDCoHj8ex7Yqhz133rufp3xVVhj5R3J5EenGGoDsf3iLQ+29cVWtEoto5a/E7uhXwChSD&#xA;/wANiqbaX5M8y6npF7rNrZP+idPjaW6v5KRwgL+yrORzcnbitTir2f8A5xN0+7+teYdQoy2nC3tw&#xA;f2Wkq7mnui/8SwFL6MwK7FXYq7FXYqw7Xvyh/LjXBIb3QrZJpCWa4tl+rScj+0Wh4cj/AK1cbV4T&#xA;+ZH/ADjhrehq2oeVjLrOnAkvacQ15EPZUA9Yf6or7d8NoeQX1ldWVy1rdwSW9zGB6sMqlHUkBhVW&#xA;CkbEYVbERHKS6DsqKgABFTzWqDkeVBwHh7Yqj77zXrl5oNl5fkuOGi6ezyW1jGAqepIzM0jn7TtV&#xA;zQsTToKDFU//AC1/KjzH531CP6vC1voqSAXupuKIqg/EsVf7ySnYdO9MFq+0LGytrGyt7K1T07a1&#xA;jSGCMfsxxqFUb+AGBKvirsVSPzvHr8nlHVo/L22tPbSLZGoU8yKfCTsGpXj70xV8ix/kv+Z00gSL&#xA;QLl2YkFnAiWoYj7UpTrStcNoZN+e9xqFpaeUvK8l9bTWmi6VDDcRW8ySML6KMRS+oinmvwooTkvc&#xA;+9EK8qQwxo49aomVVcKhJA5K7dSvQjbx9sKrY1syV9SWRQac+MatTxpV1rTt0xVVcaSkZ9Np55SP&#xA;h5KkKqfejTF/+FxVDyTM4CkBVH2FFaL4037+++Kvfv8AnHD8rdSj1MectYt2t4IUZNIhlBV3eQcW&#xA;n4n9gISFr1rXtuCVfRmBLsVYpd/lT+XF3fG+uPL1m9yxLM3p8VJO5JRaIfpGKvLf+chrSXy7oFjp&#xA;PljRraw0jVfUTVJ7O1SMkxNG0UbuigKGNT8XWnthCC8R0b8ufPes8Tpug3s8bfZmMLRxH/npJxT8&#xA;cKs60f8A5xi/MW84tfvZ6WhpyWWUyyD5CESIf+DwWqYec/8AnG/UvL3lZ7/S7u517VPVjjeztbfi&#xA;BEx+JgitK78WC9PnTbG1TX8qfK3lTyj5SvfMX5kaTFZ3QuSNPXUog0zoqLtDbvUluZNPhr36b4lU&#xA;Tqml/mB+clzbpDbt5a8g27Brb11o8wGwkEQI9RqfZGyL4k4pe0+UPKWj+U9Bt9F0mMpbQVLu28ks&#xA;jfbkkPdm/sGwwKnWKuxV2KuxV2KuxV2Ksc1/8uvJHmDUItR1jR4Lu+ipxuGDK54/ZDlCvMDsGriq&#xA;C1r8ovy41jm15oVusjosZlgBt2CoAFoYin2QoGNqlOk/84//AJW6dOJ/0UbyRTVRdyySoPnHUI3+&#xA;yBxtXoVvbW9tAlvbRJDBEAscUahEVR0CqKADFVTFXYq7FXYq7FWLy/lf+XUsryyeW9PaSRizsbeO&#xA;pYmpPTFUM35O/lgzEny5Z1JrshA+4HG1UJfyS/KuR+TeXrcH/JaVB9yuBjarP+VG/lT/ANS9D/yM&#xA;n/6qY2qb6V+W/kHSpVmsNAsYZ0NUm9FHkU+Ku4Zh9BxVkmKuxV2KuxV2KuxV2KuxVLtQ8uaBqV5B&#xA;e6hptteXdqKW09xEkrR1Ib4C4PE1HUYqmOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:8e9fc7ae-2b34-bd4e-a896-50f925464a4a</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8e9fc7ae-2b34-bd4e-a896-50f925464a4a</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e0172aeb-e6d3-44e1-860c-4244c8f50f42</stRef:instanceID>
            <stRef:documentID>xmp.did:f02f5642-9c1b-f644-a140-fb88f6ab9a3e</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f02f5642-9c1b-f644-a140-fb88f6ab9a3e</stEvt:instanceID>
                  <stEvt:when>2020-03-05T16:36:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8e9fc7ae-2b34-bd4e-a896-50f925464a4a</stEvt:instanceID>
                  <stEvt:when>2020-03-05T23:04:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3000.000000</stDim:w>
            <stDim:h>1500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Red</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Yellow</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Green</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Blue</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 G=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Cold</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=56 M=0 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>101</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>208</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=51 M=43 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>131</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>197</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=26 M=41 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>186</xmpG:red>
                           <xmpG:green>155</xmpG:green>
                           <xmpG:blue>201</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1500 li
3000 1500 li
3000 0 li
cp
clp
3000 1500 mo
0 1500 li
0 0 li
3000 0 li
3000 1500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.988235 .984314 .968627 rgb
f
2179.33 1176.02 mo
2179.99 1174.27 2180.64 1172.52 2181.29 1170.78 cv
2182.91 1174.53 2184.51 1178.29 2186.12 1182.05 cv
2183.83 1180.1 2181.59 1178.05 2179.33 1176.02 cv
cp
2179.52 1185.67 mo
2179.22 1187.72 2176.56 1188.96 2174.72 1188.4 cv
2174.71 1188.4 2174.7 1188.39 2174.69 1188.39 cv
2175.68 1186.2 2176.41 1183.85 2177.13 1181.93 cv
2177.71 1180.36 2178.3 1178.79 2178.89 1177.23 cv
2179.66 1179.88 2179.97 1182.67 2179.52 1185.67 cv
cp
2169.92 1172.08 mo
2169.7 1172.63 2169.48 1173.18 2169.26 1173.74 cv
2168.82 1172.99 2168.35 1172.25 2167.87 1171.52 cv
2168.84 1170.99 2169.81 1170.46 2170.78 1169.94 cv
2170.49 1170.65 2170.21 1171.36 2169.92 1172.08 cv
cp
2165.34 1200.12 mo
2162.71 1199.62 2160.25 1198.65 2157.94 1197.34 cv
2157.92 1196.11 2157.88 1194.88 2157.8 1193.66 cv
2158.49 1192.81 2159.05 1191.85 2159.52 1190.82 cv
2160.76 1193.02 2162.59 1194.68 2165.43 1195.07 cv
2167.31 1195.33 2168.86 1194.97 2170.15 1194.21 cv
2170.22 1194.92 2170.27 1195.63 2170.29 1196.35 cv
2170.36 1199.06 2167.75 1200.58 2165.34 1200.12 cv
cp
2153.99 1163.74 mo
2153.41 1164 2152.84 1164.26 2152.26 1164.52 cv
2152.79 1164.07 2153.43 1163.75 2154.1 1163.62 cv
2154.07 1163.66 2154.03 1163.7 2153.99 1163.74 cv
cp
2168.36 1175.99 mo
2168 1176.87 2167.65 1177.76 2167.3 1178.65 cv
2167.03 1177.24 2166.8 1175.83 2166.6 1174.41 cv
2167.18 1174.95 2167.76 1175.48 2168.36 1175.99 cv
cp
2165.79 1157.41 mo
2166.33 1157.41 2166.89 1157.52 2167.43 1157.76 cv
2166.88 1158 2166.32 1158.25 2165.77 1158.49 cv
2165.77 1158.13 2165.78 1157.77 2165.79 1157.41 cv
cp
2229.78 1182.14 mo
2231.35 1154.39 2231.54 1126.57 2230.72 1098.79 cv
2230.31 1085.03 2229.59 1071.28 2228.56 1057.56 cv
2228.51 1056.98 2228.46 1056.41 2228.41 1055.83 cv
2203.12 1080.04 2177.82 1104.24 2152.52 1128.44 cv
2140.08 1140.34 2128.03 1153.15 2114.23 1163.49 cv
2107.33 1168.66 2099.92 1172.92 2091.88 1176.04 cv
2084.46 1178.93 2076.69 1180.52 2069.17 1183.06 cv
2062.87 1185.2 2057.17 1189.07 2056.31 1196.17 cv
2055.52 1202.79 2058.9 1208.46 2062.83 1213.5 cv
2064.13 1211.24 2065.64 1209.07 2067.36 1207 cv
2069.66 1204.22 2072.27 1201.78 2075.13 1199.59 cv
2077.64 1197.67 2080.72 1195.08 2083.91 1194.63 cv
2085.84 1194.35 2087.38 1196.42 2085.89 1198.02 cv
2083.95 1200.1 2081.07 1201.25 2078.8 1202.97 cv
2076.21 1204.94 2073.83 1207.23 2071.65 1209.65 cv
2069.24 1212.32 2067.1 1215.32 2065.26 1218.48 cv
2065.38 1219.16 2065.57 1219.84 2065.84 1220.53 cv
2068.77 1227.88 2079.26 1230.57 2087.27 1231.71 cv
2088.81 1227.42 2090.83 1223.36 2093.63 1219.37 cv
2097.55 1213.77 2103.16 1206.59 2109.72 1204.08 cv
2111.65 1203.34 2112.53 1205.91 2111.52 1207.17 cv
2109.3 1209.96 2106.05 1212.11 2103.54 1214.68 cv
2101.11 1217.16 2098.9 1219.85 2096.9 1222.69 cv
2094.57 1226 2092.35 1229.68 2090.46 1233.48 cv
2090.71 1233.84 2090.97 1234.2 2091.26 1234.55 cv
2097.99 1242.61 2109.98 1238.71 2118.57 1236.88 cv
2143.94 1231.49 2170.03 1230.72 2195.42 1225.46 cv
2206.33 1223.19 2217.03 1220.05 2227.2 1215.58 cv
2228.28 1204.45 2229.15 1193.31 2229.78 1182.14 cv
cp
.203922 .203922 .203922 rgb
f
2053.07 451.013 mo
2053 450.989 2052.94 450.968 2052.88 450.937 cv
2048.53 448.754 2044.97 443.276 2041.89 439.568 cv
2038.77 435.805 2035.8 431.92 2032.99 427.916 cv
2026.97 419.327 2021.69 410.237 2017.14 400.784 cv
2012.72 391.57 2009 382.007 2006.08 372.208 cv
2004.56 367.083 2003.25 361.89 2002.17 356.651 cv
2001.29 352.326 1999.62 346.924 2000.43 342.538 cv
2000.62 341.542 2002.08 341.319 2002.65 342.069 cv
2002.79 342.138 2002.91 342.231 2003.02 342.365 cv
2015.93 358.061 2026.54 375.228 2035.42 393.501 cv
2039.73 402.375 2043.63 411.457 2047.08 420.699 cv
2048.89 425.561 2050.6 430.469 2052.22 435.398 cv
2053.38 438.932 2055.32 443.138 2055.88 447.051 cv
2060.67 440.4 2065.62 433.867 2070.65 427.424 cv
2077.14 419.103 2083.78 410.884 2090.63 402.853 cv
2065.23 373.827 2037.44 344.361 1999.08 333.88 cv
1997.63 333.485 1996.68 334.661 1996.66 335.816 cv
1996.48 336.099 1996.38 336.45 1996.41 336.88 cv
1998.78 382.298 2016.76 426.184 2046.74 460.269 cv
2048.81 457.156 2050.91 454.069 2053.07 451.013 cv
cp
f
2346.21 1118.61 mo
2360.69 1101 2374.82 1083.1 2388.72 1065.03 cv
2375.64 1039.66 2361.76 1014.67 2347.24 990.1 cv
2339.95 977.76 2332.48 965.527 2324.83 953.407 cv
2318.15 942.818 2310.84 932.449 2304.46 921.642 cv
2307.25 938.052 2308.89 954.783 2310.25 971.334 cv
2312.97 1004.63 2313.64 1038.04 2312.5 1071.42 cv
2311.44 1103 2308.34 1134.24 2304.33 1165.53 cv
2314.08 1154.88 2323.87 1144.28 2333.6 1133.61 cv
2337.85 1128.66 2342.06 1123.66 2346.21 1118.61 cv
cp
f
2065.08 808.99 mo
2064.52 802.456 2065.33 796.263 2065.62 789.77 cv
2065.89 783.862 2060.21 785.322 2056.46 785.807 cv
2052.84 786.275 2049.24 786.878 2045.67 787.63 cv
2040.57 788.702 2035.42 789.821 2030.33 791.043 cv
2039.35 804.22 2051.64 814.952 2066.58 820.474 cv
2065.52 816.665 2065.35 812.14 2065.08 808.99 cv
cp
f
2691.43 941.592 mo
2691.6 941.138 2691.75 940.676 2691.92 940.216 cv
2693.18 940.815 2694.7 940.87 2696.02 940.409 cv
2696.04 941.138 2696.06 941.857 2696.09 942.559 cv
2696.22 946.44 2696.21 950.325 2696.33 954.208 cv
2696.33 954.299 2696.33 954.393 2696.34 954.484 cv
2694.69 950.191 2693.06 945.893 2691.43 941.592 cv
cp
2687.92 932.284 mo
2687 929.854 2686.09 927.423 2685.18 924.99 cv
2685.45 924.696 2685.73 924.4 2686 924.107 cv
2686.74 926.798 2687.47 929.492 2688.17 932.19 cv
2688.09 932.221 2688 932.247 2687.92 932.284 cv
cp
2684.62 959.779 mo
2684.19 958.788 2683.76 957.797 2683.32 956.808 cv
2683.48 956.567 2683.65 956.332 2683.81 956.091 cv
2684.17 956.848 2684.52 957.607 2684.88 958.363 cv
2684.8 958.837 2684.71 959.309 2684.62 959.779 cv
cp
2680.75 913.09 mo
2680.22 911.675 2679.69 910.26 2679.17 908.844 cv
2676.49 901.607 2673.71 894.383 2670.95 887.146 cv
2673.66 891.914 2676.39 896.673 2679.12 901.424 cv
2679.24 901.625 2679.35 901.826 2679.47 902.027 cv
2679.45 902.319 2679.43 902.611 2679.41 902.904 cv
2679.43 903.004 2679.45 903.104 2679.47 903.202 cv
2680.09 906.364 2680.68 909.548 2681.22 912.739 cv
2681.06 912.856 2680.9 912.972 2680.75 913.09 cv
cp
2679.65 948.542 mo
2679.52 948.267 2679.4 947.993 2679.28 947.719 cv
2679.42 947.601 2679.57 947.479 2679.72 947.36 cv
2679.81 947.56 2679.91 947.76 2680 947.959 cv
2679.88 948.155 2679.76 948.347 2679.65 948.542 cv
cp
2674.4 936.905 mo
2674.5 936.785 2674.6 936.662 2674.71 936.542 cv
2675.28 937.767 2675.84 938.991 2676.41 940.216 cv
2676.28 940.313 2676.15 940.413 2676.02 940.51 cv
2675.48 939.309 2674.94 938.107 2674.4 936.905 cv
cp
2674.85 970.235 mo
2674.32 970.442 2673.76 970.54 2673.2 970.517 cv
2674.29 969.123 2675.37 967.726 2676.44 966.322 cv
2677.27 968.179 2678.1 970.036 2678.95 971.886 cv
2677.4 972.385 2675.7 972.049 2674.85 970.235 cv
cp
2669.28 956.328 mo
2669.92 955.727 2670.57 955.136 2671.22 954.546 cv
2671.78 955.816 2672.33 957.087 2672.89 958.354 cv
2672.14 959.336 2671.38 960.313 2670.61 961.285 cv
2670.18 959.631 2669.73 957.979 2669.28 956.328 cv
cp
2675.3 1083.46 mo
2674.83 1084.15 2674.36 1084.85 2673.89 1085.54 cv
2672.47 1084.37 2671.08 1083.16 2669.7 1081.94 cv
2670.54 1081.1 2671.39 1080.26 2672.22 1079.42 cv
2673.48 1080.15 2674.74 1080.88 2676 1081.6 cv
2675.96 1082.19 2675.74 1082.82 2675.3 1083.46 cv
cp
2661 852.403 mo
2659.98 848.056 2658.9 843.722 2657.76 839.406 cv
2660.14 843.759 2662.47 848.134 2664.71 852.553 cv
2665.85 856.349 2667 860.146 2668.15 863.941 cv
2665.78 860.083 2663.4 856.237 2661 852.403 cv
cp
2666.93 947.923 mo
2666.77 947.354 2666.61 946.784 2666.44 946.215 cv
2666.7 945.909 2666.95 945.603 2667.21 945.295 cv
2667.46 945.876 2667.71 946.456 2667.96 947.037 cv
2667.62 947.333 2667.27 947.625 2666.93 947.923 cv
cp
2649.48 883.521 mo
2649.84 883.642 2650.2 883.776 2650.55 883.938 cv
2651.37 885.692 2652.19 887.431 2652.97 889.15 cv
2657.1 898.251 2661.18 907.38 2665.4 916.441 cv
2665.46 916.765 2665.51 917.086 2665.56 917.408 cv
2660.36 906.041 2655.04 894.729 2649.48 883.521 cv
cp
2660.77 1105.77 mo
2660.66 1105.4 2660.55 1105.04 2660.45 1104.68 cv
2660.73 1104.5 2661.01 1104.32 2661.28 1104.14 cv
2661.55 1103.96 2661.83 1103.79 2662.1 1103.62 cv
2661.66 1104.33 2661.21 1105.05 2660.77 1105.77 cv
cp
2657.4 1094.24 mo
2658.24 1093.4 2659.08 1092.56 2659.92 1091.72 cv
2660.41 1092.05 2660.9 1092.37 2661.39 1092.7 cv
2660.14 1093.5 2658.91 1094.33 2657.67 1095.13 cv
2657.58 1094.83 2657.49 1094.54 2657.4 1094.24 cv
cp
2652.62 1047.6 mo
2653.26 1046.89 2653.92 1046.2 2654.58 1045.51 cv
2655.85 1047.31 2657.13 1049.09 2658.43 1050.85 cv
2656.49 1049.77 2654.56 1048.69 2652.62 1047.6 cv
cp
2650.07 947.735 mo
2648.43 943.953 2646.95 940.107 2645.58 936.221 cv
2645.63 935.957 2645.68 935.694 2645.74 935.438 cv
2645.92 934.593 2646.1 933.747 2646.27 932.902 cv
2647.62 937.439 2649.09 941.952 2650.66 946.413 cv
2650.46 946.852 2650.25 947.292 2650.07 947.735 cv
cp
2643.59 1124.43 mo
2642.93 1122.55 2642.34 1120.63 2641.74 1118.75 cv
2641.57 1118.21 2641.42 1117.67 2641.25 1117.12 cv
2642.93 1116.04 2644.61 1114.96 2646.28 1113.87 cv
2646.63 1115.68 2646.98 1117.48 2647.33 1119.29 cv
2647.42 1119.77 2647.55 1120.31 2647.7 1120.89 cv
2646.39 1122.12 2645.03 1123.31 2643.59 1124.43 cv
cp
2635.23 1086.38 mo
2634.9 1086.54 2634.57 1086.72 2634.22 1086.89 cv
2634.18 1086.66 2634.14 1086.44 2634.09 1086.21 cv
2636.06 1084.58 2638.03 1082.96 2640.01 1081.34 cv
2640.15 1082.07 2640.29 1082.8 2640.43 1083.53 cv
2638.71 1084.5 2636.98 1085.47 2635.23 1086.38 cv
cp
2636.17 1097.11 mo
2636.07 1096.62 2635.98 1096.13 2635.89 1095.64 cv
2636.18 1095.52 2636.48 1095.4 2636.78 1095.27 cv
2636.57 1095.89 2636.36 1096.5 2636.17 1097.11 cv
cp
2628.74 1110.59 mo
2627.87 1108.23 2627.04 1105.85 2626.24 1103.45 cv
2626.7 1101.58 2627.21 1099.73 2627.75 1097.88 cv
2627.77 1097.98 2627.79 1098.08 2627.81 1098.17 cv
2628.55 1101.83 2629.35 1105.48 2630.23 1109.1 cv
2629.73 1109.6 2629.24 1110.1 2628.74 1110.59 cv
cp
2624.01 1127.89 mo
2624.32 1127.78 2624.63 1127.63 2624.93 1127.44 cv
2625.31 1127.21 2625.68 1126.98 2626.05 1126.75 cv
2626.5 1127.81 2626.94 1128.87 2627.4 1129.92 cv
2625.96 1129.92 2624.69 1129.1 2624.01 1127.89 cv
cp
2635.81 775.07 mo
2636.47 776.566 2637.14 778.059 2637.83 779.544 cv
2637.3 779.616 2636.79 779.73 2636.29 779.89 cv
2636.1 779.503 2635.92 779.112 2635.74 778.726 cv
2635.09 777.387 2635.24 776.104 2635.81 775.07 cv
cp
2641.81 915.503 mo
2641.17 916.007 2640.65 916.761 2640.35 917.802 cv
2640.3 917.971 2640.26 918.14 2640.21 918.309 cv
2639.22 914.251 2638.39 910.153 2637.81 906.018 cv
2637.33 902.539 2636.85 898.775 2637.07 895.134 cv
2638.02 898.379 2638.98 901.621 2639.94 904.864 cv
2639.93 904.938 2639.92 905.015 2639.94 905.1 cv
2640.45 908.564 2641.08 912.035 2641.81 915.503 cv
cp
2644.04 792.819 mo
2644.52 794.903 2644.59 797.152 2644.76 799.166 cv
2644.77 799.258 2644.78 799.35 2644.79 799.442 cv
2644.15 797.826 2643.5 796.215 2642.84 794.609 cv
2643.23 794.008 2643.64 793.413 2644.04 792.819 cv
cp
2653.59 809.756 mo
2654.57 811.416 2655.63 813.037 2656.81 814.494 cv
2655.81 814.763 2654.94 815.516 2654.6 816.868 cv
2653.72 820.35 li
2653.26 822.131 2654.49 823.641 2655.96 824.163 cv
2656.44 825.937 2656.94 827.707 2657.48 829.473 cv
2656.64 829.633 2655.87 830.059 2655.34 830.674 cv
2654.51 827.818 2653.66 824.97 2652.77 822.135 cv
2652.64 818.537 2652.49 814.941 2652.31 811.348 cv
2652.74 810.817 2653.16 810.286 2653.59 809.756 cv
cp
2436.67 1206.52 mo
2436.29 1205.32 2435.89 1204.12 2435.5 1202.92 cv
2438.39 1198.57 2441.09 1194.07 2443.56 1189.45 cv
2443.79 1189.22 2444.04 1188.99 2444.27 1188.76 cv
2445.24 1191.47 2446.18 1194.2 2447.09 1196.93 cv
2443.71 1200.24 2440.23 1203.44 2436.67 1206.52 cv
cp
2431.74 1191.55 mo
2431.31 1190.29 2430.89 1189.03 2430.45 1187.77 cv
2432.26 1186.5 2434.08 1185.27 2435.93 1184.06 cv
2434.58 1186.59 2433.19 1189.08 2431.74 1191.55 cv
cp
2427.07 1178.38 mo
2427.19 1178.31 2427.32 1178.24 2427.44 1178.17 cv
2429.8 1176.88 2432.17 1175.79 2434.57 1174.82 cv
2432.46 1177.01 2430.32 1179.19 2428.17 1181.36 cv
2427.81 1180.36 2427.43 1179.37 2427.07 1178.38 cv
cp
2423.59 1169.25 mo
2427.17 1166.82 2430.79 1164.46 2434.48 1162.21 cv
2435.07 1163.77 2435.64 1165.34 2436.23 1166.91 cv
2432.4 1168.72 2428.66 1170.76 2425.04 1173 cv
2424.56 1171.75 2424.08 1170.5 2423.59 1169.25 cv
cp
2411.32 1159.04 mo
2410.26 1157.17 2409.19 1155.3 2408.12 1153.43 cv
2410.64 1153.74 2412.82 1156.56 2411.32 1159.04 cv
cp
2400.72 1170.88 mo
2399.5 1167.84 2398.28 1164.8 2397.04 1161.78 cv
2397.1 1161.1 2397.12 1160.41 2397.09 1159.73 cv
2397.5 1159.44 2397.9 1159.15 2398.31 1158.87 cv
2399.49 1162.41 2400.65 1165.96 2401.82 1169.51 cv
2401.45 1169.97 2401.08 1170.42 2400.72 1170.88 cv
cp
2377.6 1239.58 mo
2376.03 1240.74 2374.44 1241.9 2372.84 1243.02 cv
2373.23 1242.05 2373.62 1241.09 2374.01 1240.12 cv
2375.48 1239.61 2376.96 1239.09 2378.42 1238.55 cv
2378.15 1238.9 2377.87 1239.24 2377.6 1239.58 cv
cp
2366.94 1195.96 mo
2365.84 1197.01 2364.74 1198.07 2363.64 1199.12 cv
2362.5 1196.66 2361.26 1194.24 2359.91 1191.87 cv
2363.3 1188.64 2366.69 1185.4 2370.13 1182.21 cv
2368.94 1186.76 2367.88 1191.34 2366.94 1195.96 cv
cp
2365.54 1203.54 mo
2365.31 1202.94 2365.06 1202.35 2364.81 1201.76 cv
2365.24 1201.28 2365.67 1200.81 2366.1 1200.34 cv
2365.9 1201.4 2365.73 1202.47 2365.54 1203.54 cv
cp
2362.58 1231.7 mo
2362.5 1231.77 2362.41 1231.85 2362.33 1231.92 cv
2361.63 1232.19 2360.94 1232.46 2360.24 1232.72 cv
2359.53 1230.21 2358.69 1227.76 2357.68 1225.37 cv
2358.33 1224.77 2358.98 1224.16 2359.62 1223.56 cv
2360.42 1222.8 2361.21 1222.03 2362 1221.27 cv
2362.34 1223.53 2362.6 1225.8 2362.75 1228.08 cv
2362.68 1229.28 2362.63 1230.49 2362.58 1231.7 cv
cp
2356.34 1222.38 mo
2355.67 1219.36 2355.11 1216.33 2354.67 1213.27 cv
2356.07 1211.63 2357.49 1209.99 2358.92 1208.37 cv
2359.89 1211.31 2360.7 1214.32 2361.32 1217.36 cv
2359.73 1219.23 2358.17 1221.12 2356.64 1223.03 cv
2356.54 1222.81 2356.44 1222.59 2356.34 1222.38 cv
cp
2353.56 1197.92 mo
2353.78 1197.7 2354.01 1197.49 2354.24 1197.27 cv
2355.52 1199.72 2356.65 1202.23 2357.64 1204.81 cv
2356.46 1205.92 2355.27 1207.02 2354.08 1208.13 cv
2353.75 1204.74 2353.57 1201.34 2353.56 1197.92 cv
cp
2346.87 1226.83 mo
2346.55 1225.92 2346.25 1225 2345.96 1224.08 cv
2346.28 1223.66 2346.61 1223.25 2346.93 1222.83 cv
2346.97 1222.91 2347.02 1222.99 2347.06 1223.07 cv
2347.43 1225.08 2347.85 1227.08 2348.35 1229.07 cv
2347.87 1228.32 2347.37 1227.57 2346.87 1226.83 cv
cp
2344.02 1245.57 mo
2342.88 1241.49 2341.08 1237.65 2338.73 1234.17 cv
2339 1233.76 2339.29 1233.36 2339.56 1232.96 cv
2341.04 1237.13 2342.83 1241.17 2344.95 1245.05 cv
2344.64 1245.23 2344.33 1245.4 2344.02 1245.57 cv
cp
2334.06 1226.01 mo
2333.99 1225.62 2333.92 1225.23 2333.86 1224.84 cv
2334.09 1225.09 2334.31 1225.35 2334.53 1225.6 cv
2334.37 1225.74 2334.21 1225.88 2334.06 1226.01 cv
cp
2271.47 1041.39 mo
2270.79 1031.9 2270.06 1022.42 2269.44 1012.94 cv
2269.4 1012.34 2269.25 1011.79 2269.02 1011.31 cv
2269.15 1010.6 2269.28 1009.88 2269.4 1009.17 cv
2269.55 1010.13 2269.7 1011.08 2269.85 1011.99 cv
2270.28 1014.53 2270.77 1017.09 2271.34 1019.64 cv
2275.25 1025.47 2276.66 1033.7 2278.39 1040.08 cv
2276.43 1038.54 2272.96 1039 2271.47 1041.39 cv
cp
2273.86 969.953 mo
2274.15 972.837 2274.53 975.725 2275.01 978.605 cv
2275.16 983.452 2275.27 988.293 2275.47 993.084 cv
2274.56 990.342 2273.64 987.604 2272.71 984.868 cv
2273.21 979.906 2273.59 974.934 2273.86 969.953 cv
cp
2261.3 1006.8 mo
2260.46 999.381 2260.3 991.544 2262.54 984.475 cv
2262.98 986.01 2263.43 987.541 2263.88 989.074 cv
2263.18 995.005 2262.32 1000.92 2261.3 1006.8 cv
cp
2261.19 1044.85 mo
2261.52 1043.7 2261.85 1042.54 2262.17 1041.39 cv
2262.3 1044.27 2262.44 1047.15 2262.58 1050.03 cv
2262.09 1048.32 2261.62 1046.59 2261.19 1044.85 cv
cp
2306.91 541.622 mo
2306.6 538.754 2306.18 535.889 2305.6 533.069 cv
2308.44 537.963 2311 543.04 2313.29 548.196 cv
2311.12 546.046 2308.99 543.854 2306.91 541.622 cv
cp
2307.85 572.452 mo
2307.87 571.237 2307.89 570.022 2307.9 568.807 cv
2308.77 570.995 2309.61 573.192 2310.39 575.402 cv
2309.53 574.433 2308.68 573.449 2307.85 572.452 cv
cp
2299.5 509.514 mo
2300.18 509.136 2300.98 508.928 2301.78 508.949 cv
2303.03 511.538 2304.18 514.166 2305.23 516.836 cv
2303.35 514.372 2301.43 511.938 2299.5 509.514 cv
cp
2256.87 483.704 mo
2256.63 484.381 2255.88 484.464 2255.46 484.026 cv
2255.28 482.458 2255.09 480.892 2254.91 479.324 cv
2254.43 475.19 2253.96 471.058 2253.48 466.924 cv
2253.46 466.123 2253.44 465.333 2253.39 464.562 cv
2253.02 458.019 2252.49 451.485 2251.82 444.967 cv
2250.44 431.632 2248.48 418.343 2245.84 405.199 cv
2240.74 379.816 2232.49 355.597 2224.54 331.038 cv
2223.85 329.573 2223.12 328.126 2222.38 326.68 cv
2223.27 326.612 2223.97 326.9 2224.54 327.418 cv
2230.01 340.301 2235.43 353.159 2239.82 366.463 cv
2243.12 376.464 2245.53 386.646 2248.16 396.794 cv
2248.74 399.483 2249.3 402.17 2249.83 404.852 cv
2252.43 417.888 2254.49 431.02 2255.85 444.242 cv
2256.55 451.001 2257.09 457.777 2257.47 464.562 cv
2257.8 470.604 2258.93 477.898 2256.87 483.704 cv
cp
2218.05 464.794 mo
2216.38 465.439 2214.54 465.359 2212.49 464.039 cv
2211.95 463.694 2211.47 463.284 2211.02 462.848 cv
2204.56 444.356 2201.99 424.957 2203.11 405.381 cv
2203.67 395.59 2205.14 385.843 2207.49 376.323 cv
2208.67 371.537 2210.08 366.808 2211.72 362.157 cv
2213.43 357.281 2215.77 352.675 2217.53 347.833 cv
2218.13 346.183 2220.37 346.12 2220.95 347.833 cv
2227.86 368.411 2230.76 390.941 2231.46 412.568 cv
2232.02 429.99 2231.66 451.863 2218.05 464.794 cv
cp
2196.47 557.826 mo
2194.96 557.146 2193.47 556.462 2191.97 555.78 cv
2192.06 554.947 2192.16 554.113 2192.26 553.28 cv
2193.7 554.331 2195.14 555.395 2196.55 556.482 cv
2196.53 556.93 2196.5 557.378 2196.47 557.826 cv
cp
2190.48 567.961 mo
2190.56 567.661 2190.63 567.353 2190.67 567.024 cv
2190.72 566.553 2190.77 566.082 2190.83 565.61 cv
2191.87 566.123 2192.91 566.632 2193.94 567.146 cv
2193 567.95 2191.7 568.242 2190.48 567.961 cv
cp
2187.3 464.931 mo
2183.67 453.533 2182.65 441.709 2182.7 429.773 cv
2182.79 408.436 2186.81 387.056 2194.49 367.148 cv
2197.22 360.071 2200.33 353.148 2203.89 346.452 cv
2207.36 341.23 2211.27 336.278 2215.7 331.467 cv
2215.84 331.317 2215.93 331.158 2215.98 330.999 cv
2217.13 329.755 2218.35 328.512 2219.67 327.704 cv
2220.32 327.301 2220.9 327.034 2221.43 326.867 cv
2219.85 328.796 2218.28 330.722 2216.92 332.712 cv
2213.2 338.135 2209.76 343.749 2206.66 349.55 cv
2200.42 361.223 2195.65 373.562 2192.3 386.361 cv
2188.95 399.132 2187.04 412.26 2186.68 425.458 cv
2186.32 438.587 2187.84 451.642 2189.17 464.678 cv
2189.29 465.797 2187.61 465.899 2187.3 464.931 cv
cp
2166.22 656.928 mo
2166.08 656.032 2165.94 655.136 2165.81 654.238 cv
2167.12 653.71 2168.45 653.233 2169.77 652.758 cv
2168.58 654.146 2167.39 655.529 2166.22 656.928 cv
cp
2163.14 538.648 mo
2162.9 537.465 2162.68 536.279 2162.46 535.094 cv
2164.25 535.999 2166.05 536.89 2167.86 537.773 cv
2167.9 540.137 2167.88 542.5 2167.8 544.861 cv
2166.57 544.32 2165.34 543.776 2164.11 543.242 cv
2163.77 541.713 2163.45 540.182 2163.14 538.648 cv
cp
2168.19 503.645 mo
2168.52 504.129 2168.83 504.621 2169.14 505.116 cv
2167.12 504.118 2165.09 503.13 2163.05 502.158 cv
2164.77 501.499 2167.05 501.976 2168.19 503.645 cv
cp
2154.65 662.354 mo
2154.55 661.672 2154.44 660.989 2154.34 660.307 cv
2154.45 660.325 2154.57 660.34 2154.68 660.349 cv
2154.67 661.017 2154.66 661.686 2154.65 662.354 cv
cp
2149.28 521 mo
2148.2 518.718 2147.16 516.417 2146.15 514.103 cv
2147.68 515.106 2149.2 516.134 2150.71 517.16 cv
2150.84 518.312 2150.99 519.464 2151.14 520.615 cv
2150.46 520.54 2149.83 520.69 2149.28 521 cv
cp
2142.9 683.061 mo
2142.68 680.485 2142.45 677.909 2142.19 675.334 cv
2142.62 674.725 2143.04 674.114 2143.46 673.508 cv
2143.5 677.675 2143.53 681.839 2143.56 685.992 cv
2143.32 685.017 2143.1 684.04 2142.9 683.061 cv
cp
2135.13 702.434 mo
2133.85 698.925 2132.79 695.34 2131.98 691.697 cv
2132.64 690.496 2133.32 689.301 2134.02 688.117 cv
2134.39 689.948 2134.83 691.766 2135.33 693.565 cv
2135.37 693.742 2135.42 693.923 2135.47 694.104 cv
2135.58 696.479 2135.68 698.854 2135.75 701.229 cv
2135.55 701.633 2135.33 702.029 2135.13 702.434 cv
cp
2123.7 596.209 mo
2120.66 598.419 2118.35 601.223 2115.81 603.948 cv
2111.58 608.493 2106.71 611.297 2101.6 614.381 cv
2101.55 614.415 2101.5 614.447 2101.44 614.475 cv
2100.79 614.869 2100.13 615.267 2099.47 615.675 cv
2098.54 616.252 2097.41 615.669 2097.09 614.706 cv
2094.78 607.808 2093.73 600.77 2093.33 593.539 cv
2093.23 591.752 2095.82 591.867 2096.04 593.539 cv
2096.45 596.655 2097 599.75 2097.64 602.828 cv
2099.58 601.058 2102.27 600.521 2104.7 599.446 cv
2107.4 598.249 2110.1 597.026 2112.77 595.76 cv
2115.92 594.266 2119.45 593.071 2122.85 591.699 cv
2125.02 590.193 2127.35 588.968 2129.85 588.244 cv
2131.29 587.59 2132.77 589.663 2131.54 590.809 cv
2129.19 592.986 2126.27 594.334 2123.7 596.209 cv
cp
2126.28 702.896 mo
2126.42 702.6 2126.56 702.312 2126.7 702.017 cv
2127.32 704.246 2128.03 706.451 2128.83 708.629 cv
2126.78 707.888 2125.1 705.485 2126.28 702.896 cv
cp
2088.5 475.023 mo
2083.44 485.467 2079.02 496.218 2075.28 507.207 cv
2071.69 517.733 2069.14 528.579 2065.56 539.095 cv
2065.15 540.297 2063.08 540.179 2063.22 538.779 cv
2064.35 527.421 2067.85 516.24 2071.55 505.488 cv
2075.23 494.814 2079.53 484.352 2084.41 474.172 cv
2094.41 453.337 2106.74 433.807 2122.09 416.513 cv
2123.02 415.461 2124.89 416.895 2124.04 418.022 cv
2110.58 435.908 2098.29 454.863 2088.5 475.023 cv
cp
2058.07 452.062 mo
2058.07 452.027 2058.07 451.995 2058.07 451.96 cv
2058.54 451.253 2059.01 450.543 2059.49 449.839 cv
2059.49 449.907 2059.5 449.976 2059.5 450.045 cv
2059.02 450.717 2058.54 451.39 2058.07 452.062 cv
cp
2765.96 1098.72 mo
2764.65 1076.49 2763.34 1054.27 2762.03 1032.04 cv
2757.57 956.055 li
2757.53 955.411 2757.24 954.936 2756.84 954.622 cv
2751.67 868.598 2709.33 790.887 2661.15 721.429 cv
2648.08 702.588 2634.5 684.111 2620.88 665.669 cv
2618.97 663.533 2617.03 661.43 2615.05 659.357 cv
2614.77 659.431 2614.48 659.579 2614.22 659.816 cv
2584.01 686.679 2576.16 728.596 2551.77 759.673 cv
2551.57 759.936 2551.44 760.212 2551.38 760.491 cv
2551.33 760.559 2551.27 760.619 2551.22 760.697 cv
2530.53 795.561 2520.42 835.208 2502.5 871.379 cv
2494.25 888.027 2484.35 904.068 2471.46 917.542 cv
2468.27 920.87 2464.92 924.034 2461.38 926.993 cv
2459.58 928.507 2457.75 930.044 2455.8 931.368 cv
2455.13 931.822 2454.38 932.375 2453.63 932.713 cv
2452.15 933.566 2450.63 933.672 2449.08 933.031 cv
2447.74 931.025 2447.74 929.169 2449.08 927.46 cv
2451.55 923.194 2455.12 919.373 2458.11 915.471 cv
2469.46 900.664 li
2472.17 897.122 2474.89 893.58 2477.6 890.038 cv
2480.7 886.9 2483.93 883.066 2485.96 878.942 cv
2486.74 877.58 2487.33 876.148 2487.56 874.625 cv
2488.17 872.121 2488.22 869.566 2487.42 867.042 cv
2485.55 861.119 2480.78 863.753 2476.72 867.617 cv
2464.43 877.432 2457.42 892.869 2446.78 904.292 cv
2440.35 911.197 2433.13 917.357 2425.27 922.591 cv
2421.64 925.012 2417.81 927.545 2413.82 929.342 cv
2410.81 930.693 2406.97 930.816 2407.13 926.413 cv
2407.22 923.797 2408.78 921.236 2410.26 919.18 cv
2415.65 911.701 2423.87 906.14 2430.19 899.45 cv
2436.96 892.291 2443.13 884.544 2448.59 876.347 cv
2450.42 873.598 2453.6 870.12 2453.19 866.552 cv
2452.87 863.793 2450.45 862.04 2447.82 861.753 cv
2444.8 861.424 2442.3 863.126 2440.31 865.26 cv
2437 868.82 2434.26 873.093 2431.33 876.964 cv
2419.87 892.091 2406.75 908.167 2387.9 913.98 cv
2385.55 914.706 2381.81 916.416 2380.46 913.89 cv
2379.11 911.357 2382.29 908.75 2383.9 906.983 cv
2395.76 894.004 li
2402.79 886.3 2410.04 878.741 2416.85 870.834 cv
2422.08 864.768 2427.4 857.397 2426.96 848.979 cv
2426.82 846.199 2426.17 842.846 2423.44 841.423 cv
2420.58 839.928 2417.63 841.672 2415.62 843.723 cv
2412.81 846.594 2410.65 850.159 2408.01 853.211 cv
2405.04 856.659 2401.88 859.945 2398.56 863.06 cv
2391.73 869.462 2384.2 875.092 2376.15 879.854 cv
2371.87 882.38 2367.45 884.665 2362.91 886.68 cv
2359.82 888.05 2346.86 894.786 2346.5 888.102 cv
2346.24 883.122 2353.83 878.639 2357.08 875.66 cv
2360.91 872.149 2364.58 868.465 2368.08 864.624 cv
2380.17 851.35 2390.07 836.304 2397.65 820.071 cv
2398.25 816.822 2398.47 813.521 2398.26 810.267 cv
2397.99 808.646 2397.44 807.007 2396.53 805.355 cv
2390.51 794.394 2376.16 799.119 2367.47 803.416 cv
2360.9 806.665 2354.7 810.546 2348.81 814.907 cv
2346.5 816.62 2343.73 818.795 2340.8 819.272 cv
2333.57 820.45 2336.22 812.891 2338.99 809.715 cv
2347.37 800.085 2359.33 792.821 2370.27 786.496 cv
2393.02 773.35 2417.81 763.652 2439.07 748 cv
2461.96 731.15 2477.76 707.354 2492.6 683.542 cv
2508.22 658.486 2522.46 632.209 2530.8 603.809 cv
2535.55 595.223 2539.44 586.158 2542.27 576.56 cv
2542.29 576.505 2542.29 576.454 2542.3 576.401 cv
2541.5 575.674 2540.71 574.938 2539.93 574.195 cv
2539.88 574.204 2539.83 574.211 2539.78 574.224 cv
2500.65 541.937 2461.53 509.645 2422.39 477.362 cv
2387.46 448.552 2352.32 419.741 2314.1 395.348 cv
2293.57 382.252 2272.19 370.574 2249.83 360.937 cv
2249.82 360.917 2249.81 360.897 2249.8 360.876 cv
2249.67 360.897 2249.54 360.913 2249.41 360.922 cv
2249.54 361.166 2249.67 361.412 2249.8 361.656 cv
2256.24 373.673 2262.03 386.017 2267.29 398.599 cv
2272.62 411.375 2277.3 424.434 2281.4 437.656 cv
2283.45 444.271 2285.35 450.935 2287.08 457.64 cv
2288.6 463.485 2291.15 470.133 2290.2 476.208 cv
2290.03 477.301 2288.76 477.431 2287.99 476.922 cv
2287.07 473.287 2285.96 469.683 2285.07 466.237 cv
2283.15 458.848 2281.01 451.524 2278.67 444.256 cv
2275.48 434.31 2271.93 424.487 2267.92 414.849 cv
2266.19 410.318 2264.39 405.815 2262.51 401.339 cv
2262.13 400.434 2261.74 399.532 2261.36 398.628 cv
2258.63 391.462 2255.78 384.338 2252.76 377.29 cv
2246.53 362.744 2239.71 348.151 2231.85 334.309 cv
2230.63 331.755 2229.31 329.283 2227.95 326.99 cv
2225.44 322.771 2221.71 322.549 2217.94 325.488 cv
2212.73 329.544 2208.16 335.047 2204 340.139 cv
2200.62 344.29 2197.5 348.58 2194.75 353.146 cv
2164.8 360.411 2136.55 373.868 2111.74 392.056 cv
2109.35 393.715 2107 395.419 2104.69 397.177 cv
2096.78 403.197 2089.29 409.761 2082.31 416.841 cv
2071.41 427.907 2061.08 440.409 2053.21 454.054 cv
2051.13 456.213 2049.42 458.929 2048.09 461.744 cv
2047.94 461.635 li
2043.72 468.61 2039.87 475.809 2036.42 483.199 cv
2035.12 485.963 2033.88 488.752 2032.7 491.57 cv
2020.75 520.15 2015.32 550.896 2012.11 581.562 cv
2008.6 615.054 2007.09 648.814 2007.69 682.483 cv
2008.23 713.204 2008.84 745.887 2021.24 774.535 cv
2023.36 779.419 2025.87 784.148 2028.74 788.63 cv
2035.18 785.836 2041.68 783.854 2048.75 782.585 cv
2053.82 781.676 2062.96 778.875 2067.2 783.203 cv
2071.55 787.656 2068.69 796.396 2068.68 801.801 cv
2068.68 806.425 2069.07 811.047 2069.88 815.599 cv
2070.25 817.63 2070.96 819.836 2071.22 821.992 cv
2073.49 822.642 2075.81 823.179 2078.19 823.584 cv
2106.66 828.432 2134.34 816.75 2156.42 799.427 cv
2174.55 785.188 2190.25 767.521 2203.83 748.727 cv
2203.92 749.06 2203.99 749.396 2204.08 749.729 cv
2210.44 739.482 2216.37 728.952 2221.89 718.229 cv
2234.66 693.431 2245.29 667.636 2254.63 641.36 cv
2255.13 639.955 2257.3 640.514 2256.89 641.983 cv
2249.36 668.895 2238.57 694.849 2225.51 719.551 cv
2219.23 731.446 2212.43 743.057 2205.24 754.425 cv
2209.37 771.562 2212.13 789 2213.45 806.613 cv
2213.53 807.732 2214.65 809.016 2215.92 808.497 cv
2287.21 779.322 2347.04 725.55 2383.05 657.386 cv
2392.23 640.016 2399.87 621.819 2405.84 603.104 cv
2408.8 593.824 2411.35 584.412 2413.46 574.904 cv
2414.33 570.989 2414.79 566.691 2416.94 563.216 cv
2418.13 561.287 2420.18 559.198 2422.62 560.715 cv
2424.67 561.991 2425.14 565.263 2425.32 567.411 cv
2426.22 577.903 2424.9 589.092 2423.73 599.519 cv
2423.07 605.35 2422.21 611.156 2421.16 616.929 cv
2420.33 621.472 2418.48 626.659 2419.43 631.292 cv
2420.84 638.199 2428.59 640.467 2432.84 634.577 cv
2435.3 631.175 2436.63 626.848 2438.39 623.064 cv
2440.81 617.862 2443.33 612.708 2445.95 607.608 cv
2451.42 596.982 2457.34 586.586 2463.68 576.457 cv
2466.65 571.71 2469.57 566.817 2472.93 562.338 cv
2475.03 559.548 2479.23 556.119 2481.46 560.926 cv
2482.9 564.033 2481.21 567.568 2479.95 570.434 cv
2469.73 593.556 2459.23 616.559 2448.87 639.617 cv
2448.68 639.859 2448.54 640.146 2448.49 640.467 cv
2448.49 640.473 2448.48 640.479 2448.48 640.484 cv
2448.38 640.712 2448.32 640.938 2448.3 641.156 cv
2447.99 641.97 2448.08 642.979 2448.75 643.598 cv
2449.19 644.003 2449.75 644.223 2450.31 644.228 cv
2451.13 645.035 2452.65 645.232 2453.47 643.978 cv
2464.79 626.571 2476.9 609.673 2489.8 593.403 cv
2491.87 590.804 2497.62 581.424 2501.89 584.88 cv
2505.18 587.541 2502.41 594.686 2501.4 597.808 cv
2498.56 606.571 2494.03 614.656 2489.27 622.493 cv
2484.57 630.211 2479.56 637.747 2475.3 645.72 cv
2473.02 649.98 2467.55 658.745 2473.49 662.557 cv
2479.85 666.644 2487.92 655.573 2491.63 651.941 cv
2498.52 645.204 2505.3 638.337 2511.61 631.048 cv
2515.3 626.786 2518.76 622.377 2521.98 617.825 cv
2514.66 637.386 2504.79 655.957 2493.97 673.854 cv
2479.23 698.243 2463.62 723.58 2441.08 741.575 cv
2420.57 757.944 2395.91 767.812 2373.12 780.404 cv
2362.1 786.491 2351.41 793.273 2341.9 801.566 cv
2337.91 805.052 2332.94 809.15 2332.07 814.721 cv
2331.42 818.906 2334.05 822.797 2338.36 823.31 cv
2345.02 824.103 2350.95 817.962 2355.97 814.59 cv
2362.53 810.193 2369.81 805.735 2377.44 803.518 cv
2385.03 801.311 2394.16 802.907 2394.38 812.499 cv
2394.39 812.783 2394.37 813.058 2394.36 813.335 cv
2355.33 842.146 2311.91 864.892 2265.91 880.366 cv
2252.57 884.856 2239.02 888.72 2225.33 891.996 cv
2224.56 892.18 2224.14 892.678 2223.99 893.256 cv
2223.75 893.559 2223.61 893.967 2223.67 894.495 cv
2229.39 946.389 2232.89 998.508 2234.17 1050.7 cv
2233.86 1050.77 2233.54 1050.92 2233.26 1051.2 cv
2233.15 1051.3 2233.04 1051.41 2232.93 1051.51 cv
2233.19 1054.81 2233.45 1058.1 2233.71 1061.37 cv
2238.24 1117.38 2236.95 1173.55 2230.93 1229.4 cv
2230.83 1230.34 2230.32 1231.01 2229.67 1231.41 cv
2229.55 1232.66 li
2233.17 1230.03 2236.78 1227.38 2240.28 1224.63 cv
2261.17 1208.19 2280.74 1190.24 2299.27 1171.24 cv
2299.25 1171.03 2299.25 1170.8 2299.29 1170.56 cv
2302.29 1151.9 2304.14 1132.99 2305.7 1114.17 cv
2308.4 1081.39 2309.13 1048.48 2308.01 1015.61 cv
2307.44 999.048 2306.46 982.519 2305.11 966.001 cv
2303.77 949.494 2301.58 933.104 2299.93 916.633 cv
2299.86 915.859 2300.3 915.329 2300.89 915.063 cv
2299.49 912.601 2298.26 910.112 2297.21 907.443 cv
2296.99 906.898 2297.82 906.446 2298.19 906.873 cv
2300.48 909.505 2302.41 912.232 2304.23 915.202 cv
2304.27 915.264 2304.31 915.326 2304.35 915.388 cv
2313.16 926.37 2320.58 938.752 2328.1 950.635 cv
2335.77 962.745 2343.26 974.969 2350.56 987.299 cv
2364.96 1011.6 2378.54 1036.33 2391.51 1061.42 cv
2392.14 1060.59 2392.79 1059.77 2393.42 1058.94 cv
2401.11 1048.89 2408.39 1038.55 2415.87 1028.34 cv
2419.59 1023.25 2423.18 1018.05 2426.83 1012.9 cv
2430.27 1008.02 2433.65 1002.9 2438.17 998.987 cv
2438.83 998.417 2440.25 998.95 2439.83 999.949 cv
2439.71 1000.24 2439.56 1000.53 2439.43 1000.82 cv
2439.65 1000.62 2439.89 1000.44 2440.13 1000.26 cv
2438.22 1004.38 2436.26 1008.47 2434.18 1012.51 cv
2428.92 1022.7 2422.94 1032.54 2416.66 1042.13 cv
2414.43 1045.53 2412.17 1048.9 2409.88 1052.27 cv
2395.53 1071.48 2380.53 1090.19 2364.82 1108.33 cv
2345.71 1130.37 2326.1 1151.84 2304.48 1171.43 cv
2304.11 1171.76 2303.72 1171.94 2303.34 1171.99 cv
2303.04 1172.61 2302.55 1173 2302 1173.15 cv
2299.9 1175.26 2297.79 1177.36 2295.66 1179.44 cv
2278.02 1196.67 2259.92 1213.41 2240.56 1228.69 cv
2237 1231.51 2233.11 1234.3 2229.13 1237.15 cv
2229.13 1237.2 li
2228.84 1237.4 2228.54 1237.59 2228.25 1237.79 cv
2222.27 1242.08 2216.12 1246.54 2210.57 1251.46 cv
2206.33 1255.75 2202.79 1260.65 2200.59 1266.42 cv
2196.72 1276.54 2197.2 1288.29 2204.58 1296.66 cv
2205.08 1297.23 2205.67 1297.37 2206.22 1297.25 cv
2207.5 1299.32 2209.18 1301.05 2211.1 1302.47 cv
2213.83 1295.4 2217.41 1288.71 2221.94 1282.53 cv
2227.75 1274.59 2235.54 1265.08 2244.85 1261.13 cv
2246.33 1260.51 2247.75 1262.11 2246.6 1263.41 cv
2243.29 1267.13 2239.11 1270.31 2235.53 1273.8 cv
2231.88 1277.37 2228.5 1281.19 2225.47 1285.3 cv
2221.09 1291.24 2217.27 1297.66 2214.14 1304.38 cv
2217.08 1305.92 2220.36 1306.89 2223.59 1307.34 cv
2223.67 1307.36 2223.74 1307.35 2223.81 1307.36 cv
2224.79 1308.01 2225.85 1308.57 2226.96 1309.04 cv
2228.23 1309.57 2229.53 1309.95 2230.85 1310.23 cv
2235.82 1296.88 2243.85 1284.16 2254.77 1275.37 cv
2255.61 1274.7 2257.11 1275.58 2256.38 1276.61 cv
2248.59 1287.72 2241.44 1298.65 2235.88 1310.76 cv
2241.59 1310.83 2247.45 1309.35 2252.91 1308.18 cv
2312.12 1295.41 li
2352.1 1286.78 2392.08 1278.16 2432.06 1269.54 cv
2453.29 1264.96 2474.55 1260.47 2495.77 1255.87 cv
2496.27 1247.5 2496.69 1239.13 2497 1230.76 cv
2498.77 1183.43 2497.19 1136 2492.32 1088.89 cv
2489.82 1064.79 2486.46 1040.78 2482.3 1016.92 cv
2478.18 993.317 2472.84 969.972 2468.25 946.465 cv
2468 945.177 2469.84 944.649 2470.23 945.92 cv
2478.38 972.071 2483.61 999.113 2488.25 1026.08 cv
2496.3 1072.96 2500.79 1120.43 2502.14 1167.96 cv
2502.82 1191.88 2502.63 1215.82 2501.6 1239.72 cv
2501.08 1251.68 2500.3 1263.62 2499.27 1275.54 cv
2499.19 1276.5 2499.11 1277.48 2499.04 1278.45 cv
2499.6 1281.57 2500.44 1284.63 2501.68 1287.61 cv
2503.74 1292.57 2507.44 1297.28 2512.07 1299.14 cv
2509.67 1289.65 2510.12 1279.43 2512.66 1269.97 cv
2513.25 1267.78 2516.63 1268.72 2516.05 1270.91 cv
2513.48 1280.64 2513.68 1290.37 2515.59 1299.95 cv
2517.64 1300.07 2519.81 1299.63 2522.07 1298.42 cv
2523.62 1297.59 2524.85 1296.6 2526.73 1297.05 cv
2527.85 1297.32 2528.92 1298.06 2529.91 1298.63 cv
2531.64 1299.62 2533.36 1300.65 2535.34 1301.03 cv
2535.83 1301.13 2536.3 1301.17 2536.76 1301.2 cv
2536.4 1292.94 2536.02 1284.77 2534.3 1276.51 cv
2533.86 1274.34 2536.93 1273.49 2537.63 1275.6 cv
2540.19 1283.38 2541.8 1292.05 2541.27 1300.43 cv
2544.05 1299.4 2546.61 1297.53 2549.24 1296.1 cv
2551.41 1294.91 2553.86 1294.59 2556.28 1294.25 cv
2554.98 1289.16 2554.3 1283.78 2553.36 1278.79 cv
2552.96 1276.68 2556.09 1275.76 2556.6 1277.89 cv
2557.81 1282.89 2559.46 1288.18 2560.38 1293.43 cv
2561.72 1293.03 2563 1292.44 2564.15 1291.47 cv
2566 1289.89 2567.24 1287.79 2568.09 1285.52 cv
2567.96 1285.25 2567.88 1284.93 2567.89 1284.55 cv
2568.42 1270.13 2568.99 1255.71 2569.56 1241.29 cv
2569.5 1240.52 2569.44 1239.75 2569.38 1238.99 cv
2569.47 1238.96 2569.56 1238.94 2569.65 1238.92 cv
2570.36 1220.98 2571.05 1203.04 2571.66 1185.1 cv
2573.65 1126.06 2574.15 1066.92 2574.26 1007.84 cv
2574.32 978.296 2573.87 948.748 2573.34 919.206 cv
2573.08 904.435 2572.7 889.666 2572.38 874.896 cv
2572.06 860.165 2571.28 845.314 2572.09 830.594 cv
2572.18 828.954 2574.39 829.035 2574.58 830.594 cv
2576.63 847.282 2576.69 864.319 2577.1 881.114 cv
2577.5 897.438 2577.83 913.764 2578.08 930.091 cv
2578.99 989.149 2579.41 1048.31 2578.08 1107.37 cv
2577.09 1150.82 2576.2 1194.29 2574.38 1237.72 cv
2585.52 1234.89 2596.63 1231.92 2607.67 1228.72 cv
2624.45 1223.86 2641.3 1218.74 2657.12 1211.23 cv
2665.64 1207.17 2673.82 1202.37 2681.29 1196.58 cv
2688.18 1191.23 2696.19 1182.14 2705.94 1185.06 cv
2717.5 1188.52 2710.01 1202.49 2705.64 1209.61 cv
2698.31 1218.06 2690.45 1226.11 2682.51 1233.95 cv
2664.06 1252.19 2644.23 1269.04 2623.24 1284.29 cv
2612.77 1291.9 2602.01 1299.11 2590.99 1305.91 cv
2586.11 1308.92 2580.62 1311.48 2576.18 1315.12 cv
2572.98 1317.74 2570.41 1321.75 2572.39 1325.91 cv
2577.61 1336.85 2594.76 1325.84 2601.53 1322.73 cv
2613.87 1317.07 2626.07 1311.1 2638.11 1304.83 cv
2657.84 1294.55 2677.13 1283.44 2695.96 1271.58 cv
2712.26 1262.51 2727.97 1252.25 2740.1 1237.88 cv
2747.83 1228.73 2753.99 1218.49 2758.6 1207.57 cv
2765.36 1193.82 2768.47 1178.92 2768.9 1163.33 cv
2769.5 1141.84 2767.21 1120.16 2765.96 1098.72 cv
cp
f
2224.87 1240.03 mo
2219.83 1243.41 2214.84 1247.13 2210.57 1251.46 cv
2216.12 1246.54 2222.27 1242.08 2228.25 1237.79 cv
2227.12 1238.53 2225.99 1239.28 2224.87 1240.03 cv
cp
.662745 .792157 .803922 rgb
f
2568.09 1285.52 mo
2568.72 1283.85 2569.14 1282.1 2569.42 1280.38 cv
2571.53 1267.54 2570.56 1254.25 2569.56 1241.29 cv
2568.99 1255.71 2568.42 1270.13 2567.89 1284.55 cv
2567.88 1284.93 2567.96 1285.25 2568.09 1285.52 cv
cp
f
2498.72 481.58 mo
2499.85 482.88 2500.51 485.176 2501.28 486.719 cv
2504.58 493.405 2507.98 500.045 2511.41 506.665 cv
2512.55 508.854 2515.92 507.764 2515.93 505.439 cv
2515.97 500.033 2516.96 494.773 2518.95 489.74 cv
2519.35 488.741 2521.74 482.086 2523.31 481.938 cv
2525.44 480.089 2526.12 481.125 2526.1 483.563 cv
2526.13 484.26 2526.08 484.948 2525.93 485.629 cv
2525.75 487.162 2525.4 488.682 2525.13 490.2 cv
2523.27 500.375 2521.44 510.555 2519.67 520.746 cv
2516.61 516.36 2512.47 512.55 2509.37 508.218 cv
2505.62 502.969 2502.36 497.391 2499.53 491.593 cv
2498.12 488.708 2496.71 485.743 2495.69 482.691 cv
2495.37 481.873 2495.15 481.027 2495.04 480.151 cv
2496.97 479.541 2498.2 480.017 2498.72 481.58 cv
cp
2501.89 505.887 mo
2506.21 512.655 2511.76 521.659 2518.99 525.562 cv
2519.41 525.788 2519.84 525.814 2520.22 525.71 cv
2521.33 526.4 2522.94 526.201 2523.25 524.565 cv
2524.92 515.98 2526.55 507.382 2528.14 498.781 cv
2528.9 494.619 2529.88 490.434 2530.43 486.237 cv
2530.78 483.526 2530.72 480.783 2528.81 478.644 cv
2524.48 473.79 2519.33 478.825 2517.1 482.919 cv
2514.63 487.45 2513.02 492.312 2512.06 497.324 cv
2510.75 494.757 2509.44 492.185 2508.11 489.625 cv
2506.09 485.74 2504.28 481.25 2501.6 477.782 cv
2497.16 472.041 2489.06 474.842 2490.73 482.373 cv
2492.55 490.554 2497.43 498.901 2501.89 505.887 cv
cp
1 .454902 0 rgb
f
1506.29 463.423 mo
1507.47 464.777 1508.16 467.168 1508.96 468.776 cv
1512.4 475.739 1515.94 482.656 1519.51 489.55 cv
1520.7 491.831 1524.21 490.695 1524.22 488.274 cv
1524.26 482.643 1525.29 477.165 1527.37 471.922 cv
1527.78 470.882 1530.27 463.951 1531.9 463.796 cv
1534.12 461.871 1534.83 462.949 1534.81 465.489 cv
1534.84 466.214 1534.79 466.932 1534.64 467.641 cv
1534.45 469.237 1534.09 470.82 1533.8 472.402 cv
1531.87 483 1529.96 493.602 1528.11 504.216 cv
1524.92 499.648 1520.62 495.68 1517.39 491.167 cv
1513.48 485.701 1510.09 479.891 1507.14 473.853 cv
1505.67 470.848 1504.2 467.759 1503.14 464.581 cv
1502.8 463.729 1502.58 462.847 1502.46 461.936 cv
1504.48 461.3 1505.75 461.796 1506.29 463.423 cv
cp
1509.59 488.74 mo
1514.09 495.789 1519.88 505.167 1527.41 509.232 cv
1527.84 509.467 1528.29 509.495 1528.69 509.387 cv
1529.84 510.104 1531.52 509.897 1531.85 508.194 cv
1533.59 499.252 1535.28 490.297 1536.93 481.339 cv
1537.73 477.004 1538.75 472.645 1539.32 468.274 cv
1539.69 465.45 1539.62 462.594 1537.63 460.365 cv
1533.12 455.31 1527.76 460.554 1525.44 464.819 cv
1522.87 469.537 1521.18 474.601 1520.19 479.821 cv
1518.82 477.148 1517.46 474.468 1516.07 471.802 cv
1513.97 467.756 1512.08 463.079 1509.29 459.467 cv
1504.67 453.488 1496.23 456.406 1497.97 464.25 cv
1499.87 472.77 1504.95 481.464 1509.59 488.74 cv
cp
f
1291.2 1136.21 mo
1290.36 1134.14 1289.49 1132.09 1288.58 1130.07 cv
1288.54 1128.94 1288.5 1127.81 1288.45 1126.68 cv
1289.22 1126.05 1289.84 1125.23 1290.21 1124.24 cv
1291.07 1128.24 1291.45 1132.29 1291.2 1136.21 cv
cp
1287.97 1104.66 mo
1288.46 1107.83 1288.83 1111.05 1289 1114.29 cv
1288.19 1111.17 1287.29 1108.08 1286.28 1105.04 cv
1286.86 1104.98 1287.43 1104.86 1287.97 1104.66 cv
cp
1270.6 1213.29 mo
1268.24 1211.75 1266.14 1209.97 1264.28 1208 cv
1266.31 1208.94 1268.88 1208.77 1270.66 1207.46 cv
1271.33 1209.95 1273.67 1211.66 1276.05 1212.09 cv
1274.84 1213.73 1272.49 1214.53 1270.6 1213.29 cv
cp
1259.75 1119.6 mo
1259.75 1118.69 1259.76 1117.78 1259.76 1116.88 cv
1260.26 1117.51 1260.75 1118.15 1261.25 1118.78 cv
1260.71 1118.98 1260.21 1119.25 1259.75 1119.6 cv
cp
1258.19 1097.64 mo
1258.21 1097.44 1258.22 1097.25 1258.23 1097.06 cv
1258.48 1097.4 1258.73 1097.74 1258.98 1098.08 cv
1259.48 1098.86 1259.99 1099.64 1260.48 1100.43 cv
1259.86 1099.66 1259.24 1098.89 1258.63 1098.12 cv
1258.48 1097.94 1258.34 1097.79 1258.19 1097.64 cv
cp
1251.87 1173.3 mo
1251.67 1169.98 1251.61 1166.64 1251.69 1163.3 cv
1253.11 1163.49 1254.54 1163.13 1255.56 1162.06 cv
1255.63 1164.25 1255.75 1166.43 1255.9 1168.61 cv
1254.64 1170.2 1253.3 1171.83 1251.87 1173.3 cv
cp
1260.47 1081.96 mo
1259.96 1081.33 1259.45 1080.71 1258.94 1080.08 cv
1258.94 1078.44 1258.93 1076.81 1258.89 1075.17 cv
1259.42 1077.43 1259.94 1079.7 1260.47 1081.96 cv
cp
1267.34 1126.62 mo
1267.53 1126.86 1267.71 1127.09 1267.9 1127.33 cv
1267.65 1127.79 1267.4 1128.25 1267.16 1128.71 cv
1267.22 1128.01 1267.27 1127.31 1267.34 1126.62 cv
cp
1322.64 1229.91 mo
1322.1 1215.64 1321.88 1201.37 1321.91 1187.09 cv
1321.99 1158.79 1323.08 1130.5 1324.7 1102.25 cv
1325.5 1088.21 1326.45 1074.19 1327.46 1060.16 cv
1322.82 1055.13 1318.17 1050.12 1313.5 1045.12 cv
1293.57 1023.79 1273.47 1002.62 1253.52 981.314 cv
1242.66 969.722 1231.41 958.437 1220.37 946.972 cv
1222.54 995.131 1224.71 1043.29 1226.88 1091.45 cv
1228.08 1117.91 1229.27 1144.36 1230.46 1170.82 cv
1231.03 1183.5 1231.82 1196.56 1228.47 1208.95 cv
1225.3 1220.71 1217.79 1230.2 1211.34 1240.29 cv
1205.11 1250.06 1199.37 1261.63 1201.07 1273.57 cv
1202.4 1282.88 1208.21 1291.56 1217.31 1294.51 cv
1216.26 1290.04 1216.57 1284.74 1217.15 1280.82 cv
1218.14 1273.98 1220.86 1267.84 1225.06 1262.38 cv
1226.46 1260.56 1229.59 1262.2 1228.25 1264.25 cv
1224.89 1269.41 1222.69 1275.35 1221.93 1281.46 cv
1221.58 1284.28 1221.51 1287.17 1221.77 1289.99 cv
1221.9 1291.51 1222.26 1293 1222.56 1294.5 cv
1225.37 1296.15 1228.83 1296.64 1232.15 1296.59 cv
1234.97 1296.54 1237.81 1296.4 1240.65 1296.21 cv
1239.7 1292.84 1239.41 1289.16 1239.44 1286.25 cv
1239.53 1279.72 1241.26 1273.56 1244.96 1268.17 cv
1246.91 1265.31 1251.02 1267.76 1249.56 1270.86 cv
1247.23 1275.84 1245.87 1281.39 1246.07 1286.89 cv
1246.19 1289.95 1247.08 1292.79 1247.89 1295.63 cv
1256.31 1294.84 1264.73 1293.74 1273.06 1292.98 cv
1280.12 1292.34 1287.17 1291.71 1294.23 1291.06 cv
1299.44 1290.59 1304.78 1290.15 1309.68 1288.18 cv
1318.89 1284.49 1322.89 1275.99 1323.82 1266.58 cv
1325.02 1254.52 1323.09 1241.99 1322.64 1229.91 cv
cp
.203922 .203922 .203922 rgb
f
1851.01 1046.98 mo
1850.42 1042.11 1849.8 1037.24 1849.11 1032.4 cv
1850.07 1037.31 1850.94 1042.25 1851.73 1047.2 cv
1851.51 1047.07 1851.27 1047 1851.01 1046.98 cv
cp
1805.59 1235.94 mo
1805.58 1235.93 1805.57 1235.92 1805.56 1235.91 cv
1805.69 1232.28 1805.4 1228.64 1804.72 1225.04 cv
1805.79 1225.69 1806.52 1226.82 1806.49 1228.4 cv
1806.45 1230.87 1806.13 1233.4 1805.59 1235.94 cv
cp
1775.25 1212.86 mo
1775.3 1209.73 1775.44 1206.6 1775.75 1203.47 cv
1775.88 1202.16 1776.47 1201.15 1777.27 1200.46 cv
1776.91 1201.44 1776.8 1202.56 1777.04 1203.8 cv
1778.38 1210.88 1779.17 1217.94 1779.53 1224.99 cv
1778.13 1220.94 1776.71 1216.89 1775.25 1212.86 cv
cp
1764.3 1257.77 mo
1763.3 1255.57 1762.38 1253.33 1761.55 1251.04 cv
1761.42 1250.69 1761.3 1250.32 1761.17 1249.96 cv
1762.45 1249.03 1763.73 1248.08 1764.99 1247.11 cv
1765.1 1250.45 1765.17 1253.79 1765.2 1257.13 cv
1764.9 1257.35 1764.6 1257.56 1764.3 1257.77 cv
cp
1757.74 1227.01 mo
1757.46 1228.65 1757.11 1230.25 1756.69 1231.83 cv
1756.3 1230.26 1755.89 1228.7 1755.44 1227.14 cv
1754.74 1224.72 1752.6 1223.42 1750.37 1223.17 cv
1752.48 1220.14 1758.52 1222.43 1757.74 1227.01 cv
cp
1747.71 1262.84 mo
1747.62 1264.27 1747.49 1265.7 1747.35 1267.13 cv
1747.18 1266.79 1747.03 1266.48 1746.88 1266.21 cv
1746.19 1264.96 1745.56 1263.67 1744.97 1262.37 cv
1744.89 1261.66 1744.81 1260.96 1744.71 1260.25 cv
1745.78 1259.72 1746.82 1259.15 1747.87 1258.57 cv
1747.84 1260 1747.79 1261.42 1747.71 1262.84 cv
cp
1741.63 1246.14 mo
1743.05 1243.57 1744.38 1240.96 1745.55 1238.29 cv
1746.1 1241.35 1746.72 1244.38 1747.47 1247.38 cv
1747.61 1248.93 1747.73 1250.49 1747.8 1252.06 cv
1746.68 1254 1745.52 1255.93 1744.35 1257.85 cv
1743.71 1253.89 1742.81 1249.98 1741.63 1246.14 cv
cp
1703.03 1045.37 mo
1703.33 1043.94 1703.62 1042.51 1703.92 1041.09 cv
1704.5 1042.74 1704.02 1044.28 1703.03 1045.37 cv
cp
1693.65 1028.87 mo
1692.81 1031.52 1691.98 1034.18 1691.15 1036.83 cv
1691.03 1036.52 1690.91 1036.21 1690.79 1035.9 cv
1690.85 1032.2 1691.02 1028.5 1691.28 1024.8 cv
1692.28 1025.72 1693.25 1026.66 1694.18 1027.61 cv
1693.98 1027.99 1693.8 1028.41 1693.65 1028.87 cv
cp
1679.84 1087.39 mo
1679.97 1086.55 1680.1 1085.71 1680.19 1084.87 cv
1680.42 1082.9 1679.66 1081.41 1678.43 1080.41 cv
1679.96 1079.34 1681.08 1077.9 1681.84 1076.25 cv
1682.08 1076.55 1682.36 1076.8 1682.66 1077.03 cv
1682.66 1078.04 1682.87 1078.95 1683.24 1079.77 cv
1682.15 1082.32 1681.02 1084.86 1679.84 1087.39 cv
cp
1666.14 1012.33 mo
1665.32 1013.48 1664.94 1014.9 1665.28 1016.42 cv
1665.15 1017.05 1665.03 1017.69 1664.9 1018.33 cv
1662.01 1014.19 1659.2 1010 1656.44 1005.77 cv
1657.04 1005.19 1657.63 1004.6 1658.23 1004.01 cv
1659.41 1005.44 1660.39 1006.98 1661.18 1008.62 cv
1662.99 1008.9 1664.82 1009.34 1666.66 1009.91 cv
1666.48 1010.71 1666.31 1011.52 1666.14 1012.33 cv
cp
1646.29 1069.71 mo
1646.24 1069.76 1646.19 1069.8 1646.14 1069.85 cv
1646.07 1069.74 1646 1069.63 1645.93 1069.52 cv
1645.44 1068.77 1644.94 1068.03 1644.45 1067.28 cv
1645.45 1066.27 1646.45 1065.26 1647.46 1064.26 cv
1647.76 1064.89 1648.04 1065.53 1648.32 1066.17 cv
1647.64 1067.35 1646.97 1068.53 1646.29 1069.71 cv
cp
1639.36 1130.85 mo
1640.48 1130.11 1641.56 1129.31 1642.6 1128.44 cv
1642.75 1129.15 1643.07 1129.8 1643.5 1130.38 cv
1643.52 1131.48 1643.52 1132.59 1643.52 1133.69 cv
1642.09 1132.81 1640.71 1131.86 1639.36 1130.85 cv
cp
1636.61 1091.42 mo
1636.36 1089.99 1635.95 1088.62 1635.26 1087.39 cv
1635.65 1087.15 1636.05 1086.91 1636.44 1086.67 cv
1636.76 1088.45 1636.96 1090.25 1637.06 1092.03 cv
1636.91 1091.83 1636.76 1091.62 1636.61 1091.42 cv
cp
1634 845.145 mo
1630.96 840.698 1626.99 836.624 1623.46 833.05 cv
1626.84 835.359 1630.13 837.778 1633.3 840.383 cv
1634.95 841.738 1634.9 843.65 1634 845.145 cv
cp
1609.69 841.95 mo
1609.76 841.414 1609.82 840.879 1609.88 840.343 cv
1610.16 840.974 1610.43 841.606 1610.71 842.233 cv
1610.37 842.14 1610.03 842.044 1609.69 841.95 cv
cp
1682.54 1017.84 mo
1682.15 1018.01 1681.77 1018.22 1681.43 1018.48 cv
1680.8 1017.6 1680.17 1016.72 1679.51 1015.86 cv
1680.54 1016.49 1681.54 1017.15 1682.54 1017.84 cv
cp
1617.63 1024.4 mo
1617.26 1023.81 1616.89 1023.23 1616.52 1022.64 cv
1617.78 1021.71 1619.04 1020.79 1620.31 1019.86 cv
1619.39 1021.37 1618.5 1022.88 1617.63 1024.4 cv
cp
1609.9 1044.77 mo
1609.6 1044.11 1609.29 1043.44 1609 1042.77 cv
1609.23 1041.43 1609.51 1040.08 1609.82 1038.73 cv
1610.37 1039.84 1610.94 1040.93 1611.5 1042.03 cv
1610.96 1042.94 1610.42 1043.86 1609.9 1044.77 cv
cp
1609.72 1104.66 mo
1608.96 1103.51 1608.29 1102.32 1607.69 1101.12 cv
1606.96 1099.67 1606.28 1098.18 1605.65 1096.67 cv
1605.39 1092.78 1604.98 1088.9 1604.42 1085.06 cv
1604.7 1084.44 1605.05 1083.9 1605.49 1083.53 cv
1605.75 1083.31 1605.92 1083.24 1605.99 1083.22 cv
1606.42 1083.47 1607.19 1085.18 1607.39 1085.63 cv
1608.18 1087.41 1608.83 1089.32 1609.35 1091.3 cv
1607.05 1094.25 1608.26 1098.5 1611 1099.88 cv
1611.08 1100.45 1611.15 1101.02 1611.22 1101.59 cv
1610.7 1102.6 1610.2 1103.62 1609.72 1104.66 cv
cp
1601.93 1072.41 mo
1600.78 1067.79 1599.38 1063.24 1597.69 1058.82 cv
1597.49 1058.29 1597.24 1057.78 1596.97 1057.29 cv
1597.22 1057.15 1597.48 1057.02 1597.74 1056.9 cv
1597.68 1054.01 1597.75 1051.11 1597.92 1048.22 cv
1599.97 1053.49 1602.25 1058.71 1604.74 1063.84 cv
1604.29 1065.78 1604.31 1067.72 1605.03 1069.56 cv
1605.35 1070.36 1605.72 1071.03 1606.14 1071.62 cv
1604.8 1071.57 1603.39 1071.82 1601.93 1072.41 cv
cp
1605.83 1030.38 mo
1606.45 1031.72 1607.07 1033.06 1607.71 1034.4 cv
1607.5 1035.77 1607.31 1037.14 1607.15 1038.51 cv
1606.08 1035.99 1605.04 1033.46 1604.01 1030.91 cv
1604.61 1030.87 1605.22 1030.7 1605.83 1030.38 cv
cp
1588.73 1100.92 mo
1588.56 1101.89 1588.41 1102.87 1588.27 1103.85 cv
1587.99 1102.93 1587.72 1102 1587.46 1101.04 cv
1587.63 1098.9 1587.81 1096.75 1587.99 1094.6 cv
1588.36 1095.91 1588.76 1097.21 1589.19 1098.5 cv
1589.03 1099.3 1588.87 1100.11 1588.73 1100.92 cv
cp
1598.46 827.063 mo
1598.39 827.025 1598.33 826.988 1598.27 826.951 cv
1598.2 827.206 1598.12 827.459 1598.05 827.714 cv
1597.75 826.15 1597.45 824.588 1597.15 823.023 cv
1597.64 823.491 1598.11 823.961 1598.59 824.429 cv
1598.55 825.307 1598.51 826.185 1598.46 827.063 cv
cp
1597.88 805.3 mo
1598 806.243 1598.1 807.188 1598.2 808.132 cv
1597.62 807.584 1597.03 807.043 1596.45 806.498 cv
1596.92 806.088 1597.4 805.688 1597.88 805.3 cv
cp
1586.71 852.621 mo
1586.46 852.993 1586.2 853.357 1585.93 853.724 cv
1586.5 850.605 1586.99 847.473 1587.44 844.328 cv
1587.88 846.754 1588.32 849.18 1588.76 851.605 cv
1588.08 851.958 1587.4 852.301 1586.71 852.621 cv
cp
1578.39 808.793 mo
1576.09 806.082 1571.67 805.46 1569.39 808.364 cv
1569.35 808.328 1569.3 808.291 1569.25 808.255 cv
1569.99 805.392 1570.72 802.526 1571.43 799.654 cv
1571.94 800.08 1572.44 800.505 1572.94 800.93 cv
1574.84 802.529 1576.71 804.154 1578.57 805.791 cv
1578.51 806.792 1578.45 807.793 1578.39 808.793 cv
cp
1559.93 842.682 mo
1559.84 842.763 1559.74 842.845 1559.64 842.927 cv
1559.75 842.575 1559.85 842.224 1559.96 841.872 cv
1560.66 839.514 1561.34 837.149 1562.02 834.787 cv
1561.33 837.419 1560.63 840.051 1559.93 842.682 cv
cp
1556.73 796.781 mo
1558.19 796.61 1559.65 796.339 1561.1 796.037 cv
1560.54 797.228 1559.99 798.421 1559.44 799.618 cv
1558.52 798.696 1557.62 797.75 1556.73 796.781 cv
cp
1556.91 854.108 mo
1556.73 854.787 1556.54 855.464 1556.36 856.143 cv
1556.16 856.079 1555.96 856.02 1555.76 855.951 cv
1558.06 848.259 li
1558.18 848.304 1558.3 848.352 1558.42 848.393 cv
1557.92 850.298 1557.41 852.203 1556.91 854.108 cv
cp
1552.82 869.143 mo
1552.46 869.269 1552.09 869.386 1551.72 869.501 cv
1552.44 867.091 1553.16 864.681 1553.88 862.271 cv
1554.15 861.352 1554.43 860.434 1554.7 859.515 cv
1554.99 859.369 1555.28 859.213 1555.57 859.06 cv
1554.66 862.422 1553.75 865.784 1552.82 869.143 cv
cp
1431.23 1093.4 mo
1431.96 1091.25 1432.65 1089.09 1433.3 1086.92 cv
1433.68 1089.57 1433.91 1092.24 1434.02 1094.9 cv
1433.24 1094.6 1432.25 1094.05 1431.23 1093.4 cv
cp
1431.23 1119.09 mo
1429.21 1115.99 1427.12 1112.95 1424.94 1109.97 cv
1425.87 1107.76 1426.78 1105.55 1427.65 1103.32 cv
1429.55 1104.6 1431.6 1105.63 1433.76 1106.05 cv
1433.37 1110.37 1432.61 1114.85 1431.23 1119.09 cv
cp
1420.55 1086.41 mo
1420.06 1086.11 1419.58 1085.8 1419.09 1085.49 cv
1419.47 1084.41 1419.87 1083.35 1420.3 1082.29 cv
1420.72 1082.78 1421.16 1083.25 1421.6 1083.69 cv
1421.25 1084.6 1420.9 1085.51 1420.55 1086.41 cv
cp
1417.71 1139.12 mo
1417.46 1139.4 1417.15 1139.63 1416.81 1139.82 cv
1417.12 1137.65 1417.46 1135.47 1417.84 1133.29 cv
1418.73 1133.96 1419.62 1134.62 1420.52 1135.26 cv
1419.67 1136.62 1418.74 1137.92 1417.71 1139.12 cv
cp
1416.01 1098.66 mo
1415.91 1098.54 1415.82 1098.43 1415.72 1098.32 cv
1415.92 1097.17 1416.14 1096.03 1416.39 1094.89 cv
1416.63 1095.07 1416.86 1095.25 1417.09 1095.42 cv
1417.04 1095.64 1416.98 1095.86 1416.92 1096.08 cv
1416.61 1096.94 1416.31 1097.8 1416.01 1098.66 cv
cp
1409.95 1079.43 mo
1408.39 1078.34 1406.86 1077.22 1405.36 1076.06 cv
1405.33 1076.04 1405.3 1076.02 1405.27 1076 cv
1405.87 1073.47 1406.61 1070.98 1407.51 1068.55 cv
1407.54 1068.84 1407.58 1069.13 1407.62 1069.42 cv
1407.91 1071.19 1409.86 1073.11 1411.62 1073.42 cv
1411.84 1073.45 1412.07 1073.49 1412.29 1073.53 cv
1411.45 1075.48 1410.68 1077.45 1409.95 1079.43 cv
cp
1403.55 1107.37 mo
1403.39 1106.17 1403.26 1104.97 1403.17 1103.76 cv
1403.37 1104.18 1403.58 1104.59 1403.79 1105.01 cv
1403.7 1105.79 1403.62 1106.58 1403.55 1107.37 cv
cp
1423.22 1048.54 mo
1424.04 1051.36 1424.86 1054.18 1425.69 1056.99 cv
1424.27 1054.7 1422.72 1052.49 1421.04 1050.36 cv
1421.73 1049.71 1422.46 1049.1 1423.22 1048.54 cv
cp
1260.3 871.826 mo
1260.97 872.273 1261.64 872.728 1262.31 873.175 cv
1262.55 873.336 1262.8 873.472 1263.04 873.595 cv
1263.17 874.501 1263.27 875.406 1263.34 876.31 cv
1262.35 874.794 1261.33 873.302 1260.3 871.826 cv
cp
1261.36 890.395 mo
1260.84 889.788 1260.3 889.198 1259.77 888.599 cv
1259.81 888.609 1259.86 888.623 1259.91 888.634 cv
1260.64 888.794 1261.36 888.788 1262.05 888.671 cv
1261.85 889.255 1261.62 889.83 1261.36 890.395 cv
cp
1238.67 868.112 mo
1237.42 867.066 1236.15 866.041 1234.87 865.024 cv
1235.36 863.14 1235.83 861.25 1236.27 859.357 cv
1237.05 860.221 1237.84 861.08 1238.61 861.959 cv
1238.87 862.851 1239.11 863.745 1239.32 864.647 cv
1239.65 866.031 1239.34 867.223 1238.67 868.112 cv
cp
1222.57 792.321 mo
1222.82 790.572 1223.1 788.827 1223.4 787.087 cv
1225.69 789.53 1227.96 792.001 1230.16 794.528 cv
1230.67 795.98 1231.16 797.433 1231.62 798.882 cv
1228.57 796.751 1225.56 794.55 1222.57 792.321 cv
cp
1224.56 818.992 mo
1223.83 818.395 1223.11 817.802 1222.38 817.209 cv
1222.03 816.491 1221.69 815.774 1221.36 815.06 cv
1221.36 815.059 1221.36 815.059 1221.36 815.058 cv
1221.53 815.637 1221.7 816.216 1221.88 816.793 cv
1221.48 816.471 1221.08 816.156 1220.68 815.835 cv
1220.71 814.451 1220.74 813.069 1220.8 811.689 cv
1223.64 815.05 1226.43 818.46 1229.13 821.937 cv
1227.6 820.965 1226.07 819.985 1224.56 818.992 cv
cp
1215.62 761.733 mo
1216.07 759.73 1216.59 757.738 1217.18 755.758 cv
1217.27 755.854 1217.36 755.951 1217.46 756.048 cv
1216.82 757.934 1216.2 759.828 1215.62 761.733 cv
cp
1213.88 847.332 mo
1212.63 845.452 1211.44 843.531 1210.28 841.591 cv
1211.5 842.598 1213.1 842.733 1214.47 842.19 cv
1214.23 843.897 1214.04 845.612 1213.88 847.332 cv
cp
1212.08 730.958 mo
1212.52 732.128 1213.03 733.3 1213.58 734.458 cv
1212.68 734.87 1211.89 735.475 1211.34 736.286 cv
1210.95 736.233 1210.57 736.231 1210.2 736.262 cv
1210.79 734.486 1211.42 732.719 1212.08 730.958 cv
cp
1206.12 834.237 mo
1206.68 834.637 1207.25 835.035 1207.81 835.435 cv
1207.99 836.557 1208.27 837.685 1208.63 838.814 cv
1207.77 837.301 1206.93 835.774 1206.12 834.237 cv
cp
1197.57 815.764 mo
1197.25 814.961 1196.93 814.152 1196.61 813.336 cv
1200.52 816.49 1204.49 819.559 1208.53 822.534 cv
1205.07 820.254 1201.53 818.058 1197.94 815.955 cv
1197.82 815.884 1197.69 815.825 1197.57 815.764 cv
cp
1199.31 795.272 mo
1199.78 797.083 1200.29 798.885 1200.85 800.662 cv
1199.25 799.507 1197.65 798.362 1196.04 797.224 cv
1197.29 796.999 1198.45 796.373 1199.31 795.272 cv
cp
1189.44 769.215 mo
1189.1 769.322 1188.77 769.447 1188.45 769.609 cv
1188.66 767.288 1189.01 764.985 1189.51 762.709 cv
1189.93 762.354 1190.31 761.949 1190.65 761.511 cv
1190.2 764.069 1189.79 766.638 1189.44 769.215 cv
cp
1227.82 767.299 mo
1228.16 767.696 1228.52 768.089 1228.86 768.489 cv
1228.54 770.38 1228.35 772.321 1228.26 774.276 cv
1227.63 773.803 1227 773.325 1226.37 772.85 cv
1226.83 770.993 1227.31 769.143 1227.82 767.299 cv
cp
1250.36 441.083 mo
1249.43 436.756 1248.49 432.431 1247.55 428.107 cv
1247.91 426.858 1248.2 425.591 1248.37 424.322 cv
1250.85 429.563 1253.12 434.9 1255.18 440.317 cv
1253.57 440.511 1251.96 440.77 1250.36 441.083 cv
cp
1233.25 457.452 mo
1233.34 457.101 1233.43 456.749 1233.51 456.396 cv
1233.9 456.239 1234.29 456.083 1234.68 455.931 cv
1234.79 455.91 1234.91 455.894 1235.03 455.874 cv
1235.18 456.147 1235.33 456.42 1235.48 456.693 cv
1234.73 456.941 1233.99 457.196 1233.25 457.452 cv
cp
1232.92 425.538 mo
1233.21 425.309 1233.5 425.071 1233.79 424.833 cv
1234.13 426.483 1234.47 428.134 1234.8 429.784 cv
1234.73 429.995 1234.64 430.203 1234.56 430.413 cv
1234.13 429.674 1233.7 428.936 1233.26 428.197 cv
1233.13 427.332 1232.99 426.467 1232.84 425.605 cv
1232.87 425.583 1232.89 425.56 1232.92 425.538 cv
cp
1219.45 371.262 mo
1220.13 370.292 1221.22 369.681 1222.37 369.519 cv
1222.4 369.653 1222.43 369.787 1222.46 369.921 cv
1221.47 370.426 1220.47 370.875 1219.45 371.262 cv
cp
1212.83 450.312 mo
1212.58 449.417 1212.34 448.521 1212.09 447.627 cv
1211.68 446.118 1211.26 444.609 1210.85 443.1 cv
1211.43 442.638 1212.01 442.176 1212.59 441.714 cv
1212.76 443.727 1212.91 445.742 1213.01 447.759 cv
1213.05 448.566 1213.07 449.374 1213.1 450.181 cv
1213.01 450.224 1212.92 450.269 1212.83 450.312 cv
cp
1206.83 428.545 mo
1206.26 426.471 1205.69 424.396 1205.12 422.322 cv
1205.83 424.169 1206.57 426.05 1207.36 427.951 cv
1207.19 428.149 1207.01 428.347 1206.83 428.545 cv
cp
1199 375.43 mo
1199.28 373.886 1199.56 372.343 1199.84 370.799 cv
1200.78 371.922 1201.65 373.12 1202.46 374.351 cv
1201.23 374.305 1199.99 374.643 1199 375.43 cv
cp
1196.12 263.371 mo
1193.24 262.64 1190.71 260.881 1188.05 259.581 cv
1188.04 259.577 1188.03 259.573 1188.03 259.569 cv
1187.62 259.732 1187.14 259.745 1186.64 259.509 cv
1186.2 259.319 1185.76 259.13 1185.31 258.941 cv
1182.67 257.922 1179.97 257.549 1177.25 257.616 cv
1176.88 258.279 1176.22 258.767 1175.29 258.749 cv
1172.52 258.694 1169.84 258.914 1167.22 259.451 cv
1164.32 260.342 1161.47 261.438 1158.74 262.47 cv
1158.08 262.719 1157.5 262.609 1157.03 262.305 cv
1155.29 265.194 1153.51 267.982 1151.44 270.703 cv
1150.41 272.051 1148.53 270.938 1149.18 269.386 cv
1151.42 264.1 1154.26 259.236 1157.16 254.278 cv
1158.06 252.725 1159.18 249.921 1160.68 247.893 cv
1160.67 247.887 1160.66 247.881 1160.64 247.875 cv
1159.21 247.3 1159.72 245.123 1161.29 245.509 cv
1161.81 245.635 1162.31 245.766 1162.82 245.896 cv
1163.07 245.76 1163.33 245.644 1163.6 245.573 cv
1166.39 244.84 1170.47 247.53 1173.21 248.995 cv
1175.53 249.811 1177.83 250.715 1180.13 251.736 cv
1183.19 253.101 1186.17 254.637 1189.15 256.161 cv
1192 257.615 1195.14 258.819 1197.48 261.028 cv
1198.52 262.015 1197.43 263.707 1196.12 263.371 cv
cp
1177.21 429.015 mo
1176.55 427.528 1175.91 426.027 1175.31 424.518 cv
1175.75 424.284 1176.14 423.946 1176.43 423.499 cv
1177.33 422.119 1178.12 421.679 1178.79 420.39 cv
1178.26 423.265 1177.73 426.139 1177.21 429.015 cv
cp
1348.67 309.775 mo
1348.74 310.462 1348.81 311.146 1348.87 311.826 cv
1348.88 312.026 1348.89 312.227 1348.91 312.427 cv
1348.66 311.554 1348.4 310.682 1348.15 309.808 cv
1348.33 309.799 1348.5 309.787 1348.67 309.775 cv
cp
1353.31 280.189 mo
1353.84 280.579 1354.24 281.033 1354.53 281.521 cv
1353.8 282.355 1353.11 283.213 1352.43 284.095 cv
1351.97 282.464 1351.51 280.831 1351.06 279.186 cv
1351.05 279.131 1351.03 279.08 1351.01 279.026 cv
1351.82 279.295 1352.59 279.664 1353.31 280.189 cv
cp
1365.52 306.083 mo
1365.23 307.771 1364.86 309.442 1364.43 311.095 cv
1364.08 311.135 1363.72 311.161 1363.36 311.169 cv
1362.63 309.91 1361.93 308.642 1361.25 307.361 cv
1362.67 306.955 1364.1 306.525 1365.52 306.083 cv
cp
1381.49 291.52 mo
1382.24 291.141 1382.84 290.675 1383.29 290.156 cv
1383.17 290.959 1383.05 291.763 1382.91 292.562 cv
1382.14 292.638 1381.36 292.724 1380.58 292.832 cv
1380.44 292.617 1380.31 292.399 1380.18 292.183 cv
1380.62 291.963 1381.05 291.739 1381.49 291.52 cv
cp
1861.03 1093.9 mo
1859.32 1067.93 1855.99 1042 1850 1016.66 cv
1845.57 997.964 1839.62 979.633 1831.92 962.062 cv
1830.51 958.444 1829 954.85 1827.38 951.282 cv
1811.16 915.514 1787.75 882.994 1764.33 851.646 cv
1719.01 790.978 1667.37 735.059 1610.46 685.099 cv
1609.63 684.427 1608.79 683.752 1607.96 683.086 cv
1598.65 675.678 1589.15 668.565 1580.31 660.621 cv
1570.41 678.488 1560.51 696.355 1550.61 714.223 cv
1540.82 731.888 1531.3 749.749 1520.58 766.874 cv
1499.29 800.869 1470.66 829.189 1443.44 858.361 cv
1439.42 862.67 1435.48 867.076 1431.36 871.293 cv
1429.71 872.992 1427.83 874.996 1425.4 875.531 cv
1421.27 876.44 1419.57 872.895 1420.8 869.305 cv
1422.55 864.211 1426.18 859.282 1429.02 854.736 cv
1431.94 850.07 1435.02 845.516 1438.23 841.047 cv
1438.44 840.752 1438.55 840.461 1438.6 840.181 cv
1439.64 838.141 1436.31 836.359 1434.82 838.396 cv
1421.28 856.944 1403.82 872.498 1383.77 883.72 cv
1381.65 884.907 1379.19 886.707 1376.83 887.323 cv
1370.76 888.903 1372 882.729 1374.39 879.832 cv
1378.53 874.822 1383.98 870.593 1388.63 866.061 cv
1397.71 857.214 1406.6 848.173 1415.29 838.945 cv
1416.22 837.845 1417.13 836.73 1418 835.58 cv
1419.06 834.167 1426.67 822.891 1421.33 824.1 cv
1418.31 824.783 1415.55 828.179 1413.24 830.073 cv
1409.67 833 1405.76 835.563 1401.92 838.132 cv
1401.02 838.736 1400.1 839.315 1399.17 839.88 cv
1397.58 841.028 1395.99 842.175 1394.39 843.312 cv
1387.96 847.872 1381.65 852.591 1374.75 856.384 cv
1366.27 861.871 1356.97 867.194 1347.44 870.343 cv
1346.47 870.664 1344.59 871.4 1343.59 871.073 cv
1338.87 869.541 1342.46 865.546 1344.02 863.838 cv
1346.46 861.158 1349.37 858.8 1352.02 856.327 cv
1357.19 851.512 1362.35 846.696 1367.51 841.882 cv
1378.53 831.606 1389.55 821.331 1400.57 811.056 cv
1401 810.221 1401.28 809.404 1401.35 808.634 cv
1401.29 808.503 1401.23 808.375 1401.14 808.256 cv
1401.23 808.141 1401.3 808.021 1401.35 807.901 cv
1401.32 807.625 1401.25 807.355 1401.15 807.096 cv
1400.56 805.578 1399.4 805.26 1397.99 805.594 cv
1397.95 805.625 1397.91 805.647 1397.87 805.682 cv
1381.81 819.526 1364.65 832.032 1346.5 842.998 cv
1342.19 845.598 1337.84 848.111 1333.43 850.537 cv
1330 852.431 1320.77 858.973 1317.47 853.644 cv
1314.78 849.313 1321.62 843.691 1324.32 841.131 cv
1327.77 837.87 1331.42 834.836 1335.19 831.956 cv
1348.38 821.876 1362.86 813.482 1375.27 802.387 cv
1381.32 796.972 1387.17 790.759 1391.26 783.688 cv
1391.75 782.838 1392.22 781.935 1392.6 781.003 cv
1392.91 779.867 1393.04 778.754 1392.87 777.76 cv
1392.3 774.624 1388.86 773.139 1386.1 774.009 cv
1382.82 775.043 1379.93 777.249 1376.96 778.937 cv
1370.23 782.768 1363.17 785.865 1356.08 788.947 cv
1349.72 791.713 1343.2 794.107 1336.84 796.883 cv
1332.49 798.782 1325.67 801.999 1321.42 798.173 cv
1316.4 793.658 1322.73 788.847 1326.16 786.122 cv
1328.92 783.924 1331.77 781.856 1334.67 779.842 cv
1346.3 770.284 1359.18 762.245 1371.56 753.636 cv
1387.78 742.359 1403.19 729.923 1417.64 716.464 cv
1446.42 689.668 1471.44 658.801 1491.73 625.125 cv
1503.31 605.909 1513.28 585.773 1521.66 564.961 cv
1521.98 564.147 1521.77 563.49 1521.3 563.053 cv
1521.28 563.002 1521.28 562.955 1521.26 562.903 cv
1516.32 549.229 1508.51 537.029 1499.77 525.493 cv
1490.36 513.077 1480.37 501.083 1470.61 488.944 cv
1465.35 482.398 1459.94 475.946 1454.83 469.275 cv
1452.33 465.998 1450.21 462.593 1449.35 458.5 cv
1448.56 454.676 1448.57 450.69 1448.04 446.823 cv
1445.84 430.579 1439.77 414.911 1434.8 399.368 cv
1430.23 385.089 1425.66 370.811 1421.1 356.533 cv
1415.36 358.947 1409.63 361.229 1404.11 363.554 cv
1391.67 368.795 1380.06 374.807 1368.98 382.558 cv
1358.4 389.967 1348.62 398.434 1338.31 406.21 cv
1330.44 412.152 1318.86 422.47 1308.62 415.584 cv
1300.25 409.958 1298.26 396.5 1295.64 387.616 cv
1292.96 378.524 1290.5 369.36 1288.48 360.099 cv
1288.36 359.977 1288.25 359.84 1288.19 359.676 cv
1287.2 356.993 1286.82 354.037 1286.68 351.065 cv
1286.43 349.73 1286.19 348.395 1285.97 347.056 cv
1283.74 333.381 1283.22 319.761 1283.28 305.928 cv
1283.35 291.658 1282.39 277.799 1279.18 263.855 cv
1276.09 250.375 1271.36 237.412 1267.52 224.146 cv
1266.94 222.126 1269.87 221.427 1270.6 223.297 cv
1275.88 236.832 1280.28 250.92 1283.4 265.114 cv
1286.55 279.45 1287.28 293.744 1287.32 308.38 cv
1287.33 311.251 1287.38 314.112 1287.46 316.966 cv
1287.3 321.085 1287.34 325.212 1287.56 329.317 cv
1287.92 336.044 1288.79 342.745 1290.23 349.327 cv
1290.91 352.439 1291.64 356.322 1292.95 359.802 cv
1294.92 368.496 1297.28 377.106 1299.8 385.653 cv
1301.56 391.612 1303.12 397.765 1305.41 403.546 cv
1307.23 408.129 1310.28 413.347 1315.85 413.41 cv
1322.36 413.483 1328.64 407.543 1333.49 403.823 cv
1338.45 400.019 1343.32 396.083 1348.2 392.183 cv
1357.68 384.626 1367.21 377.076 1377.81 371.144 cv
1388.29 365.277 1399.25 360.566 1410.19 355.649 cv
1413.3 354.252 1416.39 352.85 1419.46 351.427 cv
1419.43 351.311 1419.39 351.194 1419.35 351.078 cv
1422.19 349.1 1424.93 347.021 1427.5 344.777 cv
1436.02 337.334 1438.11 327.893 1436.4 316.968 cv
1434.42 304.354 1431.48 291.747 1428.5 279.337 cv
1425.42 266.514 1421.77 253.8 1416.89 241.535 cv
1413.05 231.865 1408.69 221.432 1400.53 214.558 cv
1392.09 207.453 1381.43 207.09 1370.92 207.201 cv
1365.31 207.26 1359.61 207.339 1354.15 206.042 cv
1356.97 214.196 1357.93 222.897 1356.09 231.258 cv
1355.89 232.187 1354.58 231.896 1354.52 231.046 cv
1353.89 221.734 1352.44 212.804 1349.36 204.5 cv
1343.46 202.085 1338.19 198.293 1332.09 196.281 cv
1318.81 191.896 1304.47 195.149 1291.3 198.296 cv
1265.54 193.417 1239.65 189.064 1213.46 187.612 cv
1198.05 186.757 1182.01 186.372 1166.72 188.856 cv
1152.86 191.109 1142.88 199.24 1133.41 209.102 cv
1121.41 221.603 1110.24 234.876 1099.84 248.731 cv
1099.73 248.87 1099.65 249.008 1099.59 249.146 cv
1068 257.159 1036.7 266.258 1005.76 276.5 cv
1003.9 277.117 1001.95 277.705 999.975 278.312 cv
1000.94 278.781 1001.9 279.251 1002.86 279.718 cv
1006.65 281.571 1010.27 284.012 1012.8 287.452 cv
1019.08 296.005 1012.89 304.941 1009.02 313.124 cv
1007.37 316.616 1005.92 320.932 1003.15 323.829 cv
1006.53 330.194 1008.5 337.786 1010.97 344.468 cv
1013.84 352.222 1016.69 359.979 1019.6 367.718 cv
1028.13 374.909 1036.59 382.166 1044.94 389.562 cv
1049.19 393.332 1053.44 397.117 1057.71 400.871 cv
1061.79 404.459 1066.12 407.93 1071.66 408.723 cv
1077 409.487 1082.58 408.07 1087.9 407.574 cv
1092.82 407.116 1097.77 407.07 1102.69 407.437 cv
1107.57 407.8 1112.37 408.673 1117.1 409.89 cv
1118.46 410.238 1119.95 410.563 1121.45 410.967 cv
1117.7 410.741 1113.95 410.557 1110.19 410.503 cv
1101.06 410.372 1091.74 410.912 1082.63 412.358 cv
1077.21 412.801 1071.82 412.879 1066.78 410.996 cv
1062.61 409.441 1059.14 406.601 1055.76 403.785 cv
1051.42 400.164 1047.14 396.476 1042.83 392.821 cv
1034.37 385.64 1026.01 378.34 1017.72 370.962 cv
1013.66 374.443 1009.96 378.354 1006.58 382.501 cv
1005.37 383.995 1004.2 385.533 1003.08 387.1 cv
1013.92 410.351 1037.41 423.122 1060.27 432.265 cv
1086.15 442.616 1112.39 452.119 1138.5 461.885 cv
1143.63 470.534 1146.5 480.343 1146.68 490.479 cv
1146.78 496.242 1146.04 501.982 1144.4 507.51 cv
1142.92 512.475 1140.52 517.579 1141.63 522.874 cv
1142.67 527.776 1146.65 530.863 1150.88 533.07 cv
1156.01 535.753 1161.4 538.017 1166.77 540.199 cv
1178.56 544.997 1190.73 548.87 1203.11 551.838 cv
1252.44 563.665 1304.35 560.905 1352.92 546.855 cv
1366.63 542.891 1380.04 538.017 1393.16 532.415 cv
1406.66 526.652 1419.96 520.378 1434.24 516.782 cv
1437.87 520.016 1424.49 530.998 1422.29 532.903 cv
1417.13 537.37 1411.64 541.438 1405.87 545.081 cv
1400.57 548.432 1395.04 551.278 1389.39 553.995 cv
1385.92 555.662 1382.06 558.793 1383.59 563.16 cv
1385.27 567.924 1391.31 566.577 1395.14 566.167 cv
1402.13 565.422 1409.06 564.264 1415.97 563.034 cv
1423.21 561.744 1430.45 560.359 1437.73 559.317 cv
1444.95 558.285 1452.77 557.089 1460.08 557.706 cv
1460.63 557.752 1461.52 557.741 1462.03 558.018 cv
1462.54 558.299 1464.14 560.26 1464.02 561.003 cv
1463.79 562.417 1461.04 563.538 1459.85 564.155 cv
1456.57 565.861 1453.15 567.286 1449.69 568.564 cv
1443.3 570.922 1436.73 572.736 1430.15 574.465 cv
1423.55 576.201 1416.91 577.843 1410.38 579.853 cv
1405.87 581.24 1398.67 582.502 1395.38 586.232 cv
1392.83 589.124 1393.56 593.574 1397.39 594.822 cv
1399.69 595.574 1402.49 594.92 1404.81 594.625 cv
1408.29 594.183 1411.76 593.616 1415.21 592.966 cv
1429.28 590.316 1443.21 586.274 1457.6 585.76 cv
1461.5 585.621 1465.58 585.587 1469.44 586.245 cv
1470.82 586.48 1473.81 587.027 1474.39 588.551 cv
1474.62 589.16 1474.68 589.732 1474.61 590.271 cv
1470.83 594.197 1465.79 596.698 1460.84 599.008 cv
1453.64 602.365 1446.24 605.274 1438.69 607.752 cv
1431.46 610.129 1424.1 612.104 1416.65 613.664 cv
1411.32 614.779 1404.13 614.659 1400.44 619.245 cv
1400.41 619.273 1400.4 619.304 1400.38 619.333 cv
1398.9 620.472 1399.56 623.115 1401.59 623.078 cv
1410.72 622.912 1419.78 622.031 1428.77 620.469 cv
1438.32 618.81 1447.9 616.567 1457.65 616.983 cv
1459.71 617.07 1462.07 617.091 1464 617.867 cv
1468.03 619.485 1466.77 622.98 1464.19 625.077 cv
1460.95 627.723 1456.89 629.647 1453.12 631.434 cv
1451.43 632.232 1449.72 632.957 1447.99 633.641 cv
1441.41 635.66 1434.85 637.292 1428.03 638.407 cv
1419.88 639.738 1411.75 641.161 1403.6 642.453 cv
1400.29 642.979 1396.98 643.4 1393.64 643.645 cv
1393.14 643.757 1392.63 643.859 1392.14 643.977 cv
1390.78 644.303 1387.29 645.251 1387.61 647.226 cv
1387.71 647.86 1388.33 648.407 1389.11 648.86 cv
1399.83 649.244 1410.56 649.628 1421.28 650.013 cv
1424.43 650.125 1437.09 648.964 1434.27 654.917 cv
1432.16 659.376 1422.36 658.735 1418.23 659.145 cv
1397.07 661.247 1375.83 662.552 1354.58 663.248 cv
1311.46 664.661 1268.31 663.57 1225.23 661.583 cv
1200.67 660.449 1176.12 659.021 1151.57 657.59 cv
1150.76 657.543 1150.2 657.897 1149.88 658.414 cv
1149.19 658.673 1148.66 659.289 1148.71 660.271 cv
1153.54 750.078 1159.18 844.597 1207.31 923.392 cv
1209.31 926.666 1211.39 929.891 1213.53 933.074 cv
1219.44 938.993 1225.24 945.029 1231.07 951.021 cv
1251.63 972.121 1272.19 993.229 1292.19 1014.86 cv
1302.1 1025.58 1311.96 1036.34 1321.79 1047.14 cv
1326.88 1052.74 1331.99 1058.33 1337.08 1063.92 cv
1337.31 1064.17 1337.52 1064.42 1337.75 1064.67 cv
1346.84 1073.74 1355.69 1083.06 1364.08 1092.79 cv
1364.51 1084.61 1364.46 1076.4 1364.06 1068.21 cv
1362.41 1033.8 1355.79 1000.15 1350.69 966.158 cv
1347.98 948.115 1345.05 929.932 1338.75 913.038 cv
1335.93 903.171 1332.37 893.517 1327.98 884.246 cv
1338.39 895.991 1344.66 910.853 1348.77 925.851 cv
1352.84 940.67 1354.94 955.907 1357.22 971.078 cv
1359.9 988.979 1361.92 1006.95 1364.55 1024.85 cv
1367.06 1041.91 1369.39 1058.85 1369.65 1076.12 cv
1369.76 1083.58 1369.55 1091.05 1368.91 1098.49 cv
1368.95 1098.54 1368.99 1098.59 1369.03 1098.64 cv
1369.97 1107.25 1370.91 1115.86 1371.85 1124.47 cv
1371.97 1144.26 1372.09 1164.06 1372.21 1183.85 cv
1372.3 1199.5 1373.56 1216.38 1366.47 1230.86 cv
1360.34 1243.38 1349.49 1253.75 1347.67 1268.14 cv
1347.63 1268.51 1347.59 1268.89 1347.56 1269.26 cv
1347.55 1269.39 1347.55 1269.51 1347.54 1269.64 cv
1347.52 1269.89 1347.51 1270.14 1347.5 1270.4 cv
1347.5 1270.55 1347.5 1270.7 1347.5 1270.84 cv
1347.49 1271.08 1347.49 1271.31 1347.5 1271.54 cv
1347.5 1271.7 1347.51 1271.85 1347.51 1272.01 cv
1347.52 1272.24 1347.53 1272.47 1347.55 1272.7 cv
1347.56 1272.85 1347.57 1273 1347.58 1273.16 cv
1347.6 1273.39 1347.63 1273.63 1347.65 1273.86 cv
1347.67 1274.01 1347.69 1274.16 1347.7 1274.3 cv
1347.74 1274.56 1347.78 1274.81 1347.82 1275.06 cv
1347.84 1275.19 1347.85 1275.31 1347.88 1275.43 cv
1347.94 1275.81 1348.01 1276.18 1348.1 1276.54 cv
1348.1 1276.55 1348.1 1276.55 1348.1 1276.56 cv
1348.18 1276.93 1348.27 1277.3 1348.37 1277.67 cv
1348.41 1277.79 1348.44 1277.91 1348.48 1278.02 cv
1348.55 1278.27 1348.62 1278.52 1348.7 1278.77 cv
1348.74 1278.91 1348.79 1279.04 1348.84 1279.18 cv
1348.91 1279.41 1348.99 1279.63 1349.07 1279.85 cv
1349.12 1279.99 1349.18 1280.14 1349.23 1280.28 cv
1349.32 1280.49 1349.4 1280.71 1349.49 1280.92 cv
1349.55 1281.06 1349.61 1281.2 1349.67 1281.34 cv
1349.77 1281.55 1349.87 1281.76 1349.97 1281.97 cv
1350.03 1282.1 1350.09 1282.24 1350.16 1282.37 cv
1350.27 1282.59 1350.39 1282.81 1350.51 1283.03 cv
1350.56 1283.14 1350.62 1283.26 1350.68 1283.36 cv
1350.86 1283.68 1351.05 1284 1351.24 1284.31 cv
1351.24 1284.32 1351.25 1284.32 1351.25 1284.33 cv
1351.45 1284.64 1351.65 1284.95 1351.87 1285.25 cv
1351.94 1285.36 1352.01 1285.45 1352.08 1285.55 cv
1352.23 1285.75 1352.37 1285.95 1352.52 1286.15 cv
1352.61 1286.26 1352.7 1286.37 1352.79 1286.48 cv
1352.94 1286.66 1353.08 1286.83 1353.23 1287 cv
1353.32 1287.12 1353.42 1287.23 1353.52 1287.34 cv
1353.67 1287.5 1353.82 1287.66 1353.97 1287.82 cv
1354.08 1287.92 1354.18 1288.03 1354.29 1288.14 cv
1354.44 1288.29 1354.6 1288.44 1354.77 1288.59 cv
1354.87 1288.69 1354.98 1288.79 1355.08 1288.88 cv
1355.26 1289.04 1355.45 1289.19 1355.63 1289.34 cv
1355.73 1289.42 1355.82 1289.5 1355.92 1289.58 cv
1356.19 1289.79 1356.47 1289.99 1356.75 1290.19 cv
1356.76 1290.2 1356.78 1290.21 1356.79 1290.22 cv
1357.08 1290.42 1357.39 1290.61 1357.7 1290.8 cv
1357.8 1290.86 1357.9 1290.91 1358.01 1290.97 cv
1358.22 1291.09 1358.43 1291.21 1358.64 1291.32 cv
1358.77 1291.38 1358.9 1291.44 1359.02 1291.5 cv
1359.22 1291.6 1359.42 1291.69 1359.63 1291.78 cv
1359.76 1291.84 1359.9 1291.89 1360.04 1291.95 cv
1360.24 1292.03 1360.44 1292.1 1360.65 1292.17 cv
1360.79 1292.22 1360.93 1292.27 1361.08 1292.32 cv
1361.29 1292.38 1361.5 1292.45 1361.72 1292.5 cv
1361.86 1292.54 1362 1292.58 1362.14 1292.62 cv
1362.38 1292.67 1362.62 1292.72 1362.86 1292.77 cv
1362.99 1292.79 1363.11 1292.82 1363.24 1292.84 cv
1363.59 1292.9 1363.94 1292.95 1364.3 1292.98 cv
1364.32 1292.99 1364.34 1292.99 1364.36 1292.99 cv
1364.36 1292.99 li
1364.84 1293.93 1365.43 1294.8 1366.08 1295.63 cv
1371 1294.4 1375.91 1293.17 1380.83 1291.94 cv
1380.81 1291.72 1380.8 1291.5 1380.79 1291.27 cv
1378.91 1291.89 1377.04 1292.5 1375.16 1293.12 cv
1375.16 1293.12 li
1377.04 1292.5 1378.91 1291.89 1380.79 1291.27 cv
1380.29 1283.08 1381.83 1275 1384.76 1267.3 cv
1385.68 1264.91 1389.51 1265.88 1388.67 1268.38 cv
1386.22 1275.68 1385.42 1283.13 1385.72 1290.73 cv
1391.14 1289.38 1396.56 1288.03 1401.99 1286.7 cv
1407.09 1285.46 1412.2 1284.17 1417.31 1282.88 cv
1416.75 1280.79 1416.61 1278.44 1416.4 1276.49 cv
1416.02 1272.89 1416.32 1269.3 1416.78 1265.72 cv
1417.14 1262.92 1421.52 1262.77 1421.3 1265.72 cv
1421.04 1269.21 1421.1 1272.68 1421.12 1276.18 cv
1421.13 1278.02 1421.46 1279.93 1421.57 1281.8 cv
1438.01 1277.65 1454.51 1273.54 1471.16 1270.59 cv
1470.93 1263.94 1472.03 1257.28 1472.54 1250.65 cv
1473.03 1244.25 1473.25 1237.83 1473.37 1231.4 cv
1473.61 1218.52 1473.83 1205.65 1473.68 1192.76 cv
1473.12 1146.83 1470.88 1100.76 1478.66 1055.26 cv
1482.63 1032.06 1486.06 1008.9 1483.5 985.325 cv
1480.98 962.209 1474.24 939.385 1468.42 916.934 cv
1467.98 915.245 1470.46 914.591 1471.01 916.22 cv
1479.3 940.945 1486.46 965.617 1489.53 991.603 cv
1490.88 1003.02 1491.28 1014.29 1490.07 1025.74 cv
1488.83 1037.33 1486.65 1048.79 1484.73 1060.28 cv
1480.77 1083.9 1478.93 1107.54 1478.72 1131.49 cv
1478.57 1149.72 1478.96 1167.96 1479.15 1186.2 cv
1479.27 1186.19 1479.39 1186.21 1479.5 1186.21 cv
1479.51 1185.66 1479.52 1185.1 1479.53 1184.55 cv
1488.81 1191.87 1498.42 1198.72 1508.36 1205.09 cv
1514.63 1203.3 1521.17 1202.1 1527.27 1199.92 cv
1533.46 1197.71 1539.78 1194.34 1543.6 1188.8 cv
1547.94 1182.51 1547.98 1174.95 1546.62 1167.7 cv
1544.23 1154.93 1538.77 1142.68 1535.14 1130.22 cv
1531.26 1116.94 1527.99 1103.49 1525.35 1089.91 cv
1520.3 1063.91 1516.66 1035.94 1524.53 1010.12 cv
1531.42 987.517 1545.87 967.851 1563.12 951.992 cv
1572.56 943.308 1582.97 935.676 1593.78 928.779 cv
1604.25 922.094 1615.02 915.411 1626.98 911.847 cv
1626.2 912.367 1625.43 912.885 1624.67 913.378 cv
1619.46 916.78 1614.4 920.402 1609.32 924.003 cv
1602.71 928.695 1596.11 933.435 1589.68 938.379 cv
1578.58 945.883 1568.1 954.329 1558.89 964.077 cv
1541.5 982.474 1529.83 1005.58 1527.58 1030.94 cv
1525.14 1058.35 1530.92 1086.83 1537.38 1113.36 cv
1540.56 1126.38 1544.8 1139 1548.66 1151.82 cv
1551.98 1162.84 1554.74 1174.85 1550.26 1185.96 cv
1548.75 1189.73 1546.63 1192.79 1544.06 1195.32 cv
1536.97 1199.08 1529.69 1202.42 1522.17 1205.22 cv
1515.04 1207.88 1507.74 1210.07 1500.36 1211.89 cv
1496.44 1212.86 1492.48 1213.61 1488.54 1214.48 cv
1485.67 1215.11 1481.82 1215 1480.31 1217.86 cv
1480.25 1217.99 1480.21 1218.12 1480.18 1218.24 cv
1479.82 1218.33 1479.47 1218.42 1479.11 1218.51 cv
1478.98 1224.95 1478.73 1231.39 1478.29 1237.83 cv
1477.57 1248.29 1477.64 1259.79 1474.69 1269.97 cv
1485.03 1268.21 1495.42 1266.76 1505.92 1266.46 cv
1517.31 1266.14 1528.6 1267.37 1539.87 1268.88 cv
1551.49 1270.44 1563 1271.69 1574.53 1272.22 cv
1584.08 1273.48 1594.5 1271.24 1603.86 1269.76 cv
1614.44 1268.09 1624.96 1266.01 1635.39 1263.52 cv
1645.81 1261.03 1656.14 1258.14 1666.34 1254.85 cv
1672.48 1252.86 1679.04 1250.83 1685.04 1247.96 cv
1685.33 1247.89 1685.61 1247.83 1685.9 1247.77 cv
1699.83 1240.75 1712.88 1231.86 1724.24 1221.4 cv
1742.2 1204.86 1755.44 1184.14 1765.68 1162.11 cv
1766.06 1161.29 1767.25 1161.9 1767.07 1162.69 cv
1761.41 1187.36 1746.48 1209.03 1728.06 1226.08 cv
1715.26 1237.92 1700.68 1247.32 1684.72 1253.57 cv
1682.27 1254.83 1679.8 1256.04 1677.31 1257.2 cv
1677.23 1257.25 1677.16 1257.3 1677.07 1257.34 cv
1676.79 1257.46 1676.5 1257.58 1676.22 1257.71 cv
1674.92 1258.3 1673.61 1258.88 1672.3 1259.44 cv
1669.59 1260.6 1666.86 1261.67 1664.12 1262.68 cv
1645.09 1269.94 1625.31 1274.87 1604.95 1276.81 cv
1582.53 1278.95 1560.74 1276.73 1538.53 1273.72 cv
1526.11 1272.04 1513.68 1270.87 1501.14 1271.55 cv
1489.06 1272.2 1477.22 1274.25 1465.42 1276.78 cv
1454.6 1279.1 1443.82 1281.63 1433.05 1284.22 cv
1425.46 1285.48 1417.88 1286.86 1410.33 1288.38 cv
1395.58 1291.34 1380.93 1294.78 1366.4 1298.69 cv
1359.26 1300.61 1352.15 1302.64 1345.17 1305.06 cv
1344.68 1305.23 1344.19 1305.39 1343.69 1305.55 cv
1338.29 1306.85 1332.85 1308.06 1327.39 1308.89 cv
1322.93 1310.45 1316.52 1313.37 1317.38 1319.13 cv
1317.92 1322.7 1321.29 1325.38 1324.51 1324.8 cv
1324.59 1324.81 1324.68 1324.83 1324.77 1324.83 cv
1412.59 1327.03 1500.41 1329.42 1588.24 1331.41 cv
1631.07 1332.38 1674.14 1332.71 1716.74 1327.48 cv
1751.6 1323.2 1787.89 1314.13 1813.81 1288.92 cv
1823.49 1279.51 1831.26 1268.57 1837.44 1256.74 cv
1852.81 1232.72 1859.71 1202.42 1861.62 1174.31 cv
1863.43 1147.63 1862.78 1120.57 1861.03 1093.9 cv
cp
f
1015.79 367.862 mo
1013.01 360.662 1010.19 353.479 1007.38 346.293 cv
1004.86 339.86 1001.37 333.044 999.565 326.256 cv
996.651 327.343 993.411 326.797 990.414 325.567 cv
985.05 323.368 980.038 320.188 975.454 316.484 cv
975.565 317.456 975.681 318.424 975.799 319.383 cv
976.663 326.406 977.99 333.367 979.837 340.2 cv
984.061 355.824 990.843 370.67 999.803 384.136 cv
1000.81 382.882 1001.82 381.692 1002.72 380.595 cv
1006.63 375.863 1011.07 371.751 1015.79 367.862 cv
cp
f
1161.21 255.129 mo
1161.12 255.307 1161.05 255.462 1160.98 255.573 cv
1160.75 255.983 1160.51 256.389 1160.27 256.798 cv
1161.42 256.297 1162.58 255.846 1163.76 255.474 cv
1162.93 255.399 1162.08 255.29 1161.24 255.137 cv
1161.23 255.136 1161.22 255.131 1161.21 255.129 cv
cp
f
1001.63 319.512 mo
1003.85 316.056 1005.39 312.007 1007.13 308.299 cv
1009.2 303.915 1012.49 298.889 1011.94 293.869 cv
1011.47 289.58 1007.89 286.57 1004.35 284.556 cv
1001.31 282.832 997.646 281.702 994.311 280.144 cv
985.227 283.313 976.849 287.847 975.213 298.427 cv
974.587 302.474 974.619 306.658 974.916 310.814 cv
979.058 314.208 983.476 317.253 988.136 319.934 cv
992.728 322.576 998.1 325.019 1001.63 319.512 cv
cp
f
661.646 438.722 mo
663.277 439.052 664.892 439.471 666.483 439.982 cv
664.942 439.354 663.319 438.937 661.646 438.722 cv
cp
1 .454902 0 rgb
f
793.266 1229.52 mo
793.61 1223.33 793.583 1217.13 793.186 1210.96 cv
795.055 1216.97 794.96 1224 793.266 1229.52 cv
cp
788.963 1237.1 mo
789.021 1236.33 789.077 1235.56 789.125 1234.79 cv
789.79 1234.83 790.464 1234.71 791.069 1234.41 cv
790.462 1235.38 789.755 1236.29 788.963 1237.1 cv
cp
781.564 1220.02 mo
781.47 1219.72 781.37 1219.42 781.277 1219.12 cv
781.491 1218.86 781.685 1218.6 781.886 1218.34 cv
781.904 1218.82 781.931 1219.31 781.945 1219.79 cv
781.818 1219.87 781.691 1219.94 781.564 1220.02 cv
cp
769.076 1248.19 mo
769.189 1246.3 769.261 1244.41 769.302 1242.52 cv
769.961 1243.7 770.644 1244.86 771.355 1246 cv
770.615 1246.75 769.853 1247.48 769.076 1248.19 cv
cp
768.375 1200.43 mo
768.406 1200.09 768.436 1199.74 768.476 1199.41 cv
768.529 1198.96 768.586 1198.52 768.648 1198.07 cv
768.767 1198.75 768.885 1199.42 769.012 1200.1 cv
768.799 1200.21 768.587 1200.32 768.375 1200.43 cv
cp
761.695 1248.1 mo
761.629 1247.78 761.564 1247.45 761.501 1247.12 cv
761.591 1247.04 761.682 1246.96 761.772 1246.88 cv
761.75 1247.29 761.722 1247.7 761.695 1248.1 cv
cp
742.621 1264.68 mo
744.468 1262.89 746.327 1261.12 748.195 1259.35 cv
748.691 1259.03 749.176 1258.72 749.638 1258.42 cv
749.848 1258.29 750.056 1258.15 750.265 1258.01 cv
751.369 1256.69 752.528 1255.42 753.72 1254.18 cv
754.188 1253.75 754.659 1253.32 755.128 1252.89 cv
755.503 1254.5 755.92 1256.09 756.374 1257.68 cv
751.974 1260.37 747.335 1262.71 742.621 1264.68 cv
cp
725.977 1270.72 mo
725.598 1271.11 725.341 1271.53 725.17 1271.97 cv
723.49 1269.84 721.73 1267.77 719.894 1265.76 cv
719.979 1265.48 720.061 1265.19 720.154 1264.91 cv
720.574 1264.66 720.993 1264.42 721.412 1264.17 cv
722.699 1266.44 724.266 1268.56 726.11 1270.5 cv
726.112 1270.52 726.112 1270.55 726.113 1270.58 cv
726.068 1270.63 726.022 1270.67 725.977 1270.72 cv
cp
853.756 1202.15 mo
851.474 1172.97 830.329 1150.5 805.645 1137.02 cv
789.317 1128.11 771.474 1122.49 753.774 1117.02 cv
735.464 1111.36 717.15 1105.71 698.838 1100.05 cv
695.734 1113.34 692.936 1126.67 691.169 1140.24 cv
689.977 1149.4 689.158 1158.6 688.709 1167.82 cv
688.577 1170.55 688.49 1173.28 688.42 1176.01 cv
688.736 1174.47 689.041 1172.92 689.367 1171.38 cv
706.999 1179.06 725.751 1195.43 720.752 1216.55 cv
716.223 1235.69 698.21 1245.65 680.02 1248.33 cv
679.162 1248.73 678.325 1249.1 677.521 1249.44 cv
658.006 1257.76 634.036 1259.9 624.098 1281.5 cv
618.262 1294.18 619.359 1307.44 625.315 1318.6 cv
629.875 1332.42 643.718 1337.89 658.308 1339.42 cv
670.792 1341.89 684.17 1340.48 696.503 1338.35 cv
728.352 1332.84 758.977 1320.37 785.807 1302.36 cv
797.417 1295.77 808.556 1288.28 818.504 1279.36 cv
840.113 1259.98 856.087 1231.97 853.756 1202.15 cv
cp
.203922 .203922 .203922 rgb
f
605.761 910.88 mo
612.195 910.402 618.676 910.571 625.089 911.37 cv
625.909 911.523 626.733 911.661 627.561 911.789 cv
627.55 911.925 627.544 912.062 627.534 912.198 cv
620.296 911.326 613.025 910.882 605.761 910.88 cv
cp
631.354 1113.04 mo
631.466 1113.35 631.585 1113.66 631.696 1113.97 cv
631.017 1115.09 630.352 1116.21 629.696 1117.34 cv
630.248 1115.91 630.801 1114.48 631.354 1113.04 cv
cp
633.743 1178.63 mo
633.944 1178.4 634.155 1178.19 634.359 1177.97 cv
634.986 1180.2 635.787 1182.38 636.772 1184.5 cv
636.097 1185.65 635.442 1186.81 634.834 1188.01 cv
634.349 1186.53 633.839 1185.07 633.28 1183.62 cv
633.299 1182.56 633.292 1181.51 633.273 1180.46 cv
633.448 1179.86 633.602 1179.24 633.743 1178.63 cv
cp
637.496 1149.52 mo
637.936 1150.21 638.378 1150.89 638.824 1151.58 cv
638.103 1152.84 637.381 1154.1 636.66 1155.37 cv
636.324 1154.23 635.988 1153.09 635.652 1151.95 cv
636.257 1151.13 636.872 1150.32 637.496 1149.52 cv
cp
637.772 1134.71 mo
637.761 1135.04 637.746 1135.36 637.729 1135.68 cv
637.332 1135 636.952 1134.31 636.56 1133.63 cv
636.759 1133.15 636.967 1132.68 637.169 1132.2 cv
637.374 1133.04 637.58 1133.88 637.772 1134.71 cv
cp
639.407 1097.04 mo
639.561 1097.73 639.731 1098.41 639.877 1099.1 cv
639.763 1098.65 639.648 1098.2 639.524 1097.74 cv
638.661 1099.69 638.021 1101.83 637.529 1103.51 cv
637.392 1103.98 637.278 1104.46 637.15 1104.93 cv
635.899 1102.49 li
637.004 1100.64 638.178 1098.83 639.407 1097.04 cv
cp
638.567 900.184 mo
638.965 899.175 639.449 898.314 640 897.589 cv
639.472 898.512 638.967 899.448 638.492 900.401 cv
638.519 900.329 638.539 900.256 638.567 900.184 cv
cp
644.106 1157.32 mo
644.35 1157.37 644.597 1157.4 644.845 1157.41 cv
644.481 1158.37 644.091 1159.32 643.676 1160.26 cv
642.975 1160.73 642.281 1161.22 641.596 1161.71 cv
642.433 1160.25 643.269 1158.78 644.106 1157.32 cv
cp
648.082 926.707 mo
648.348 926.195 648.616 925.685 648.883 925.173 cv
649.308 924.766 649.738 924.364 650.161 923.955 cv
650.366 927.193 650.48 930.436 650.514 933.678 cv
649.568 934.731 648.563 935.538 647.53 935.771 cv
646.55 935.99 645.976 935.781 645.681 935.305 cv
645.608 935.087 645.533 934.869 645.459 934.651 cv
645.135 932.434 647.498 927.828 648.082 926.707 cv
cp
657.905 937.322 mo
658.091 937.637 658.289 937.944 658.481 938.255 cv
658.272 938.981 658.07 939.711 657.868 940.439 cv
657.894 939.4 657.896 938.361 657.905 937.322 cv
cp
660.048 933.069 mo
659.736 934.064 659.429 935.062 659.13 936.061 cv
658.918 935.742 658.702 935.426 658.48 935.112 cv
659.006 934.435 659.53 933.754 660.048 933.069 cv
cp
668.407 904.814 mo
668.413 906.028 668.41 907.242 668.396 908.456 cv
662.123 917.203 li
661.609 915.929 661.109 914.649 660.61 913.369 cv
663.258 910.563 665.858 907.712 668.407 904.814 cv
cp
667.753 889.044 mo
667.813 889.82 667.871 890.598 667.923 891.375 cv
667.188 891.89 666.455 892.408 665.724 892.93 cv
666.4 891.635 667.076 890.339 667.753 889.044 cv
cp
649.905 950.761 mo
649.362 948.266 648.754 945.786 648.086 943.322 cv
648.883 943.196 649.649 942.965 650.383 942.647 cv
650.279 945.354 650.128 948.06 649.905 950.761 cv
cp
619.683 1133.44 mo
620.186 1133.59 620.721 1133.63 621.25 1133.57 cv
621.035 1134.02 620.817 1134.47 620.605 1134.92 cv
620.303 1134.43 619.994 1133.93 619.683 1133.44 cv
cp
621.853 1181.28 mo
619.969 1177.84 618.667 1173.9 617.861 1170.33 cv
619.212 1173.83 620.648 1177.29 622.168 1180.73 cv
622.063 1180.91 621.958 1181.09 621.853 1181.28 cv
cp
566.309 945.293 mo
566.197 944.871 566.082 944.45 565.978 944.026 cv
566.036 942.067 566.054 940.107 566.039 938.147 cv
566.537 937.995 567.037 937.854 567.538 937.713 cv
567.194 940.248 566.785 942.775 566.309 945.293 cv
cp
554.968 978.155 mo
554.979 977.23 555.002 976.305 555.006 975.38 cv
556.799 975.078 558.593 974.966 560.343 975.097 cv
558.563 976.137 556.772 977.158 554.968 978.155 cv
cp
552.93 929.791 mo
553.071 929.72 553.21 929.647 553.352 929.577 cv
554.269 929.117 554.815 928.462 555.067 927.736 cv
555.478 927.665 555.887 927.593 556.298 927.521 cv
556.32 928.234 556.348 928.946 556.387 929.657 cv
555.352 930.204 554.325 930.765 553.305 931.338 cv
553.18 930.822 553.055 930.307 552.93 929.791 cv
cp
545.293 951.354 mo
544.98 950.144 544.667 948.933 544.354 947.723 cv
545.047 947.347 545.746 946.973 546.449 946.601 cv
546.558 947.902 546.65 949.206 546.743 950.509 cv
546.259 950.791 545.774 951.068 545.293 951.354 cv
cp
545.334 983.21 mo
545.336 982.552 545.345 981.894 545.341 981.234 cv
545.491 981.816 545.642 982.398 545.792 982.98 cv
545.639 983.057 545.487 983.135 545.334 983.21 cv
cp
541.306 935.933 mo
542.567 935.233 543.833 934.542 545.104 933.859 cv
545.197 934.612 545.302 935.364 545.39 936.118 cv
541.766 937.712 li
541.613 937.119 541.459 936.526 541.306 935.933 cv
cp
558.586 944.729 mo
558.501 946.979 558.363 949.226 558.174 951.47 cv
555.88 941.983 li
556.521 941.699 557.164 941.422 557.81 941.15 cv
558.041 942.349 558.305 943.541 558.586 944.729 cv
cp
536.787 970.378 mo
536.555 968.978 536.31 967.579 536.046 966.184 cv
536.463 965.892 536.881 965.601 537.301 965.311 cv
537.412 966.892 537.506 968.474 537.586 970.057 cv
537.321 970.165 537.054 970.271 536.787 970.378 cv
cp
532.846 952.178 mo
533.819 951.551 534.8 950.937 535.785 950.327 cv
536.053 952.352 536.3 954.378 536.518 956.408 cv
535.753 956.804 534.987 957.195 534.219 957.58 cv
533.79 955.773 533.328 953.973 532.846 952.178 cv
cp
529.974 942.533 mo
531.373 941.68 532.778 940.835 534.19 940.003 cv
534.247 940.324 534.311 940.646 534.366 940.967 cv
530.078 942.853 li
530.043 942.746 530.008 942.64 529.974 942.533 cv
cp
529.387 985.765 mo
528.937 984.354 528.49 982.942 528.057 981.526 cv
528.401 981.411 528.746 981.297 529.09 981.18 cv
529.47 982.5 529.748 983.827 529.892 985.149 cv
529.721 985.353 529.556 985.561 529.387 985.765 cv
cp
525.952 974.385 mo
525.904 974.216 525.853 974.048 525.805 973.879 cv
526.038 973.692 526.271 973.506 526.504 973.32 cv
526.851 973.363 527.179 973.384 527.497 973.395 cv
527.534 973.539 527.572 973.684 527.608 973.828 cv
527.059 974.019 526.504 974.198 525.952 974.385 cv
cp
522.852 962.829 mo
522.813 962.673 522.772 962.517 522.733 962.36 cv
523.348 961.813 523.971 961.272 524.604 960.742 cv
524.688 961.15 524.78 961.558 524.866 961.966 cv
524.196 962.258 523.525 962.545 522.852 962.829 cv
cp
507.353 944.238 mo
508.548 943.02 510.067 942.034 511.979 941.381 cv
512.433 941.226 512.886 941.097 513.338 940.981 cv
511.354 942.087 509.358 943.171 507.353 944.238 cv
cp
505.073 964.022 mo
504.947 963.376 504.826 962.728 504.707 962.079 cv
506.486 961.297 508.266 960.514 510.045 959.731 cv
508.365 961.134 506.705 962.562 505.073 964.022 cv
cp
493.703 951.08 mo
493.729 949.924 494.275 948.749 495.159 948.026 cv
495.238 948.76 495.331 949.491 495.417 950.224 cv
494.846 950.509 494.274 950.794 493.703 951.08 cv
cp
394.095 1020.39 mo
393.518 1018.35 392.94 1016.31 392.363 1014.28 cv
393.699 1015.31 394.85 1016.58 395.852 1017.98 cv
395.016 1018.54 394.358 1019.39 394.095 1020.39 cv
cp
390.849 797.494 mo
391.095 797.856 391.354 798.209 391.597 798.573 cv
391.884 799.006 392.212 799.345 392.564 799.609 cv
392.328 803.234 391.96 806.847 391.42 810.435 cv
391.481 806.11 391.284 801.79 390.849 797.494 cv
cp
387.631 1070.94 mo
387.757 1068.98 387.858 1067.01 387.936 1065.05 cv
388.251 1065.75 388.548 1066.47 388.82 1067.19 cv
389.389 1068.69 388.741 1070.08 387.631 1070.94 cv
cp
381.125 793.312 mo
381.701 793.352 382.276 793.376 382.848 793.379 cv
383.571 798.159 383.965 802.982 384.022 807.818 cv
382.949 803.004 381.982 798.168 381.125 793.312 cv
cp
377.193 823.027 mo
377.256 822.863 377.315 822.699 377.377 822.535 cv
377.165 822.688 376.937 822.807 376.704 822.908 cv
377.15 819.985 377.533 817.055 377.854 814.118 cv
378.91 818.583 380.057 823.028 381.296 827.451 cv
378.804 827.82 376.049 825.979 377.193 823.027 cv
cp
379.851 1045.37 mo
379.894 1045.3 379.932 1045.22 379.971 1045.15 cv
380.14 1045.46 380.316 1045.77 380.506 1046.08 cv
380.54 1046.94 380.574 1047.8 380.599 1048.66 cv
380.337 1047.57 380.093 1046.47 379.851 1045.37 cv
cp
378.781 1040.16 mo
378.534 1038.86 378.302 1037.56 378.083 1036.26 cv
378.677 1036.04 379.267 1035.81 379.853 1035.57 cv
380.04 1037.78 380.195 1039.99 380.32 1042.21 cv
380.316 1042.22 380.312 1042.23 380.308 1042.25 cv
380.095 1041.46 379.61 1040.72 378.781 1040.16 cv
cp
376.638 1025.89 mo
377.316 1025.53 377.997 1025.17 378.692 1024.84 cv
378.769 1025.42 378.843 1026 378.915 1026.59 cv
378.206 1026.77 377.497 1026.96 376.788 1027.15 cv
376.738 1026.73 376.685 1026.31 376.638 1025.89 cv
cp
370.389 1073.61 mo
370.251 1073.71 370.11 1073.79 369.971 1073.87 cv
370.094 1072.76 370.199 1071.65 370.302 1070.54 cv
370.643 1071.28 370.975 1072.02 371.329 1072.75 cv
371.07 1073.06 370.765 1073.36 370.389 1073.61 cv
cp
368.325 806.715 mo
369.018 808.18 369.814 809.572 370.74 810.849 cv
370.501 813.333 370.209 815.813 369.877 818.288 cv
369.241 814.445 368.719 810.586 368.325 806.715 cv
cp
381.039 784.684 mo
381.095 784.748 381.151 784.812 381.207 784.876 cv
381.27 785.142 381.327 785.407 381.387 785.673 cv
380.883 785.648 380.369 785.612 379.852 785.566 cv
379.801 785.231 379.752 784.896 379.702 784.562 cv
380.147 784.603 380.593 784.643 381.039 784.684 cv
cp
465.585 1250.54 mo
472.836 1255.57 478.579 1261.88 481.245 1270.36 cv
481.511 1271.21 480.361 1271.55 479.908 1270.92 cv
475.326 1264.56 470.143 1258.33 463.686 1253.79 cv
461.719 1252.41 463.587 1249.16 465.585 1250.54 cv
cp
471.818 1232.32 mo
477.987 1238.15 484.113 1245.29 485.41 1253.92 cv
485.643 1255.46 483.896 1256.17 482.958 1254.95 cv
478.023 1248.53 474.577 1241.1 469.281 1234.86 cv
467.8 1233.11 470.117 1230.71 471.818 1232.32 cv
cp
363.643 1056.54 mo
362.512 1056.72 361.379 1056.89 360.246 1057.04 cv
359.897 1056 359.565 1054.94 359.247 1053.89 cv
359.231 1053.76 359.216 1053.63 359.201 1053.5 cv
359.54 1053.39 359.877 1053.27 360.215 1053.16 cv
360.501 1053.44 360.791 1053.71 361.072 1053.99 cv
360.992 1053.64 360.923 1053.29 360.854 1052.94 cv
361.657 1052.67 362.459 1052.4 363.26 1052.12 cv
363.392 1052.56 363.534 1052.99 363.67 1053.42 cv
363.669 1054.46 363.661 1055.5 363.643 1056.54 cv
cp
363.303 1065.05 mo
363.187 1064.79 363.069 1064.52 362.956 1064.25 cv
363.091 1064.23 363.227 1064.21 363.362 1064.19 cv
363.345 1064.48 363.321 1064.77 363.303 1065.05 cv
cp
357.737 1040.05 mo
358.588 1040.14 359.43 1040.27 360.262 1040.42 cv
360.552 1041.79 360.856 1043.17 361.189 1044.54 cv
360.861 1044.63 360.533 1044.72 360.205 1044.81 cv
360.225 1044.14 360.256 1043.47 360.311 1042.8 cv
359.433 1042.09 358.53 1041.41 357.605 1040.77 cv
357.661 1040.53 357.704 1040.29 357.737 1040.05 cv
cp
355.995 1032.63 mo
355.976 1032.65 355.962 1032.67 355.943 1032.69 cv
355.873 1032.71 355.813 1032.74 355.747 1032.76 cv
355.163 1030 354.542 1027.24 353.864 1024.49 cv
355.638 1025.62 357.243 1027.12 357.604 1029.28 cv
357.711 1029.93 357.654 1030.52 357.496 1031.05 cv
356.989 1031.57 356.487 1032.09 355.995 1032.63 cv
cp
353.474 786.932 mo
353.819 787.056 354.162 787.186 354.507 787.307 cv
354.119 787.845 353.7 788.363 353.266 788.873 cv
353.32 788.224 353.388 787.577 353.474 786.932 cv
cp
351.917 1065.39 mo
352.247 1065.37 352.577 1065.35 352.907 1065.33 cv
352.992 1066.45 353.064 1067.57 353.133 1068.69 cv
352.715 1067.6 352.309 1066.5 351.917 1065.39 cv
cp
349.111 1056.67 mo
350.071 1056.38 351.031 1056.1 351.988 1055.8 cv
352.068 1056.49 352.151 1057.18 352.225 1057.87 cv
351.321 1057.93 350.418 1057.99 349.513 1058.04 cv
349.376 1057.59 349.243 1057.13 349.111 1056.67 cv
cp
347.993 950.126 mo
347.21 948.883 346.441 947.63 345.681 946.372 cv
346.136 945.976 346.591 945.579 347.045 945.184 cv
347.593 946.538 348.135 947.895 348.668 949.255 cv
348.447 949.549 348.224 949.842 347.993 950.126 cv
cp
348.186 1040.26 mo
347.566 1040.47 346.967 1040.69 346.685 1040.75 cv
346.278 1040.84 345.867 1040.92 345.459 1041 cv
345.443 1040.92 345.427 1040.83 345.412 1040.74 cv
348.246 1039.96 li
348.223 1040.06 348.207 1040.16 348.186 1040.26 cv
cp
344.211 1032.7 mo
344.108 1031.86 344.017 1031.02 343.928 1030.18 cv
344.74 1029.72 345.542 1029.25 346.349 1028.78 cv
346.529 1029.94 346.714 1031.09 346.904 1032.25 cv
346.457 1032.32 346.009 1032.4 345.561 1032.47 cv
345.44 1032.49 345.319 1032.51 345.198 1032.53 cv
344.869 1032.59 344.54 1032.64 344.211 1032.7 cv
cp
344.752 1067.32 mo
344.393 1067.01 344.042 1066.7 343.706 1066.4 cv
343.442 1066.16 343.176 1065.9 342.911 1065.65 cv
343.333 1065.65 343.754 1065.66 344.176 1065.65 cv
344.366 1066.22 344.569 1066.77 344.765 1067.33 cv
344.761 1067.33 344.756 1067.32 344.752 1067.32 cv
cp
336.32 781.433 mo
336.175 781.154 336.041 780.869 335.902 780.587 cv
336.866 780.674 337.829 780.762 338.792 780.849 cv
341.025 782.073 343.464 783.067 345.731 783.949 cv
345.054 786.424 344.471 788.923 344.003 791.446 cv
340.874 788.586 338.277 785.202 336.32 781.433 cv
cp
324.807 1051.94 mo
325.032 1051.69 325.253 1051.43 325.485 1051.18 cv
330.221 1050.82 334.945 1050.29 339.651 1049.56 cv
339.654 1049.57 339.657 1049.58 339.659 1049.59 cv
334.735 1050.52 329.783 1051.31 324.807 1051.94 cv
cp
334.628 1161.1 mo
333.895 1158.99 333.138 1156.88 332.36 1154.78 cv
333.523 1156.58 334.687 1158.38 335.85 1160.18 cv
335.502 1160.55 335.088 1160.88 334.628 1161.1 cv
cp
328.886 1135.75 mo
329.065 1135.48 329.196 1135.21 329.288 1134.94 cv
329.879 1136.31 330.462 1137.68 331.026 1139.05 cv
328.886 1135.75 li
cp
325.272 1130.16 mo
324.999 1129.74 324.725 1129.32 324.451 1128.89 cv
323.932 1126.8 323.512 1124.66 323.209 1122.51 cv
325.059 1125.73 li
325.854 1127.37 326.624 1129.01 327.38 1130.66 cv
326.743 1130.3 326.015 1130.11 325.272 1130.16 cv
cp
323.084 1155.25 mo
321.812 1152.14 320.46 1149.06 319.038 1146.02 cv
319.456 1145.54 319.878 1145.06 320.304 1144.59 cv
322.318 1149.35 324.227 1154.15 326 1159.01 cv
325.016 1157.77 324.045 1156.51 323.084 1155.25 cv
cp
315.428 959.474 mo
316.697 957.949 317.956 956.459 319.093 955.004 cv
319.969 953.883 320.868 952.781 321.754 951.669 cv
322.442 952.913 323.139 954.152 323.858 955.378 cv
323.771 955.52 323.676 955.656 323.588 955.797 cv
321.752 957.397 319.917 958.998 318.082 960.598 cv
317.075 960.621 316.103 960.27 315.428 959.474 cv
cp
315.475 1138.82 mo
315.074 1138.05 314.683 1137.27 314.272 1136.5 cv
314.17 1136.31 314.062 1136.12 313.959 1135.93 cv
314.348 1134.97 314.746 1134.02 315.148 1133.06 cv
315.788 1134.42 316.422 1135.77 317.042 1137.13 cv
316.515 1137.69 315.991 1138.25 315.475 1138.82 cv
cp
313.505 1055.26 mo
311.717 1054.49 310.266 1053.3 309.29 1051.67 cv
311.403 1051.7 313.515 1051.69 315.625 1051.65 cv
314.965 1052.63 314.342 1053.63 313.762 1054.66 cv
313.654 1054.85 313.573 1055.05 313.505 1055.26 cv
cp
308.433 1160.28 mo
308.784 1159.72 309.151 1159.18 309.511 1158.64 cv
310.732 1160.31 311.914 1162.01 313.074 1163.73 cv
311.42 1162.79 309.876 1161.6 308.433 1160.28 cv
cp
305.262 1119.4 mo
305.772 1118.46 306.263 1117.5 306.72 1116.53 cv
306.827 1116.72 306.933 1116.92 307.039 1117.11 cv
306.434 1117.87 305.841 1118.63 305.262 1119.4 cv
cp
300.679 1151.2 mo
300.571 1151.05 300.462 1150.9 300.354 1150.74 cv
300.654 1150.28 300.955 1149.82 301.255 1149.35 cv
301.062 1149.97 300.867 1150.58 300.679 1151.2 cv
cp
295.143 1136.53 mo
294.41 1137.37 293.664 1138.2 292.894 1139 cv
292.772 1139.13 292.628 1139.26 292.478 1139.39 cv
292.936 1137.83 293.319 1136.22 293.898 1134.74 cv
294.043 1134.37 294.201 1134 294.354 1133.64 cv
294.895 1134.01 295.417 1134.41 295.932 1134.83 cv
295.665 1135.39 295.397 1135.96 295.143 1136.53 cv
cp
318.917 907.068 mo
319.145 907.71 319.387 908.346 319.622 908.985 cv
319.241 909.329 318.86 909.673 318.484 910.021 cv
318.502 909.02 318.626 908.03 318.917 907.068 cv
cp
330.385 765.907 mo
331.073 766.353 331.768 766.784 332.464 767.216 cv
332.159 767.621 331.897 768.053 331.688 768.509 cv
331.359 768.666 331.033 768.834 330.708 769.002 cv
330.44 767.971 330.269 766.89 330.385 765.907 cv
cp
333.476 915.575 mo
333.313 915.704 333.151 915.833 332.99 915.962 cv
332.331 914.286 331.673 912.61 331.014 910.934 cv
331.825 912.486 332.646 914.033 333.476 915.575 cv
cp
337.59 899.02 mo
337.86 901.324 337.899 903.67 337.802 906.032 cv
336.131 902.519 334.443 899.013 332.737 895.515 cv
334.786 894.949 337.277 896.355 337.59 899.02 cv
cp
352.519 980.691 mo
352.108 980.412 351.745 980.058 351.479 979.609 cv
351.584 979.505 351.68 979.391 351.772 979.274 cv
352.519 980.691 li
cp
351.971 926.038 mo
352.345 927.395 352.696 928.757 353.036 930.121 cv
352.441 930.64 351.847 931.158 351.252 931.677 cv
350.922 931.135 350.589 930.594 350.261 930.05 cv
350.823 928.689 351.387 927.346 351.971 926.038 cv
cp
361.078 808.517 mo
360.603 807.396 360.171 806.254 359.779 805.1 cv
360.087 804.644 360.37 804.165 360.63 803.666 cv
360.759 805.285 360.908 806.901 361.078 808.517 cv
cp
362.167 759.073 mo
360.966 758.633 359.552 758.749 358.55 759.585 cv
357.341 759.244 356.126 758.931 354.901 758.678 cv
355.955 754.787 361.908 754.729 362.167 759.073 cv
cp
614.187 505.013 mo
610.771 502.279 607.373 499.612 604.29 496.532 cv
600.11 498.585 596.012 500.863 592.129 503.432 cv
588.615 505.757 584.707 509.318 580.68 510.571 cv
580.181 510.726 579.536 510.185 579.759 509.649 cv
581.359 505.811 585.536 502.71 588.829 500.315 cv
592.896 497.356 597.263 494.939 601.836 492.88 cv
602.628 485.665 602.85 478.392 603.435 471.155 cv
603.118 471.104 602.8 470.978 602.501 470.747 cv
598.979 468.025 595.213 465.343 592.01 462.242 cv
590.193 460.484 588.462 458.114 588.927 455.439 cv
590.027 449.102 599.567 450.469 603.911 451.352 cv
608.611 452.308 617.504 455.143 616.32 461.559 cv
615.874 463.984 613.899 465.681 611.802 466.771 cv
610.484 467.455 608.625 468.65 606.87 469.185 cv
606.713 477.119 606.013 485.048 606.01 492.982 cv
609.941 495.373 613.471 498.222 617.08 501.09 cv
620.439 503.761 624.392 506.228 626.029 510.334 cv
626.337 511.105 625.471 511.635 624.83 511.535 cv
620.662 510.881 617.385 507.573 614.187 505.013 cv
cp
591.732 614.152 mo
588.586 612.799 586.718 609.257 584.7 606.613 cv
583.604 605.178 582.333 602.499 580.903 601.497 cv
580.563 600.561 579.939 600.419 579.03 601.072 cv
578.01 600.946 577.452 601.352 577.355 602.289 cv
576.843 603.095 576.621 604.277 576.312 605.18 cv
575.022 608.956 573.751 612.74 572.427 616.503 cv
571.601 618.849 570.996 622.726 568.768 624.307 cv
563.099 628.33 564.235 616.356 564.225 614.427 cv
564.18 606.058 564.081 597.689 564.215 589.321 cv
564.248 587.297 567.287 587.308 567.351 589.321 cv
567.531 594.982 567.594 600.641 567.654 606.305 cv
567.683 609.012 567.711 611.72 567.74 614.427 cv
567.749 615.22 567.615 617.831 567.627 619.692 cv
568.671 617.49 569.39 614.156 569.846 612.875 cv
570.79 610.219 571.746 607.567 572.696 604.912 cv
573.72 602.054 574.596 597.992 577.894 596.891 cv
581.517 595.681 583.697 599.182 585.697 601.551 cv
588.353 604.698 592.814 608.584 593.523 612.775 cv
593.71 613.879 592.741 614.587 591.732 614.152 cv
cp
569.547 386 mo
570.536 385.449 571.537 384.993 572.548 384.607 cv
572.926 384.775 573.305 384.944 573.683 385.113 cv
573.64 385.813 573.799 386.495 574.234 387.062 cv
571.884 386.599 569.118 388.293 569.722 391.133 cv
569.348 391.302 568.976 391.476 568.605 391.652 cv
567.181 389.997 567.524 387.129 569.547 386 cv
cp
585.569 427.493 mo
584.423 427.348 583.402 426.55 582.707 425.647 cv
582.037 424.777 581.451 423.827 580.949 422.817 cv
585.569 427.493 li
cp
621.114 382.381 mo
619.837 382.4 618.566 382.494 617.301 382.652 cv
616.636 381.619 615.994 380.57 615.389 379.497 cv
617.461 380.159 619.44 381.072 621.114 382.381 cv
cp
621.522 389.735 mo
621.943 389.729 622.365 389.733 622.788 389.748 cv
622.397 390.02 621.958 390.234 621.492 390.366 cv
621.518 390.157 621.525 389.946 621.522 389.735 cv
cp
541.661 440.412 mo
540.555 440.458 539.447 440.432 538.337 440.355 cv
525.115 440.462 513.44 444.953 501.454 450.582 cv
500.296 451.125 498.899 449.646 499.997 448.694 cv
503.115 445.99 506.631 443.813 510.381 442.073 cv
509.429 442.385 508.481 442.728 507.54 443.107 cv
505.897 443.77 505.135 441.294 506.409 440.424 cv
509.418 438.367 512.58 437.283 516.227 437.202 cv
516.594 437.193 516.88 437.299 517.093 437.469 cv
517.772 437.371 518.454 437.291 519.138 437.223 cv
514.002 436.309 508.662 436.94 503.998 439.618 cv
502.157 440.675 500.788 438.063 502.382 436.853 cv
512.622 429.083 526.237 435.585 538.01 436.499 cv
539.235 436.501 540.456 436.521 541.661 436.579 cv
544.127 436.697 544.128 440.306 541.661 440.412 cv
cp
521.349 591.099 mo
521.912 588.702 522.41 586.293 522.857 583.875 cv
523.268 586.144 523.679 588.413 524.09 590.681 cv
523.301 591.165 522.304 591.287 521.349 591.099 cv
cp
516.068 579.683 mo
515.725 578.616 515.381 577.548 515.037 576.48 cv
515.566 576.323 516.092 576.154 516.618 575.989 cv
516.447 577.222 516.271 578.455 516.068 579.683 cv
cp
508.198 558.45 mo
508.009 558.339 507.813 558.243 507.609 558.163 cv
509.109 557.295 510.652 556.721 511.919 557.01 cv
510.675 557.48 509.435 557.961 508.198 558.45 cv
cp
475.21 533.862 mo
473.862 534.714 472.598 532.547 473.962 531.726 cv
489.374 522.444 504.663 511.35 521.947 505.735 cv
522.919 505.419 523.364 506.781 522.605 507.295 cv
507.644 517.435 490.496 524.206 475.21 533.862 cv
cp
496.167 593.163 mo
495.685 591.607 495.27 590.034 494.891 588.454 cv
495.436 589.389 495.996 590.315 496.553 591.242 cv
496.424 591.882 496.296 592.523 496.167 593.163 cv
cp
483.517 592.231 mo
484.611 589.773 485.618 587.269 486.548 584.729 cv
486.599 585.023 486.644 585.318 486.697 585.611 cv
486.701 585.688 486.708 585.766 486.711 585.843 cv
486.791 586.21 486.875 586.575 486.962 586.939 cv
487.398 589.122 487.928 591.286 488.539 593.43 cv
486.891 592.932 485.212 592.539 483.517 592.231 cv
cp
482.727 599.68 mo
484.07 599.946 485.395 600.279 486.697 600.686 cv
485.408 600.409 484.042 600.089 482.727 599.68 cv
cp
471.997 616.246 mo
470.505 616.061 469.017 615.857 467.531 615.631 cv
467.599 615.576 467.672 615.532 467.737 615.47 cv
468.644 614.609 469.508 613.719 470.349 612.813 cv
471.238 613.152 472.143 613.453 473.06 613.728 cv
472.749 614.587 472.394 615.427 471.997 616.246 cv
cp
466.83 595.52 mo
466.717 595.147 466.607 594.77 466.499 594.387 cv
467.818 592.529 469.136 590.672 470.455 588.815 cv
469.402 591.533 468.349 594.25 467.295 596.967 cv
467.131 596.482 466.974 595.998 466.83 595.52 cv
cp
465.896 512.657 mo
483.031 502.069 502.415 493.549 522.726 492.174 cv
523.684 492.109 523.79 493.521 522.944 493.782 cv
503.838 499.677 484.83 505.229 467.075 514.673 cv
465.747 515.379 464.616 513.448 465.896 512.657 cv
cp
453.771 612.313 mo
454.367 611.473 454.963 610.634 455.559 609.794 cv
455.787 610.25 456.005 610.712 456.252 611.159 cv
456.733 612.028 457.269 612.901 457.844 613.681 cv
456.507 613.175 455.146 612.726 453.771 612.313 cv
cp
433.111 412.475 mo
428.195 394.181 425.294 375.427 424.508 356.457 cv
426.208 357.527 427.893 358.62 429.547 359.755 cv
433.26 363.54 436.92 367.382 440.822 370.99 cv
446.863 376.577 453.21 381.698 459.681 386.768 cv
459.851 386.965 460.022 387.16 460.191 387.357 cv
460.748 388.475 459.687 390.031 458.424 390.049 cv
456.458 390.079 454.841 390.43 453.298 391.094 cv
454.901 391.75 456.501 392.412 458.085 393.11 cv
459.94 393.927 458.967 396.933 457.071 396.854 cv
456.775 396.842 456.487 396.843 456.197 396.843 cv
461.039 398.451 465.434 401.17 469.215 404.889 cv
458.062 410.376 445.753 412.997 433.111 412.475 cv
cp
509.092 405.219 mo
512.854 402.131 517.684 401.028 522.359 402.551 cv
523.537 402.935 524.105 404.896 522.743 405.483 cv
519.384 406.93 516 408.303 512.607 409.667 cv
511.76 410.008 511.102 409.228 511.068 408.463 cv
510.534 408.42 509.981 408.251 509.443 407.941 cv
508.552 407.427 508.218 405.938 509.092 405.219 cv
cp
632.748 672.761 mo
632.789 671.763 632.866 670.776 632.984 669.808 cv
633.202 668.024 633.865 666.69 634.77 665.792 cv
635.674 664.895 636.82 664.434 638.005 664.396 cv
638.598 664.378 639.2 664.465 639.787 664.657 cv
641.546 665.231 643.164 666.744 643.956 669.152 cv
645.231 673.031 645.428 677.539 645.994 681.579 cv
646.367 684.241 646.715 686.907 647.076 689.571 cv
648.572 687.004 650.279 684.57 652.221 682.321 cv
652.998 681.421 653.812 680.551 654.666 679.714 cv
655.093 679.295 655.529 678.885 655.976 678.483 cv
656.379 678.12 656.828 677.758 657.308 677.414 cv
657.788 677.07 658.299 676.743 658.83 676.451 cv
659.228 676.231 659.636 676.031 660.049 675.856 cv
660.325 675.74 660.603 675.635 660.881 675.544 cv
661.16 675.453 661.438 675.375 661.717 675.313 cv
664.08 674.786 666.37 675.386 667.59 678.367 cv
667.843 678.985 667.983 679.6 668.033 680.211 cv
668.083 680.822 668.042 681.429 667.934 682.029 cv
667.717 683.229 667.229 684.404 666.652 685.54 cv
665.759 687.297 664.773 689.02 663.765 690.73 cv
662.757 692.44 661.726 694.139 660.742 695.847 cv
658.708 699.378 656.666 702.905 654.616 706.428 cv
652.565 709.95 650.507 713.467 648.439 716.979 cv
648.242 717.313 648.002 717.543 647.741 717.687 cv
647.349 717.9 646.911 717.917 646.499 717.792 cv
646.224 717.708 645.961 717.561 645.733 717.366 cv
645.619 717.269 645.513 717.16 645.418 717.042 cv
645.233 717.028 645.048 716.981 644.873 716.897 cv
644.785 716.855 644.699 716.804 644.617 716.743 cv
644.535 716.682 644.456 716.61 644.382 716.528 cv
643.74 715.819 643.146 715.048 642.595 714.227 cv
642.044 713.406 641.535 712.536 641.063 711.628 cv
639.413 708.452 638.218 704.819 637.258 701.258 cv
636.983 700.241 636.728 699.229 636.486 698.236 cv
636.366 697.739 636.249 697.247 636.134 696.761 cv
635.905 695.789 635.688 694.841 635.476 693.931 cv
635.148 692.52 634.823 691.063 634.516 689.575 cv
633.392 684.12 632.522 678.252 632.748 672.761 cv
cp
647.805 590.977 mo
647.721 591.308 647.642 591.64 647.561 591.971 cv
647.329 591.599 647.093 591.229 646.854 590.865 cv
647.171 590.902 647.488 590.941 647.805 590.977 cv
cp
659.156 596.87 mo
658.789 597.879 658.419 598.888 658.037 599.892 cv
657.993 600.01 657.928 600.152 657.852 600.312 cv
657.841 599.973 657.836 599.642 657.85 599.329 cv
657.91 597.969 658 596.61 658.122 595.253 cv
658.452 595.792 658.797 596.334 659.156 596.87 cv
cp
640.659 439.871 mo
640.644 439.852 li
643.1 438.427 646.387 437.591 649.769 437.225 cv
659.395 432.36 672.031 437.015 677.959 445.614 cv
678.978 447.092 677.044 448.601 675.67 447.903 cv
665.413 442.69 653.986 441.618 642.687 442.782 cv
641.88 442.865 641.375 442.404 641.176 441.802 cv
641.175 441.802 641.174 441.802 641.172 441.802 cv
640.025 441.897 639.879 440.406 640.659 439.871 cv
cp
652.503 403.525 mo
652.915 403.041 653.481 402.692 654.151 402.771 cv
657.451 403.158 660.222 405.216 661.01 408.553 cv
661.431 410.337 659.814 412.267 657.911 411.653 cv
655.114 410.75 652.602 409.001 650.563 406.91 cv
648.944 405.25 650.69 403.174 652.503 403.525 cv
cp
712.157 528.144 mo
712.539 528.635 712.055 529.466 711.439 529.074 cv
704.491 524.651 698.24 519.176 691.689 514.195 cv
685.077 509.167 678.284 504.345 671.364 499.749 cv
669.935 498.799 671.208 496.565 672.718 497.432 cv
686.755 505.489 702.12 515.198 712.157 528.144 cv
cp
696.611 406.697 mo
699.24 407.031 701.541 408.671 704.088 409.003 cv
707.353 409.429 707.02 406.62 705.305 404.972 cv
705.053 404.73 704.766 404.522 704.465 404.329 cv
703.069 403.767 701.672 403.206 700.264 402.668 cv
698.123 401.852 698.552 398.867 700.432 398.578 cv
699.272 397.312 698.367 395.854 697.958 394.025 cv
697.747 393.081 697.733 392.14 697.848 391.209 cv
699.823 383.986 707.103 378.45 712.433 373.625 cv
717.733 368.827 723.213 364.238 728.837 359.829 cv
731.068 378.458 727.704 397.598 719.529 414.427 cv
716.113 415.039 712.491 414.233 709.988 411.77 cv
709.455 412.554 708.849 413.068 708.194 413.387 cv
704.125 411.57 700.195 409.032 696.356 406.692 cv
696.438 406.689 696.521 406.686 696.611 406.697 cv
cp
663.283 606.89 mo
663.031 609.526 li
662.647 609.388 662.272 609.24 661.909 609.078 cv
662.415 608.416 662.87 607.676 663.283 606.89 cv
cp
662.203 576.333 mo
662.364 575.753 662.525 575.173 662.687 574.594 cv
662.709 574.513 662.723 574.435 662.741 574.355 cv
663.812 574.448 664.875 574.975 665.619 576.04 cv
665.62 576.041 665.62 576.042 665.621 576.043 cv
665.597 576.136 665.57 576.229 665.546 576.323 cv
664.432 576.319 663.317 576.325 662.203 576.333 cv
cp
701.045 543.241 mo
693.517 536.351 686.902 528.66 680.163 520.999 cv
673.415 513.326 666.695 505.673 660.439 497.598 cv
659.654 496.583 660.93 495.178 661.893 496.144 cv
669.258 503.528 676.119 511.345 683.009 519.18 cv
689.656 526.738 696.318 534.187 702.112 542.418 cv
702.578 543.079 701.585 543.735 701.045 543.241 cv
cp
686.478 592.664 mo
688.848 592.6 691.219 592.502 693.59 592.376 cv
692.783 595.221 687.954 595.973 686.478 592.664 cv
cp
680.068 574.038 mo
679.939 573.655 679.816 573.27 679.682 572.888 cv
681.568 572.811 683.454 572.734 685.339 572.657 cv
686.323 574.116 687.218 575.623 688.041 577.168 cv
687.055 577.099 686.068 577.035 685.082 576.974 cv
683.453 576.178 681.617 575.214 680.068 574.038 cv
cp
676.761 609.125 mo
675.658 609.181 674.514 608.822 673.904 608.046 cv
673.588 607.643 673.296 607.229 673.001 606.816 cv
673.882 603.62 674.763 600.424 675.643 597.228 cv
675.78 597.491 675.914 597.756 676.056 598.016 cv
676.25 597.149 676.372 596.258 676.443 595.356 cv
676.865 599.917 676.968 604.507 676.761 609.125 cv
cp
736.644 353.884 mo
736.986 353.632 737.266 353.351 737.493 353.049 cv
737.569 353.317 737.579 353.619 737.492 353.948 cv
736.985 355.853 736.583 357.815 736.246 359.806 cv
736.064 358.099 735.837 356.394 735.571 354.692 cv
735.931 354.425 736.283 354.148 736.644 353.884 cv
cp
673.594 879.361 mo
675.119 877.453 677.836 878.172 679.167 879.836 cv
677.893 881.545 676.605 883.244 675.297 884.926 cv
675.052 884.115 674.807 883.305 674.563 882.494 cv
674.265 881.507 673.603 880.812 672.797 880.39 cv
673.06 880.046 673.323 879.701 673.594 879.361 cv
cp
680.812 903.186 mo
679.901 900.17 678.99 897.154 678.08 894.139 cv
679.223 893.171 680.365 892.203 681.52 891.248 cv
681.693 895.224 681.385 899.253 680.812 903.186 cv
cp
675.042 924.209 mo
675.379 920.179 675.603 916.144 675.72 912.104 cv
675.724 912.095 675.729 912.086 675.733 912.076 cv
676.311 913.991 676.89 915.907 677.468 917.822 cv
676.766 919.991 675.963 922.128 675.042 924.209 cv
cp
617.526 1313.52 mo
610.751 1292.58 620.95 1269.92 639.673 1259.13 cv
649.781 1253.31 661.22 1250.79 672.024 1246.65 cv
673.959 1245.91 675.88 1245.1 677.765 1244.22 cv
679.55 1227.76 681.89 1211.38 684.778 1195.09 cv
684.626 1194.93 684.493 1194.75 684.416 1194.51 cv
682.979 1190.12 683.354 1185.16 683.412 1180.6 cv
683.472 1175.87 683.683 1171.13 683.963 1166.4 cv
684.509 1157.18 685.412 1147.99 686.645 1138.83 cv
689.129 1120.39 692.734 1101.83 698.938 1084.25 cv
699.203 1083.5 699.771 1083.11 700.374 1083.02 cv
717.427 1015.61 740.39 949.133 744.249 879.242 cv
745.385 858.65 744.729 838.016 741.864 817.589 cv
742.036 817.488 742.209 817.393 742.381 817.292 cv
744.441 816.08 742.573 812.866 740.505 814.082 cv
699.484 838.21 653.493 851.479 607.815 863.656 cv
559.69 876.486 509.9 890.229 459.61 885.361 cv
456.003 885.012 452.407 884.565 448.827 884.008 cv
446.952 883.715 445.056 883.439 443.2 883.043 cv
441.392 882.656 439.521 881.093 440.835 879.29 cv
442.426 877.108 447.903 876.606 450.223 875.995 cv
460.091 873.394 li
472.585 870.1 485.079 866.805 497.573 863.511 cv
500.115 862.321 502.78 860.448 500.508 858.262 cv
499.681 857.467 497.601 857.478 496.1 857.458 cv
480.656 859.589 465.211 861.72 449.767 863.851 cv
445.675 864.415 441.5 865.15 437.353 864.941 cv
435.473 864.847 433.582 864.574 431.804 863.935 cv
428.018 862.572 426.136 858.58 430.213 856.237 cv
433.056 854.603 436.883 854.279 440.05 853.677 cv
444.15 852.897 448.272 852.236 452.392 851.567 cv
459.942 850.34 467.511 849.104 474.902 847.1 cv
478.244 846.193 481.546 845.127 484.762 843.842 cv
486.794 843.029 489.731 842.19 491.749 840.742 cv
492.641 839.462 493.387 837.654 492.47 836.969 cv
491.151 835.982 487.944 836.536 486.456 836.616 cv
483.245 836.787 480.031 837.024 476.845 837.462 cv
468.036 838.671 459.395 840.865 450.643 842.396 cv
446.726 843.08 442.78 843.533 438.861 844.199 cv
436.565 844.59 434.156 844.961 431.856 844.561 cv
427.931 844.551 425.245 840.963 427.195 837.021 cv
430.024 831.301 439.551 829.627 445.052 827.995 cv
456.868 824.487 468.967 822.298 480.867 819.129 cv
486.681 817.58 492.109 815.716 497.429 812.991 cv
497.672 812.8 497.888 812.578 498.107 812.361 cv
497.973 812.235 497.818 812.083 497.628 811.883 cv
497.18 811.768 496.748 811.649 496.318 811.534 cv
490.607 812.66 484.901 813.781 479.145 814.698 cv
467.571 816.54 456.923 817.656 446.144 819.572 cv
442.394 820.239 438.19 821.178 434.379 820.487 cv
430.551 819.794 427.964 816.225 430.1 812.454 cv
432.231 808.689 437.571 806.702 441.372 805.301 cv
447.72 802.96 454.486 802.053 461.134 800.99 cv
474.97 798.779 488.54 795.319 502.464 793.611 cv
503.497 792.576 504.339 791.353 504.812 790.061 cv
513.078 794.972 521.591 799.455 530.342 803.456 cv
536.19 806.13 542.135 808.642 548.17 810.864 cv
552.167 812.336 558.084 814.485 562.016 811.632 cv
565.51 809.096 563.52 805.729 560.986 803.413 cv
556.375 799.2 551.453 795.323 546.568 791.435 cv
538.129 784.717 529.702 777.953 522.499 769.914 cv
524.018 767.178 556.637 784.804 573.916 791.775 cv
578.522 793.634 583.19 795.348 587.942 796.799 cv
592.443 798.175 597.325 799.831 602.08 799.847 cv
605.022 799.856 608.616 799.201 609.899 796.172 cv
611.276 792.92 609.295 789.711 606.782 787.715 cv
598.927 781.474 589.314 776.624 580.59 771.707 cv
571.197 766.414 561.621 761.442 551.886 756.806 cv
550.864 756.318 549.788 755.648 548.706 755.306 cv
547.919 755.057 545.326 754.607 548.833 755.258 cv
551.497 755.751 554.131 756.45 556.73 757.208 cv
561.956 758.732 567.055 760.646 572.138 762.583 cv
581.891 766.3 591.685 770.169 602.062 771.735 cv
608.322 772.681 624.158 775.012 625.699 765.726 cv
626.228 762.542 624.088 759.848 621.756 757.559 cv
630.657 756.228 639.475 752.348 647.852 749.217 cv
656.912 745.83 665.88 742.189 674.769 738.375 cv
683.666 734.556 692.46 730.508 701.156 726.252 cv
710.056 721.896 719.062 717.651 727.416 712.329 cv
728.171 711.847 728.445 711.171 728.397 710.526 cv
728.699 710.083 728.814 709.504 728.595 708.824 cv
718.557 677.747 720.884 645.143 724.944 613.26 cv
729.115 580.517 734.529 548.188 732.661 515.048 cv
732.138 505.786 731.27 496.539 730.177 487.327 cv
729.127 478.478 728.518 469.071 726.259 460.413 cv
733.287 449.769 735.406 436.791 738.194 424.499 cv
741.724 408.933 743.985 393.45 743.646 377.453 cv
743.473 369.302 742.866 361.153 741.953 353.051 cv
741.331 347.538 738.282 344.587 732.557 345.674 cv
718.937 348.258 705.245 354.403 692.985 360.712 cv
685.927 364.344 679.084 368.405 672.525 372.875 cv
666.68 376.86 660.573 381.146 655.581 386.248 cv
647.347 381.301 637.899 377.73 628.856 374.716 cv
618.729 371.341 608.293 368.915 597.724 367.43 cv
577.315 364.564 556.379 365.016 536.188 369.262 cv
530.366 370.486 524.607 372.009 518.945 373.835 cv
514.229 375.355 509.234 376.918 504.846 379.365 cv
497.36 370.75 486.841 364.698 475.839 361.903 cv
472.86 361.146 469.828 360.776 466.823 360.165 cv
463.057 359.399 460.015 357.575 456.81 355.544 cv
450.935 351.821 444.792 348.606 438.524 345.604 cv
433.413 343.155 427.474 339.423 421.564 340.021 cv
416.937 340.49 413.63 343.725 411.848 347.862 cv
409.609 353.055 409.486 359.086 409.574 364.65 cv
409.68 371.337 410.551 377.989 411.614 384.583 cv
412.871 392.39 414.449 400.141 415.426 407.992 cv
415.921 411.972 416.323 415.964 416.437 419.975 cv
416.533 423.369 416.174 426.813 416.287 430.208 cv
399.897 448.271 391.412 473.006 392.04 497.286 cv
392.194 503.241 392.925 509.197 394.187 515.019 cv
395.637 521.711 398.47 528.248 398.995 535.116 cv
399.247 538.42 398.705 541.226 397.604 543.765 cv
397.864 544.223 398.121 544.683 398.388 545.138 cv
405.169 556.712 413.875 566.978 424.529 575.167 cv
426.116 576.387 424.58 579.129 422.929 577.904 cv
411.905 569.729 402.346 559.441 395.47 547.525 cv
394.109 549.467 392.44 551.303 390.58 553.162 cv
385.997 557.743 381.785 562.613 378.105 567.957 cv
374.083 573.8 370.798 580.086 368.158 586.666 cv
365.523 593.231 362.95 600.493 362.94 607.636 cv
362.94 607.732 362.951 607.821 362.964 607.908 cv
362.822 608.6 363.016 609.369 363.74 609.88 cv
395.658 632.423 li
405.329 639.252 414.887 646.349 425.148 652.281 cv
433.254 656.966 441.676 660.326 450.339 662.548 cv
450.542 662.706 450.796 662.826 451.119 662.882 cv
451.816 663.003 452.515 663.124 453.213 663.245 cv
457.593 664.236 462.033 664.944 466.523 665.39 cv
477.603 666.963 488.767 667.814 499.928 666.396 cv
508.527 665.304 516.889 663.06 525.272 660.919 cv
525.426 660.914 525.586 660.896 525.756 660.848 cv
536.819 657.712 548.253 657.286 559.682 657.619 cv
564.553 657.761 570.126 657.377 574.864 658.633 cv
577.79 659.408 581.494 661.643 580.488 665.284 cv
579.505 668.847 575.342 670.015 572.178 670.528 cv
561.962 672.187 552.068 673.514 542.241 677.027 cv
538.9 678.222 534.42 679.371 532.131 682.317 cv
530.038 685.013 530.742 688.331 533.135 690.607 cv
539.772 696.918 551.374 695.95 559.732 696.852 cv
570.09 697.969 580.321 700.336 590.156 703.759 cv
599.841 707.13 610.479 711.458 618.759 717.661 cv
620.902 719.267 623.39 721.927 622.536 724.894 cv
621.718 727.731 618.414 727.77 616.004 727.792 cv
609.812 727.849 603.583 727.39 597.422 726.825 cv
584.728 725.662 572.141 723.61 559.551 721.662 cv
556.562 721.2 553.556 720.611 550.547 720.303 cv
549.083 720.154 547.527 720.069 546.283 721.034 cv
545.143 721.917 544.758 723.385 545.071 724.638 cv
545.165 724.805 545.253 724.975 545.352 725.139 cv
545.529 725.432 545.721 725.712 545.909 725.998 cv
545.953 726.066 545.978 726.107 546.001 726.146 cv
546.032 726.173 546.072 726.209 546.134 726.27 cv
546.366 726.499 546.575 726.743 546.814 726.966 cv
546.843 726.994 547.232 727.311 547.291 727.371 cv
565.199 732.987 582.737 739.664 599.841 747.343 cv
603.533 748.762 607.253 750.366 610.709 752.309 cv
610.92 752.427 611.126 752.55 611.334 752.67 cv
614.45 754.477 617.335 756.565 619.752 759.069 cv
621.419 760.796 622.533 763.268 621.848 765.321 cv
621.759 766.144 621.232 766.9 620.052 767.516 cv
619.935 767.593 619.826 767.673 619.698 767.744 cv
618.755 768.272 617.771 768.499 616.769 768.538 cv
613.053 769.224 608.832 768.821 605.241 768.432 cv
599.993 767.862 594.831 766.574 589.798 765.012 cv
580.899 762.248 572.35 758.498 563.539 755.482 cv
559.259 754.018 554.918 752.722 550.485 751.811 cv
548.314 751.364 544.877 750.498 543.59 753.073 cv
542.438 755.379 544.396 757.149 546.193 758.217 cv
550.568 760.817 555.558 762.671 560.11 764.974 cv
568.895 769.419 577.54 774.139 586.029 779.125 cv
590.071 781.5 594.079 783.935 598.048 786.429 cv
599.782 787.519 601.543 788.581 603.233 789.738 cv
604.154 790.368 605.532 791.125 606.045 792.178 cv
607.936 796.059 603.908 796.113 602.08 796.13 cv
597.75 796.17 593.03 794.468 588.931 793.216 cv
584.385 791.827 579.917 790.198 575.505 788.435 cv
557.885 781.391 541.166 772.207 523.136 766.22 cv
523.042 766.228 522.952 766.247 522.856 766.248 cv
522.568 766.251 522.283 766.231 522 766.197 cv
521.161 766.494 520.287 766.941 519.668 767.421 cv
518.192 768.563 518.252 769.858 518.715 771.212 cv
524.791 778.253 531.816 784.333 539.054 790.161 cv
542.788 793.169 546.567 796.121 550.282 799.154 cv
552.217 800.734 554.136 802.335 556.022 803.975 cv
557.794 805.516 562.085 809.286 556.706 809.201 cv
551.65 809.122 546.24 806.221 541.646 804.336 cv
536.402 802.185 531.231 799.859 526.138 797.375 cv
518.848 793.817 511.734 789.921 504.798 785.723 cv
504.762 785.638 504.711 785.554 504.67 785.469 cv
503.867 785.033 503.064 784.597 502.26 784.163 cv
500.448 783.186 498.635 782.211 496.819 781.243 cv
494.03 779.759 491.239 778.28 488.439 776.818 cv
446.615 759.491 405.247 741.069 364.402 721.542 cv
352.077 715.649 339.803 709.649 327.573 703.562 cv
327.321 703.353 327.016 703.205 326.696 703.129 cv
326.553 703.058 326.408 702.988 326.265 702.917 cv
326.189 702.879 326.116 702.862 326.042 702.835 cv
325.615 703.375 325.197 703.92 324.806 704.484 cv
323.802 705.931 322.814 707.387 321.798 708.824 cv
294.104 755.001 273.375 804.355 255.838 855.217 cv
252.429 865.104 249.112 875.023 245.822 884.95 cv
232.974 912.635 230.069 944.425 229.696 974.917 cv
229.156 1019.05 229.1 1063.78 234.598 1107.63 cv
237.111 1127.67 240.658 1147.86 246.89 1167.11 cv
252.049 1183.04 259.491 1198.89 271.562 1210.8 cv
284.979 1224.02 302.462 1228.59 320.447 1232.05 cv
340.64 1235.93 360.292 1241.25 379.193 1249.46 cv
400.131 1258.55 419.235 1270.56 437.247 1284.51 cv
450.752 1294.97 468.649 1306.42 485.874 1300.33 cv
486.588 1295.73 487.425 1291.14 488.181 1286.64 cv
491.061 1269.47 493.704 1251.3 488.14 1234.37 cv
482.792 1218.1 471.489 1204.61 459.507 1192.73 cv
447.278 1180.61 433.746 1169.87 421.851 1157.41 cv
419.706 1155.16 417.715 1152.82 415.804 1150.42 cv
415.485 1150.64 415.101 1150.76 414.689 1150.69 cv
403.572 1140.74 389.507 1134.17 379.332 1123.15 cv
379.662 1122.94 380.094 1122.9 380.555 1123.2 cv
389.171 1128.8 397.686 1134.54 406.148 1140.36 cv
401.186 1132.95 397.23 1124.92 394.245 1116.42 cv
394.074 1115.94 394.134 1115.52 394.329 1115.2 cv
397.597 1120.99 401.21 1126.56 405.145 1131.9 cv
405.942 1133.25 406.759 1134.59 407.615 1135.9 cv
409.089 1138.05 410.672 1140.11 412.375 1142.02 cv
418.705 1149.12 425.601 1155.81 432.489 1162.36 cv
453.916 1182.74 480.438 1202.19 491.043 1230.73 cv
487.267 1212.59 483.303 1194.5 478.932 1176.5 cv
469.536 1137.79 458.903 1099.42 447.738 1061.2 cv
439.581 1033.26 430.745 1005.56 421.856 977.859 cv
427.788 992.468 433.719 1007.08 439.651 1021.69 cv
459.138 1084.85 475.789 1148.86 490.815 1213.23 cv
491.16 1215.19 491.485 1217.16 491.809 1219.13 cv
493.534 1232.78 494.771 1246.49 495.496 1260.24 cv
495.142 1269.84 493.482 1279.46 491.871 1288.95 cv
490.921 1294.56 490.052 1300.17 489.408 1305.79 cv
495.594 1319.49 513.266 1328.72 527.886 1332.06 cv
528.085 1331.09 528.293 1330.12 528.462 1329.12 cv
529.074 1325.46 529.305 1321.74 529.223 1318.03 cv
529.065 1310.84 527.525 1303.79 524.896 1297.1 cv
524.28 1295.54 526.933 1294.44 527.602 1295.96 cv
530.699 1302.98 532.526 1310.36 532.869 1318.03 cv
533.067 1322.45 533.123 1328.03 531.828 1332.83 cv
532.318 1332.91 532.804 1332.98 533.283 1333.05 cv
541.887 1334.2 550.414 1332.49 557.818 1328.66 cv
558.236 1325.73 558.584 1322.79 558.47 1319.74 cv
558.248 1313.81 557.141 1307.7 555.16 1302.1 cv
554.68 1300.75 556.793 1299.91 557.452 1301.14 cv
560.494 1306.82 562.356 1312.63 562.737 1319.1 cv
562.86 1321.18 562.875 1323.43 562.711 1325.7 cv
568.456 1321.69 573.232 1316.3 576.426 1309.94 cv
576.708 1302.35 576.992 1294.76 577.299 1287.17 cv
578.798 1250.11 580.031 1213.06 581.075 1175.98 cv
581.597 1157.44 582.458 1138.92 583.129 1120.38 cv
583.404 1112.8 583.617 1105.2 583.882 1097.61 cv
582.826 1065 583.972 1032.33 592.178 1000.66 cv
594.826 1010.07 593.099 1020.93 592.422 1030.36 cv
591.544 1042.59 590.375 1054.79 589.194 1066.99 cv
588.903 1070 588.611 1073.01 588.32 1076.02 cv
588.249 1093.03 587.351 1110.06 586.825 1127.05 cv
585.678 1164.12 583.85 1201.18 582.807 1238.25 cv
582.285 1256.78 581.787 1275.31 581.241 1293.84 cv
581.022 1301.26 580.794 1308.69 580.552 1316.11 cv
582.013 1318.88 583.916 1321.38 586.52 1323.36 cv
589.764 1325.84 593.342 1326.75 597.372 1326.81 cv
602.239 1326.9 606.3 1327.38 610.862 1329.17 cv
617.167 1331.66 623.235 1334.14 629.852 1332.93 cv
624.156 1327.72 619.91 1320.89 617.526 1313.52 cv
cp
f
641.328 698.305 mo
642.702 703.073 645.15 707.706 646.476 712.509 cv
651.198 704.107 655.975 695.736 660.765 687.374 cv
661.48 686.126 662.254 684.898 662.895 683.609 cv
663.231 683.055 663.494 682.468 663.683 681.847 cv
664.46 679.711 664.182 678.589 661.734 679.55 cv
660.31 679.193 656.143 684.296 655.485 685.051 cv
652.172 688.854 649.663 693.165 647.954 697.904 cv
647.219 699.941 643.917 699.85 643.599 697.574 cv
642.64 690.692 641.719 683.802 640.896 676.903 cv
640.705 675.31 640.833 673.086 640.248 671.594 cv
640.277 670.06 639.348 669.26 637.459 669.195 cv
637.284 669.999 637.212 670.81 637.243 671.629 cv
637.187 674.625 637.509 677.67 637.849 680.643 cv
638.533 686.614 639.662 692.527 641.328 698.305 cv
cp
f
637.459 669.195 mo
639.348 669.26 640.277 670.06 640.248 671.594 cv
640.833 673.086 640.705 675.31 640.896 676.903 cv
641.719 683.802 642.64 690.692 643.599 697.574 cv
643.917 699.85 647.219 699.941 647.954 697.904 cv
649.663 693.165 652.172 688.854 655.485 685.051 cv
656.143 684.296 660.31 679.193 661.734 679.55 cv
664.182 678.589 664.46 679.711 663.683 681.847 cv
663.494 682.468 663.231 683.055 662.895 683.609 cv
662.254 684.898 661.48 686.126 660.765 687.374 cv
655.975 695.736 651.198 704.107 646.476 712.509 cv
645.15 707.706 642.702 703.073 641.328 698.305 cv
639.662 692.527 638.533 686.614 637.849 680.643 cv
637.509 677.67 637.187 674.625 637.243 671.629 cv
637.212 670.81 637.284 669.999 637.459 669.195 cv
cp
635.476 693.931 mo
635.688 694.841 635.905 695.789 636.134 696.761 cv
636.249 697.247 636.366 697.739 636.486 698.236 cv
636.728 699.229 636.983 700.241 637.258 701.258 cv
638.218 704.819 639.413 708.452 641.063 711.628 cv
641.535 712.536 642.044 713.406 642.595 714.227 cv
643.146 715.048 643.74 715.819 644.382 716.528 cv
644.456 716.61 644.535 716.682 644.617 716.743 cv
644.699 716.804 644.785 716.855 644.873 716.897 cv
645.048 716.981 645.233 717.028 645.418 717.042 cv
645.513 717.16 645.619 717.269 645.733 717.366 cv
645.961 717.561 646.224 717.708 646.499 717.792 cv
646.911 717.917 647.349 717.9 647.741 717.687 cv
648.002 717.543 648.242 717.313 648.439 716.979 cv
650.507 713.467 652.565 709.95 654.616 706.428 cv
656.666 702.905 658.708 699.378 660.742 695.847 cv
661.726 694.139 662.757 692.44 663.765 690.73 cv
664.773 689.02 665.759 687.297 666.652 685.54 cv
667.229 684.404 667.717 683.229 667.934 682.029 cv
668.042 681.429 668.083 680.822 668.033 680.211 cv
667.983 679.6 667.843 678.985 667.59 678.367 cv
666.37 675.386 664.08 674.786 661.717 675.313 cv
661.438 675.375 661.16 675.453 660.881 675.544 cv
660.603 675.635 660.325 675.74 660.049 675.856 cv
659.636 676.031 659.228 676.231 658.83 676.451 cv
658.299 676.743 657.788 677.07 657.308 677.414 cv
656.828 677.758 656.379 678.12 655.976 678.483 cv
655.529 678.885 655.093 679.295 654.666 679.714 cv
653.812 680.551 652.998 681.421 652.221 682.321 cv
650.279 684.57 648.572 687.004 647.076 689.571 cv
647.076 689.571 li
646.715 686.907 646.367 684.241 645.994 681.579 cv
645.428 677.539 645.231 673.031 643.956 669.152 cv
643.164 666.744 641.546 665.231 639.787 664.657 cv
639.2 664.465 638.598 664.378 638.005 664.396 cv
636.82 664.434 635.674 664.895 634.77 665.792 cv
633.865 666.69 633.202 668.024 632.984 669.808 cv
632.866 670.776 632.789 671.763 632.748 672.761 cv
632.522 678.252 633.392 684.12 634.516 689.575 cv
634.823 691.063 635.148 692.52 635.476 693.931 cv
cp
1 .454902 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%Title: (lovepets.eps)
%%CreationDate: 3/5/2020 11:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+]fC8\5^97DF-A2L')"g3'EY3jf+P>q4#[7K<gN$P^c$jndqg6VV)+j6?]33mi;$-H)b3;XKBOrJ'F;s=Vj#RkO\Xem]
%S$FY<.91t,dNAKn=a=&]nCnWQjFU:=mPd2iXe=aagY&58[+a96lqagI3q]Z7N0ekRf4r-_<2SfCDIJKFUgL^`RdUH_]%9LkBo*bY
%9,d`.%AR;4r(QM?j\[%e$@\lT@)1R)m_rT]^*J;ba6JEfs16qP[(K-kBRF"$Y0N0GVCqX<O.CgC[Snq$X)KhZo.+.VemW?kU0d>o
%Z^/HWel-3UCh_?H!u@'aOSHZ+a]@%:N_LDk7GS/4iFaI5VDPa,q0<J%:fmri8ng>V<qlZ??ib(H,p8>%7DI]\Go`NEKq(d$WD-=3
%5<[mlGMiPg.a*-AdK!<>QI?%G@VKQ288W+-Q.C3KLt2M!WrHQjp!!0QIZ&9sBlsd5^OUAN)n6eNERCoaX]LKs#Dd"hS'BT*)O11=
%X;t$nei[D\$s3;MHPF0E[GM"Q$u0)/`cfK3=*`2qT6NSKPWbEfEn9k%`S`V)\ga\;Q838.-)FW:8]eClV(C@69EP>FArN'c?CV.r
%&<iU)VK7j>ZW?b1g=V^&$+VVO&f9-:<j`phWi;dFp59JR>I"4:ps7n&loQ6&+V9a#bNrq:lD=,eJZhq`l.3$V?59H;==HU1=U8%4
%7)+lU3Z^%UQW.A>T;g&\No,St^_KF0hFNBP^MOp>B="<IWIhnTXK(8_<FofKQ\MhTL4S.h"2>]XFu'QnAf.[$-FI^WA)#YVL*%=O
%gXscZYoA//hq0NM`GX?[%aAVU9K%fW>Sk_tY$o[rf>S6&b6B\o)9<41[O+(o6cF=NL#Me3]-1MU)nR8"!aBgXOi$#.#Ecm\KY&?3
%)iT%#Du>>\iGY6D&W9AC8E"L(*C!pfie=EgRPG/Q)kr)%Z&e3[S)=n[cR@%Oa[h-#fhdDd6\'a6TO[:$n:FZ7$i@bXLa2o=W>Hit
%k3O(#*.G\@Lnilb,7PTN39"lSL'TOp^u$,VCr5)^%<9>DN1!@E(i^Dr\>G>k!a\E\?l]?3d2onSiX+<mlkoj-49LSFbiT[W@pR"`
%p-Ah8N$<j1S70]<,EDO<].mGY*#W&7@/Q"4&4%-cUg.RG,9L-B8\,IG+Z)OR#^@[O9IPRW#i7?%1\_gSfuf7u"MA-$^lO&-h8K/+
%H8Ydcc[IkC9Mq3g1YsnhYpirS@A4`U58s^BL%[u^-AWE$!L%W!"-FkWn49"$k""2B[#VYI0F;dJn;&=k>QM-4R8(n[U(PEfr6%g2
%b^U=\SVmEP+&-8&UVH.#L?gm9MZ0n'dq%@2^[0"HfQYLG=1@scj02J0?hT]*Yj]tHp&i3R3S"oCAO#uQq]>]I5>q9om6'qNIl%)0
%n)>;`M`<1i<n#lpKg]RUM>s;lh/Q!`0CeegLAocSF-at_44`W1I._Jb`r/@+s,08Ep!lEUbW=e`L"15uglh[Pb.I9`%lYl(ZR9lU
%Q0=m.Gj(#oRQ4Y.ZY%Lfn>rM['9Lo=?`$!LHiGOFL;SOk`IBu]cJQ<]18.Pk)NMHEj8tncW+HN12::96^u(]"a;#PPCVcGW5ot21
%fbApGooO:Um#0l-^J^@r`ZXD`&K4/b;N*?f);gRri;Wh!>%KrQa%[SWhCD;ls7T)+^qlD$F^PB.aTR!s)$LRD?(k&u\s[+:$Nsn,
%L576U'%::OON@oT/d/,?pfXLPqRM[eKbB6W,W>0>,T_i'4(dlR@Y<UC2'WA<U2a++&t=uQL_rl)LQuBk)tB/c1o%7I/j`#'a,,L_
%6Gn@t?Hu7V&<.h8$]p3WX4)844t('R*cuM7hN&8??73]n67.kIKO?R:?&M*_N7<hT6.Q;k@]Q_)-3B7N(h/hqo'Ea-"c0.Vld@.4
%'NlfGQZ4Q/8d8X$j-o4moPs43@o$>pj&VfKgKE]75)p6(NB+82be$R/f]m?0WTOU=bM8iF&WY?nnb*rl3\+j*XLa>&OD&e#mLgl!
%h&+I-@U1T1hh9W/UjN^K^g0$))duDc2C&M_TnQ=cg$mdmiM<PKR)gI]`o2T*Ki&nN!XF[gVq"`l*Z@^T9,--6;[aBU7]QG:qP;E5
%BpcU@@jT>9T<(O(`^no>b<"5&%L6sOp#G%bf#HeaQ9i:uFBsHN<=+LOnqF1S"m-2(FcqN&6aHr4,H!CRY)>;Ke1`\VAKjP]>U$mC
%[rfKeM3%]IR;p,!`sqL"1oB)+<$CFX-djbDk>2N-:idq*QsmuOQ4]2jDmI*41)IDHpfGlK7:hG-`C5NT65EZ5L"8g@Fc9nlFFXZ8
%%7e2YM&QUHs2uDe*ou4hMTA7nbA_/o:th%ojPT2T>F0aO"saW$:iN0p5Qkb0WmTs^3@Rnr'Fl?<)>T*Fj"2DbM22%B#$\<RGfU_c
%q+*Z%pc:1rMXj9$l(a!N0P4sR&gj@RIb,S%OG#EHU_BZ$iPH-<J9gPk(_fZP3D!@,G'9t:3MGq'+kA1G#[n=@9BoRjQMtQQn_FPC
%U-!`8qIC$B0WlHQP<=lc%#[dQkbo,A-7>/*4:Y^--D;QMMutdej8ha.Tp&rrMQh6?WoCi/1`M(hZ,AE-lrY(GUFKmS@*i;;32U:6
%n/'ak#Fhb,jdP3Z-VR4%=6EF-,Hf.2;Kk.cN"L>7,_H:G.]ZjZr$)nZ+j\Z#i[_i7C2jON*5]LU8+;7+S_uG:;b18RL1NmN?^rT<
%JMg[iY&=BrESa^rh]n(R?q/0U+V=rZ-HiZ7Gk-VN02UYEe>!:k\=G"+K`lFb\:RtJ9X7nmM=VRrZi=G^9$nEt.%#Eq;fRfWnf,aA
%n?>`p"QscVJ_5]I[NhStE$@2t8R3YYjA2-cb>T^QN:A`d]R!V'q4Zf;iG3)$+IRtj-jc(Zi>d(^C\!W)%i'%m-H&7l2#a'\#"B)k
%d6Bq-0,0cP6p5E;UDYF,AplsZP]@683crLuf1)ag\SMR.PiDh0U%hr+o#8L&77:S_[P$'NS8Phu*rHrY+-tXi:)K+>NLbSG@U[5,
%RUAC:H(p6gE^Y"5S:<C_Z&s^g%aR_[3"JEBr>'&<hoOAB'H7+F&/.)_`5<oNorn]lQn"d3>j=^W@_cZ6;N)M@+aVp%EH;^($"Fkl
%kf1_'r%Eukc+#ikfELgtM/72Hmt[c,dJOTD9IkdDLbNFO-H0i((<OEI.%%,p&VpaTJ:M>R91udsai/Z\'3^j:f*kAK7Dmc42.6hK
%T(`<]Lc.@DN>6UFAZ/TJ4q6\%D_Z*n`"0k3geG`S9O'P:=ud1C7-%lEA*Ds7GXTs'0PM3>&)js,ett[#P'^qd;-#EqhJf_3.rhf'
%MMOfdClKJh](IL'!@IOY-Q[`Yr;$g8?_L4<mVu,mnSAm@Mm,e6p5G(r'sjhS.Dh*oWtq+_-r=");V1q-b$J<oU^]q):LqEO)iT=;
%Z<M#>bt(t^Z#Sg'L7gf8a,<S9RPbkNB&,\+UdCU6gfW3K!TIgEi'9I7M)f_7*f#G:AbJ?''2rDr_9;^.c_6bM`Nn%q$Q-G'X;eo(
%AG)r/@q4(14Zn\%RCFI:gn)\J_B"Vrnp(-T;)KC?$5"07W'Qq6l+"8XikcTo$fT#@:#_$M$8#m('3N(96NkM>KG2KMj1MlSP9"Qa
%j$=TI9ud.Y77M08P+AFsMH;lcL6)<U%gdtY(P9D\/1c8^W?-uUZ]QpN+"flDFAXRtL4MhL>rpr`(6N["P7f=#.'CRJXDUdq"U)J1
%4D64"$DnjT(ZX^QnF,<=K)Yoh&S#6XhiQf&8$nK(-b6j"ptstV*HjKE&):GGr9rORr]Z!TGPq=kXe$J\CWX9NH_S8/GU;5qj/p]+
%@lC:GXm:3V1qQKY]G8qJCOS2<6K\])Vq_-%h>^1YQS/CW:i5-mfRNhf"Zp@&T%CPmnurjNRn&H1nAkQ0ST8]2VdB7s:=-$?jd/nY
%='sq0>&'=o@7V,;?4#bEmpViq=)G*7R*_s\/O.5"_H?Xar[&MTo.*,-*_jFRo8W3f/SN-NB)Rn:G[Bt[?7SGl_?j#<hr0M!FGcs6
%Ndg/.U,i0Q]*W#A=f>-Rr*qe+:*j'.UtQZQK%dk<k=<n17>B?-?$_MVBVkYlrCJd\DZ*>pVLM@tqTH4:H_$X*VWKh[m>q\ACIDU,
%3bqB?H.K%HWn/i+GuH;k19GHk-<1J+=ucD@oAN=3F*%aZ-<[_FZ[NY=WpP,B9YBI,aAX\@r5-d'a%n%1pn1$UERnOi)8q,NkXWF&
%FkE'C63$DV(60<A&tGJi<=1%HbcisN:PJ-(jr%Dm0KELCK(=pU:h0A:IX#6/:9%A/'G\_pWA_m!GG/7.plTFuod2k^QR^d89qO74
%oINC/lBgGViZ;lVF1a/);jg+fa'm.A=2A$WVcGU]/t05@0QZkH-)Hi*VYnL755aq8.;bK=NV@ropdMVc;`FLg7C<l`@!s<VZLF'[
%fG\@1>&*.Se*<?QSr[=ocpouV,t=fN?s$[#;Y\lZ9S#u-?2j[/RJ*hes*%OWCM.Z"b66KgYi7@8PuB\^*ls9'$V[?&B'fNe5M;>S
%rnj$4nArt+G%CDeG3%k::<rT]b/<2TObXf[p0!OIIsB',?WIm?>>\?Z[.$:$3^4&Lc[P20r/X%2U'A#$E%?4Q<@+#!<AdcX%FnE0
%ePS,;%LuR(1`7Xi1gMmo;mS:cNi\PqnsZW&3XjAXh9\mPdN(KGB6A`/G7>E*dLF*u%,5`[XH>;D;_ho_2)Wi:/^lTu\nNC-8X<hb
%Q>RT8b_;=eE`V%_J:sr)g%_)!@frLm]H]ED/?LuBDOEbVro'J2c6s2C9)eoJWmMt\T%Dp$$Kb>JJGsiRH="`eO?^@f4<3]8$V(C2
%#7_[_M[mt;JYG.F%LnI`reJ//.<(q"8U+bh*7*d+^e*0S"qClV*Q*6Si%XBqmUUle=l=$qV*i?+ga&Xm<m%oi=27PDn@VH^GlTFc
%a^gp#SZsq^`lR?]/YcnlOE/H_SNMFnFY]!;fN8K#$t,^iW5(sWO_iVR;$!JuFp?T8fd<q-#H!.A!rF:e[ISia(.?$EC_.'i6q"L@
%&/N6J/P+L<4C'2UJ10(n;C2YbLc>[-$IUMqP/6(B,*Rd+A(0D`Ob!USA/*59iSq\F5Cu8!"&qP:kqM<Tkl=EoKJ?GfG?K-@,?`@p
%)mmEa^!K#+'OB-li,r)DJG,A'7iLTTX@^5)*)J_lg7W@2.$=ou-nDH`(D9K?*,q6DRoZfc[L6Kd5X:TV_4Z_b2EmB/K['V7>sLs^
%(21Jj"'B"5CE-_Z(0HjJ\:CXhlr/Ip\puprTPt<q0L#bq>o\8B[,4OFJ,!Ya7](98VBfG&i%QHM$MhP40[MD4g4ODVp*9b?*>1>q
%"AU1m@j6^)K`YnL^nJh`+Dsm2np#@;L`6[?MORA8L4Y]r*Qio/ZbYSbL)T(o^qbj3H%(j0];2!8L(;QEf;8Y.Z67c%!=&mo$\IE=
%E.CcX90gnKK2BHBpk*`6Rg6CaJanP*hT>q^GlT36EYfitam*U@Y7<$kYQs'q%<_`D/@396\6t:^XN;Z=Y``!EJJ(4!ZHZM[Cb_lb
%91gH3h9\d[TXZ=jZ&,nlTQ<;]XmnWNASQlqKc,ZfB!2?<4YfQ:%QZ'Y@Y6Ku-&is$:J7uCfa<*\2-[r4i;F@;8tABW[LE\3&rSXH
%`[!+fO_dD8F:;/#)6BBR/tE[rV_AikZc,ba8;"IX@dF'BE5")PBo=%J[g^OH+)/g)+^'JXC`5@(5hFJB/B=+WjZ*SNm%[/gbTO7*
%"k&hlfbT4l:@"Rdn]3=cpH&S"Df-\phdF')?nBq$4W[ftU+;FP$1gL'L"o1Qg]fctcrFc?+NQ;,5S(amQbkTk?$paZ68K%d/B(X0
%,m,chKjSj;J=.+%farb/1X;tF*eLA"&8"98QI3Jb@0cmBQip/R"_SJZ`,ZDuYV8a.1^_2q$H4b7N9/I(:dCn>ER;fY5ajr-+iE`G
%%1Rp+%0Dt#Ae6M2&BH,)aG*/-1^dt6cnp8m!2l[@TneChLIih&fJ2=iAfUh,Hrb6SiF23X9P"VnD:gRNc=AOD68Eju6V'_-KbLu$
%7i4o*)<'NV:D'le=WqLQ5[NoA'dbNGnq%Ll!d5?bK1qrVKOOb.bj`DRJlkL`$qcK'K6JIrOk]qZ89S)X+3@;(5sg<ZK+ZBT/kO:#
%jO(G>i"\U<K6"q9%8%G#07uoc3%Q\#[cIoX:^/^0@qOX14Tt))9/gR64cC]aUIg=j8J<ZCkY6pdfqF>!:F>-D9+f9udq:0V*a5R,
%p;.0u!/qddJh*qB#W]s]3T,`uDsE(c,=@cLVf,rjif[\h=W!A+K?HS,#uZg8KQ7&J1!GZV6Y2qJSk+:"-b]ZfN?4,7+iagJ473B"
%%Pq9CSdW:,F'e?b81l(&43SsHiW8?b-;/l9L3*G,4+8F`Hg^efobmXZ0f<S?:sqY\.CBd;<A'MYi>7n`F@&(0A/jVKV&CWum@#"u
%1lu.MAQeI"+R\4-LTHdhJ&a)VPLVe:W<*]ijT`(g3>:ik@"ee91ZX,1=CNsM->\bU/24#1lRaY?5Y?`a"V[&t*!!/DF)=I8nmIV\
%@($M)Euo@:'ln.!ZLBD5h(IdR!#ULp?k$PR"!KXGJrnc!fcqLE4+p:($BV$Uhk<m(U`a$>n6X,MSjN9)L%?j[2lK?A;LLg)\j2;@
%!E]_[Q)P+@'`aNiIYmXo*9Hu+Ab[T`p5(SK8='tMlo\d%P2tspmmL<*4D+mnbE7fFPYdd4;J@\u2C'h+JRr;)[_ibq,>>LVSo!R<
%h0-T^@ENF`d]N)IgC4g7#?,Q&1(tp.#J$T4*&:nm_83it5q3n:9t]-_$YWXI_igKWA[rcqo,K7TR:%:_OE/G!6/kbN>V+uEnH:ZM
%aFY`A1e"23>38EI67*I'Z&jfr9MCV+SjJ/Al*b;(2N57ci<NMkFhH9+jH\Ao&5`Pn]hie5Tfd1QmEF13q.84##q>Zj09G.)HkJMD
%G^\dVCE;4'E%CjVg4jNa:JY:"AY20LW[6GmctiTME,$c.qIdLmJ<QI/VphYPFZY&!/[YU"SQ<r"mo-fsf#fSZ5s:I^ekr1US]"m+
%T6OWQ:9FeCj%4(YcF)/&!ENl=pQ#%:e[g-!Koi"!)FnmeG]hRR@-[!i0dSBIQ-!_<9Rt@5fg]BaoAV1r3B\(HUJ%N9]^[W9af&1^
%$#m^Udm=7t:'-IRW0TM(#r(?:AfI-W^Nt=W8Uufa\<.3^=gNsUDX2$m2-PI@>>%9ld;`@6<@6bSkgn'P*UgV4`1k:6:CF'i;!:k?
%V,=6-6`j)]E!PDK\FoKc(31gQh4!4Lq3039UF+t8:-K]UQ'V'aW*FUbhei2H\q#&=BAD*'Ts5JhJNOEpaYAobSA_cOki;Im_`"^P
%(hHBegbSSlQE9&)H]ue^RQfP2RfJeRla.3Q"Pm,#5@h7P-=Kaq%S^59kU+8,h6r\9?%*G$Pab>N?n:DA;EKe9DNW'n;RsM@:0XN7
%_'5.KUiQJF3XN01OikpH.T^>05i::RT\@+Ea]sGgh'/2TH)%jijVGD^,+"eH>]*KN#C0'",\B9ianXcl>2dIO#=%XsV(:psjZA<\
%q6/j@be[+jrm/0B=\X+oST<$U?D[C8-;"X)h5>tY<NS@*;uOtBFIH(BU"=.jX'R#,)S=[_RhLT^3Jk3p:XNGo_')D&:nD.OOA%fL
%hKf?j9&&fnd=s[4oeXI%0"!gXQ0<D#<Ui\1U#aaee73g::J9JX(qAL0MC!SrooGTiq,i^Xr0[s`eo+t0rY?E^pXE>iPhsVo763^u
%KLg<&?7QsOg)[AZ"KT?^;o;C'NaVk4B$g&9KO?WI:(rX^HJe+#)Z>qO."=sr<$<VVA(E._H6Oo'QX$C*A"3eS7cu%"hS/OW^aO/%
%4lQB_/q]`Weccgj#%fbKpi"24o5g1,egs(<5j_TH^^TQd/^[2Kg29Cq5^ICrAia>69k&QiVeCLBn6m$&4ZLN(@&E)%)g\W$kGIZk
%P$CqW/$J^eYEr%a7an&ZY8>LSD\7KMI-Y&f^%68?a/Rt-p5tMZ)=8\N[/7t+h[7?^/t^)r)g<`'-+ZHRjst3RE1$T.RBf+TbHuZs
%Y6:2HB)b%AH#XqT-uA&D4si:\i2LkSXJME)%#U(oibc50o9*@;S\s7L^>*Ih!/J+q-C]Z1GHgI5NI$4Xo*/R5Por2V_),\2`b+(d
%h$;t_T,quGo&S69Gl9^LgO6SuoKK3tJnmjIUYl+@'/\0;n2\2j2A$m??87U2=7`.'$1:Gm4PS2%><L[?HVflgj=>`[g&@Bs(A$O1
%k'Vf5;>1sIm6T050;eWn73\For>S;q7l6;mXQCiJ8:o(0?_Fr#E60YXj#%a(Xl.gp:%q5^TFD<t(4K#1bF3XqDfEd^]hPZ`DUuI`
%?hYM1;m/3J/k9aX0;VPK+6B)TPBfbBPD#p0j%LDSR5aF<b#!.hf'=ANQf'c_\]>PLE+WE#l7>+UHTI0KZYeS4nRC'L4itU;F1L0u
%K%eN*R'7jWr6nh6CYDgi2LI0oc+]:0Q;3&XpM@j\:5cCRW/r?T]dLqQ0!*[3d-td7]UoL,!Bo^mXb7V5H;9GU#m,i(8[o>UZu*"R
%JpNTL>,g8`n>IVFHa6POeWSa^>FQZh;?B"l_Y9HE.J'iodm>?H?k>[T>l4b60G1k0rmO3>&Mt,VSl[CaleO;ilL\I"lT?c+>!CIQ
%&n"`m=$+t$M=:ka:,TBI)V'-X7VquT#k#OKCn'#8:6_/;cq=&s:6[$FbY.b@NpfA-`.j[]N;I]E8s2?@(:U#Wg_RAnr2/!)?[?AC
%baOH8EBSAl01piCE_c$k8L.9AIkStCL^3@s]dQI6=knq@\/48an2C%3?533"E%ag-,;Sk&I;pp_N2?tS3&<3"ot91?P)'p\Y3PcS
%?Bild\ecY!1@q75s5[1KH+^%%&MNT\25\L=q;+4ed2cO$:<_VX'_B4uh[7=Z+h1VN(HP'Q3SG//nfP"Gc(k;2;XmuXoJ?.LbO430
%Qg_H-begO=`NC'd]9[sM$bNjOCC@a4(NqCfJsJj8G/(mO+.9^EC(%*9hmR9X@-q8(CC@2OY\O2PWtrGoF?,'@gTsA4"=3cSQXo:E
%!oQD)m]K%A6B)V>@%g$t2<p;A>tX>fmRC_X?R33+1"LPPdF`s/rEEY2c`;Ql[I]j]o5Y2a4O0BH<uY_c;JhAA=(T^K:efj5j:^j+
%''hV2<k"R.1X0I;k%\6A3QWlgMiDGJZZ/>q(qCU'@Pa7JTea_#06TZ"L=q&b-^<jtn<CS\81@\shbjg\n%`T2])sEY^ZQK$l"(u]
%g$rY)6DOGN:;;9%d@JS]\VXWL4uYFj-U[(3GT6[1>b[V]-d"ptWd2:8PYbk%h*.0WH8B5%*e)Z\AZ,O)4e&;la9q:rdL%7u'A\\[
%KdP(Rlnl,'/ccHWXss&%TM7._:4P\E"+31!qjW6LU[[Wd6(T,-GDqJnhC!WOC?MJ^GETK2\ak`(F"27m,Ce2)Mtb([cJsV747[Q4
%D?a9,l*n2%]=@i%S(E.fYjpYQamqU/rd-<U9<u),4!obf>lS)7ruFL=EW)4K\%)E!$eKkWHGh>LMR8R$P$D8`S^GU2N7U]<f6eCd
%Hl(C^mi5da's0g>XjDE@:J8cXqR'Mr@kqf,lLdjV3c(+$j37_ZoadEnAs=DkW`CV*[\"!IO=E)MR"g/(;i;P,R.>-q!o[$TWU0"9
%j0imW4Y<"aHfUD(A$i1r/Lk9e<?YSZ\p%!p>?&]3Ad8seI#Bc5U.k9ak:8XG/`1L55a:L$J0V4'#<UhD6-\lb[/BJid./)"YA5fV
%B@GLR-UBW=YJI]$oqkjKWPoNO!h?p<WqC7BeGBr,1e[J2Eg\7UV2Y*N:&e2]:!'Y.j+R<&\J0BE7eaI!Z7%o\FRc'\oLfaJ[!pbn
%"&le[+bA-_bjSBU)]UW^C;lmks4N(`ohGc^6PbBB7H%fTGZb_e(58)DiFPl2=VP0h\m6knYegdO_GL2B;0\Mf%!5?k\P(mmHH,s`
%gugIL"f)2qGilShFPe.=]m&4)go8B#-lGb.1<oQ*'1k(f=DTlM)`Z(<AeR`obaA(J-Bd8B2Z$hNhJP1?)dh\]V-(EPmSud.gDA.T
%L(2kR3R.gNB&,K(LRjh#R$B3BjQnsm\abZ;*LQ9H%SV*)lXKUb`U6CJ'%?m)5"1/EY8mIB]VO](4dDXIf;Z_fq(iZsbl-Sg$!n<K
%*b@]cm`G<HHD6Z-LBMO"V,"A!*]%`JJkDm,G>K5^IQ=)nSi<3),96`A3P_h;pO4FkZc8F1qQfHVL:51Mjt]<YPkC<`La@mMVAPOC
%6R#*H35t)8b*E"c%=P-qBgn3uYiJ<^SER+GhJ[/MW(E)]nWVcs(j9060kMOA0G\ei3Qc'u^5cXXK/uI7*#<[URE]j::$3=8N("as
%ei:"7@k?m^M`SideM/b)mWaTV\@V.\R7mSLXY8-h,!ch%?>Tbmkgn'P*Ue?L#E@c7VhJ(p.!2J[d\u_2:]?=OMUblSgj49B$b8mQ
%"8^ST"P"dDCp7mm0ajnOcAf^*"?Z9]H#;GUq;8c4UQd$Xlg$dYf&FE5rP_5no<lum@\9@AhKld1$q][dYFOh[8M#<Ej7^48$L12L
%I-NUA9^^HF:J!\8@]uS9R/Iip8t')Vk:YKnrN="5Z.lkTej(tP\L=u?rF?$`dsl`s;490dV:rOEjL$D#:6pq?7\MZ\SLcRG]2oUZ
%B)cJHaOsjZHIdSKDYTC_dg]Z@OSQ*8nC7P2]gpWJ"LkQcMX_[qR4-(!-D^n;=,N@DQ!4)Bj3pFL2rL5C\_OsfPSVs-,+DeIF,Ol&
%hot3q\Fr?L2g`UsZFRNijq;L1YfPs=.@[r9[oOf:_F6Mp8EUcQg`i:.<0fs6[n,[!aID``8Ec3[1&EEURij+d\%Eu`G4tMfrBB=a
%M3.P:jE((_V$./ll,AAce'GW>5!V=[YCW2?I3f[+@kRJ?R)==uVMO%+0jan("rYl=#1ap<B((`9^8cITgRT$o$CY;#gA/:MW3k.D
%r2_3D'(UM#P.QCNa.=558r1g+W0*!i2j[_?C\u%$MO_#Q0T5.&MH6iRRrE!.QYjA/n&o3=;^cpJ!eHs"dh9#02i4-VYONE\DiV.F
%ETHs$9FJT<>iT`kbm"W'$[\&lY(+BsYY/r%:V5A]GU5SR;"f'>,d;b+NPt;?SK#>.r!gO;I%q?"_/;ko%DF,>&'+NAbuC\Lb_c'q
%[GFW"I4";@/UYVC9jphhh\A?:WoS"lP$Lr=pmlqs&NJ`%IP.D+q]>J_,(l;D%.<bniOOdT&d6qjnN0.nK0uMj?NR,YT[!Mi$l],9
%&<)>pJtb\1oG`FW783?7"&e&<4P)mHiWeK^YMJ(bCfgg+MdlFaZ6k,I^E'^j9Um!QBj0M]"G]k+om:Z)AfHLNB)$P,<]EBGE'('q
%%hA1&E(F=0S:.U)[Aode\tA1D"`rcGn(URX[;+m[X,]js(X@#T%GJZZc3>A&h)Qh@_lPr?4(]cH#<DYkA`4Tkh`&hj"aTXD_-%4n
%IZNl`++F,g.-=DOmaiu!-giQAQPX0KmsJ>U9Jl-rM&-!4cFP<g;\D<LI0s1*F-/X5d5B<k*j#=a]<4L<h&^VRf0"A^\d-\1fO*gE
%(3$jQ>qK`\N^IWkc,BPfq!RG`+2@i4\7t6Th!^B1GonrdfLuk(c2913^TYd:'m.b#V<;9bWVpnNai(BeB+D)0gq-eWmLW(<]Lfn3
%#q0f4hmV;5]splo#J?IM;3R3Vk]nf@kr>FN4A@eR=u>sSomJXKD_$:[XgW[W0kVO\$7i(YQSCPX<R$#a[/S_,HWo2O+RW<fbO%2[
%(NX:[dUl*D/];IS`9_G,`CsSTZ[%_>bZ&KjTbI_R#qi[!7_=iE9aW[)o67o%Io5m+mD*cqib0Z]duC.>V2o'?Tj-BD>&BD\r2RC^
%DR'+&[oiVV#k%I#U_W&`Q7hcgEqhC8C=BHPnjUnbLKS;OThXC8nZT!QpmFAGpS(7B/9^HoeqN!oo_Ka3a=.?qIO`h3[Vo'A?GjDK
%>H+r0).8tV1<%ON]iqOaboAe5=q$#:(B!TdDMF\<>"b\P5_)6U355L%&b$qJUEEh%pH^638sUb!O,(SiIer6D\(Nd>eLBF2i,)<2
%kDeCiK>+$SY'p@jnA)&P!m,]g;F2j;W7IFq5O9YlcL@11AIFR.*k#=hYI&1=WX3rf>17?+;"9/hft%2+CsA7kN=UF&i"0nKf@uqm
%m2/$8Ksi'gMUZA*_^?m5rW>o%TJjS8AH7I&#Y0`2Mlr&XLnQ\o53H7smrWr3aSF@l+CG(d!Ah)E/LhA8V%AWqIj+K2:]0ato?o<b
%XhLKg_"d0T'_CMiZ<+UHB9of`+e.H(F4BC40U'*;bM`McV9$6.kL6l=)(#S8f))"FWs(`)!Of)`WZ=jge+Ks,K7OAV8r@H6bVHsW
%fcd5$s6NN7l>A&NL&KJtU<&K9]C@Q@T0X,;qTFV1=O>leF;PSk'C1)S[\D1>U(OC.Zm>:lP%7,kP0qbgM[1j!MQPhdfebNa9X?,$
%C?faK0[B$!HAo?hUD](hE0+U7aGmR.aY88_Xf*S*<\,)i)A1HIVQBn;`?^l^UZ$hDK$ZRcZlSSf;ZA#2DV91=$)!ubV!&57R"Q$-
%-:(15p^OQ#Yut$p<epaAXfI?%-F5O/7ViK;!p7<(7?pkO%4BU:+p9X,Vq[=fl*?%"Ua=]U2,->J!GciUT]-JK`i'YJVBCjt,*Ej>
%VF[.n-o@?0!WC\^(+5AY,)Ckma[C&$RQY`VJ;1$1ThXjG3]OGp8-QqoF?=$D-6[Oj!b@*YjD_K#+J3V_i46_'`/!YHBM4*-VA>-q
%&o,##V,&g'M.mt907\\Q!<gRYP7Rj8das<=CE'^BBV\YT<#J8BBdW]W0Zc)&:QpkufI!A0pWP$/@<=Ye'?m/=ZGM-S"c#FoQtZ%>
%<%Z$^Q=H,/(""jA;O:o_k.7$?5Thoec56]&5_YAD1H((@CDI8]":Wg3#*4>Fi!bQ(!%^aQ/uI'a(a;5&@`7EW_+^:C*P+Y?Q9aCD
%NR:6`=[jZ:TY91a(;LDf=]Rq29@m1,A:RH2FbZtlJgl=l[crDRUc'H0$Kqnc;BnRe,I2BVD;*'M:cFS[9=@Lr)3@m]^LT_D>68#b
%\]U3L@STg]"p*_8E+VHBZ<@Z;J-2^8!.CA?MsM?Ia\7DMFpZ\0pk3%0((U6N8-P2Xcp-#l17G(XpXg<kZ#n!b:kMGM1hA89d\^K@
%Urd>q:^Jh[a@tS%cle0b?%pCs:g@CNQj[oAeX3112:\LjFPU!.T<XcGMNa%9(Kq&4d*7l&*2N]b>&'[$BD*!H"Y#aa/\4Q]=6.H3
%=C@7^&V1MSZ,+.I)Yp5:.0Kh,,GF^&8(`A@TEnbt%M=;mAf1gH"?[sO+?VMc-^'$UOs!XQ[iQFp9LO@NSX-?lUo@sbW?>tE1iU]M
%P78W[)-!i1Q>MBq%hK#QXnF_!:jd@SaBC)PYqB07)$!T6<ROuL22DF)A:VU^UCi6@1IkksQqqNAaJ?sJ,_[@oQ:uos"Nf".VIC]s
%j6#)]!(kD"331DX!u5p1oHZ2ei,I=Ri3!KVS-ip>feKiQ(6O:_6"B&3]VKF5*l:1mQH@BR8i/9@,!,63j@Q\go%:Bb`12i;Hn4q9
%4\gc[NZQR_"PT/4?nBc;nue@gAn_k#dJ\$`P5@4mP"Io!$6+MbVF$U)KSaMUR15<t'D52&88CQ,aH[AP.RmJYO_7XQLoMnY67)pg
%[DkHi+?C[HB\Nk3>X^n/$QYFu/`m][<E1fj6F/FK=K>h,nOAC)\?V\eH86aeNOkY%L_*a3m[<2kW0L;lDS%]ENi6U:";l]e$F`5I
%NXn2YqO!RBSqs*M_c41GZdEZRM;V9?`I)54WI,&]mi<=KkBi>j#IQM$^ag1'4N03XB#&L+r>J6IQXVc5Q=*H*jofW$DQe7Z#eOZ2
%!u3)I;@EikCl.JHi0Y[^$^96K5,j-aK(/D.HD^n#3FObHYmG6+llaqC>:5[m^`o.Vm1#ou1.GXAO:T3=UKArnY=bSq7[u`T.N,%P
%5ZLE[dRs:A7!0>]k\-Q03<l"VOQPd7j=YJ#9%<p.5d?aXWrE0nfH`&fYhY30?8k,;Lqu!Z=H0ftC.c;u.$Z-,3r@gpamh=D]>uOS
%JS.GO"-Z+1C)WIhdQ`PH/KVDVi;,Zo\J;EHPf^`0BPto*.+2!nM9ViJ.q#Mc;TLR+WJqssa4ul]p,P:T!h2Z&7u3mk_(:p<!Ef@,
%0r`8W.0U`h*HNC4:6&%L'o@Ml=OL$5r`S30+Y/^F+Tbhjp`0MX+RTs?!5:5QL10<b$Rfim;#c;)A<84U6,?TrgaatU#,d];ee:8u
%O#2(u_VIZLh_:In5Xn+9_f%a!Gp]P/KJe_#Q$lE-m7pHVB<['+])6$&8XA#N_U&'Y:rB:3?bF,*f/dXM%Wj<OFmG.JkI_:dA`[r*
%1ghU:^\1XMTcmH/+*)[L@2_1^V<NJFRX]"9;&//WbHY+K<\@Gq2;4DS]iKJm@eh*,j,&W%#)(@1Hb[ihW>\'4njO2T<sqX0rkt@d
%#nkX.@jVc"W]&!"nDks7TeFJ\_=,#ZC_@j/n,?)i`SW&cfS_:2QcVcq`S43%Bgr_1:L+P"DA9Oo-T;FcG;]RFnLQuu+4Or=r;BY.
%h/7Ra"UBH(k[AL'rAXAG0_sD%IiG!VV982JNu=&J3O%T3>.&I%bkS':92]Nj_Y7eTE1Zj;/4&cH7SNMdHmV%qbZ:>JHm"uON7*c%
%H1G`7#RK:.-;[>\I5cV<GA%O%U?cV<QeKRb_)TZAJe#^6-[qn5euE%P^3,<`)&tIh+U$IfG.1R#kVgSi&OV(aRgD(>I`Es+E:j_A
%A,gCRQHQp-P"=_E]mEIiVWRbePf;7ZaTkd>2+7JA="a6J8%TYWk%/CPYC4UK1lc?#W3uK6H*sZ6E>:&3FY#JPkm2Co.-5P460c=&
%GPkM70*.lOBSsc!3(J/7CNZc]Y>n?Flg[kFlC)U!8_CQgB':CScB0ZU"Plu+G#7ckIL9OS8tc'WC2hV;l0MBuC\k/4]3=[SU.7um
%5^*t57Z$g(i2ulNYD!p\!P6f:9HDR%cui>14fLO]jkE7$\dc4kQoaFhP>3&Eqo$c7`8hs^c<GbPDgh@Y7K:\/.UT?%]W5eLg(?&s
%CoEX<c7GuL=g.AOCDS0=XF</%bLLJnFl<H&])5=+:gn%:Yg`q=6+<8&JMeI_!IQ(.3iQ4I"5KGD"@VG&Dr64g8IUT\',TtJaB?"$
%"H#qk,__Tp_KXusY.NPuT/mLO+]icj`aLI/nnJtiZWh5>bSO4P$hU]DIIB=)%%?^M\eUf#pKP-NGGk;n56P]4Ul"YlG"1/M%!fF;
%PG&TRR4D/e=h-)6NFA;]"_E1>fLi,8a>X[`>.*=e3ZpIN\f.iV?DCFnJJ%I+'j?m1[$6S87s4,;\_UF`E8`[)%>9GAUPrcVZS)$\
%B3kgtT*-IDL;MH;%`;S!fGdZ]>=Z5q^@Ce`b[PSV+mLkB)!t'K\.&NI/Z+b;i"=Y/>n;'/FlIoFCI9F,;h]+q$#7j_d?WD7flt3]
%CfNio%1CV$g-2%\_A<fmk^b@a%Ed4Mmf/f-5cIe$K"\tB`h-YFY$lL)Kc/R0Sfo]6Y0HDX?!q5/+$A8:DsT5R@;l:!;O%'1`0Q!U
%fe3k%1:?d!kk(G_JpRQ,38EL6jUtcC,m>o>X;-W)PXZ3MS>nK';Z-?M+d.o3'LgkEOmhgL@4,5BMaYm3U0ij)3q['mD!NsRG,C&K
%;ZF[J>TAZaDT[D!Sb4c]M%S(+(FIN\ZDcE$@$P'uK3cJ.@=V_eY<n;=9p-4L_7$(oJ#h6tf6YtcTM)-/8XF5ca:cL_9]&h:)mAV;
%6@b#gh6-(Ql+5KXD$Q=u\e?oaGAbCJ2/,$*%KG-L,<r%A_l)1f";*^bbZ9p)^qC%i@NVsTOTujq7d,(s7G`um%+2aTB/U<i%s2;]
%k"<$>%ThrKMVUNMqPG!U,e_BM"f3`@q2_&86E;W?'dMdq=U?\@@LZT2`+`GL>R]psC6d98;R9C2c1u=@AGs00TDkFhj$\j\GV+7^
%[Q%@8\dk&Hh$K$,c"i&,%[.e8=K0]>82A9&JAgQFMgh9`h@@K=TuA&rpgEdAV):O3P7V7EBi->6h5_+3iI]tTeC)TR)/W5&Q?&#M
%N&K:+2$QcrJ'Tm^EIeW+I6m5IQ!nHYpt'mK\jNS!W$Rnm[2Z_5jc4WsS+=lPBO:kofjW9/^W5^,gD?7@_mf^&+JB^9*XkSE'Cp`i
%UCosK%Wr,,+u706I1<>?eP<&Kl>W*:Co+1T=?:=j/58mob,F_kF["X4dj'4ZD;J)6%Xg;U'*9%33*j!`0?cJt*S`'/6^TQ(_s$F8
%)W7;EUa&^*l,OMl^5_23p+6+.l?1"6+;Z?BKaItsVPAit$/R3!kd@UoS[s$#:ncL_9QE^QJ]4GQS[$HH(k@I7f,O@BkfG\AQ9;=%
%aT:j7:0mflj]W5<Zpr[h,^%>8%6)!!69V2I_"XXpd'#s-/4gqYG>+r<"a]aPrTat$=07_tZ]?V[8+5*U_E:.C5>E9)CFm+=:2Q67
%?>:!nRmF*4O,cq4'Bf`W<q@YOrAC`^4Y7;cTQ:cmV4hlqe?r9U3K>daCZ\rtC<fWU.C#B#"u,fU4`63'$V5QiCesCpmZ+,nX5%Ia
%_EFcgf4Y:A4$"d0e4ZUtm;^"ZH?L7(n\gL1cS/Q2(q+]Ais1l*63Atdg[(D>JcHFb]lDsa?iXF?EiP+=b!nKB$/a#M8&g</5H`/;
%D1,Y.'bR,^-8Fl2U(</?-CNa4K9F"do^j6jeU+1^[f'H-U69!PL'1g1`k$pM7]'W0Z(ts"iVor[RqR1'g&f<@4c-<n8EX2o5G0C[
%a*5Mdea#ntY^K_mK!fIN:'=E.guDd;_HVs::?pltl3JTX32([l9NX:m<b%9sl755:61NqIlSPcU1g%%$?A@\ngTu4N@EU0r?V#I%
%19]`!Xk^6[-TJTa@\`/0`5&>.[2;ke?Ao=dYhGX$'SI_^1q_t?)__U&8@""M!lOW-_07keg%MUhmXYFAJ%ql4\S2S[>`g6"cDuHk
%[<')_nV<!`T!W.HqsL(Cgg=pLI&BbR-Ro'LeZ(NFC[DVq?oPI16M?HY[jetX4k3bV%r:BWUi1R=Y^jb'om+jEAP#RqJnBd<'71,%
%TNnHPFt-h21eg'Okh^3^Md7K%qCernNs&`D<C%:rO?GY1oGl5S9KPM@BMZqqI9>BTZhJ^bHb4:!5!%HB*4-4A2qurDV.4^`A+aiM
%lD<5GNE=Hs`q&i>X2Fm7mHO>da2b(_X_u7&o?+&?,&>o<,dh]#F4VAZ_h4N+kpH_J)pS(Bqmj!9b8fl=/@@mLj%eb5fuoS3?-P$5
%X*a`?>WViYH=3k=niKt#bdf7Yk53%kmd$d0p3q)#W<XefOG(p(qS'5iF`Z9S2jpkWa)>@R>X^]f)EQV?e#o(A?[he6'XR&UUK<HL
%g\u<!Hg?,AfP[VQla`"?Y.K!^Y.ue\0DEZO=Z9FXoZ#,)%Vfpk/")l%p;VJ5pJBqoUKgASq0'">o^NkY&HLY4I_Pe$^o'][E_#5d
%V9Gh0oq>=:>])5<hKn99/7X08>qb;4qTIFUNHVk=l`@%Geh\s;^8rDe+2;j&IeUt`lf7)rSPmSA`D>%WI-'FD/M0V"T%U,-r3BW,
%HsFtH<h;M3Cor3R3[]VOh[k@HK:V$A'p^Rt?@P"T)PtLIotAhF/[PFrYA0M1m>C298k8IKmC"!0=iqbo?N]E6a1h@=Q-.k3m$7lM
%Q;@6U2`LY.bri0c*8[6f*+Y+RQf$j_C`PJ&a;o[_QM8X?n9KHVFnrq`Ejbh%k1ssW!)!..P@\:J#NLg6Z@Sh*cePZ@Rp83cQVSn&
%e+.3jbM.I+0!2m,iA(V/pe8"j(Ka/<H>o\-Qh>cNQ[d_;PCLmSB/fBgfPJ\ljTm.,XgGgWTANIc:TsNf6uVdBGKO9"HmW`c&Arm.
%)-ncq]e[VO#bN:PjOLpOm,`$4VCuM$QUL83hgVRCmu=LsVjR@mSuZZjs-EDl`t'uGeZ5%KcZ5BL:@Y42ER#Yl:7\,RU'Na@Vg$<<
%W;JjZp<1p&80oUq4js3&2O_mjV-D7Ke(t8=8g.OgP/=lggA:g>c5XbLS/IX7?cq]<1YUSnpRp'JH)5AM^3N=UZLhnT!"M3G=O.-D
%kC.1>U)k\q+;JB=:'Ji-XRC:5h-<\"8B:Qbr&U(BCnc@<.QH'0FriW^j%af[RXNtMO^<#,D/0I4MJ1JQV5m?UWO`nSn#eihY%;O1
%Mtd#tC%k3EDm_JKs*S`4KS32J,fe$#F*T=#bjB:sED^;>VfP@89oiKZ``9)/Xo@*9qj]ZhZ^##nP+Q*Hh/'Y$N\'E+4re0L`nm1u
%Ehd]]pHJ2M\@gDu"=sXoph..TgD(g]HF\sR7[5IXDh:9"qtlZ:dmiN)q;BE(f6=S<I5KV;K#g&YD-%0%SXU_HQ*o_KB+\H3rq<*J
%kk)h4$JF\?hXUJQZ0M!PY\>SW>rd1NfXWQbS\g`RgfAQ9eR]Cn*^;HNib<@[n@El*\U!N&>?GK]?-7X*.FQFY">:J`Og4j#(uMam
%V;#pL`!W:g2340i7ireEJ?@URls/&/:ZD=ZHI'A@51[r9RjVq5q7ArqQAJaddGaYhBKeK#SpW'24YGg;UKkc`r40io>e'4`g<pER
%!X?0nK50XPI:n6>@#*JXcP%8s"Pi9NOP_IPp4/5XhggU!ICR#+B;fq'.;Tt\ZIS6`1*X2\?&H2Uc_#'c]6Sgac4W%e:E$<anap38
%;`g;naKH,:U70Z^l4`RCp!o@Rrp98D^A@cM;'.AQbU[H>5A0)qm)]9Wg':39pE]cRql.65RXH*_mDC]mK322i_ljrbOBEJn?]DpZ
%ne0::dI;+//@K-B<6jp/C[.D"$g$r-1QPgbd6_>mCrqBHA['dEBHjkn0%`8+5m[I=3+@ZS+?8Ne'*3[:^dJY7"u0[K,?RL0,.?mc
%Csb!p7mE7Mk[CO?=$\[5ZHu6@)RP-0$'D+t2-FRFNY/R:^%4!)6@hZG0!cM;-K<t_=T0XZ7NX!cR6G5e5tJ1mE^GFMeOu#f_CPIT
%;h[jd7R4aE]aW^=-?s%R_LSLZ+^T!8kUW",U#M2"2R)dELfYiTrK>@/)+h"pL+?u"TZCGm20M/&7b9hhKk3S+me(!,P%D7LNi0SK
%A>?DO[Vo0^Rn*QiEmqq[rCD141D7SCU,"eRM!(HL@A:oLEJ]u<Dc1VrJ/Bdn7!01EUh)O]r\/+YaFu[$2dmu'E2)`S.hIp]L*a$o
%d3lqc&6I>*SZ[K's/L*0BKH[dU2p2P!m]uR56'RU?U&J=#I8^bb8dZ)?34:%<?i9aFC23;\sJuIPCjn?HtbbDqX$)tgGU.n@Z4Eb
%d%<eHqk68bhS=^]nB1(%jA!'+Tm<4a*^`W2p0hLCAa[2qE?4`GiA"mM]dU!]q>e]@_6IP52`E3imeP=M>'ua^V=.YG$EosdkGXtZ
%5M96-4^2t<m$4Hh3A/mWoSfnkoV)')3Ql$[.C.o0=1sAIOJZK/er+;p!\nmkY:^gdj7,S+\Fnq+YR)<Jfr$(Xq4!]f6Z^mdXkXu+
%chnQ>#u?Kg\FP^F0XXH4:G'TL'bk\Ee,j8=bu^P8kIJaYG%%FtrW,@Nr3n3b``;-:L[j'GaA`J3M.]JDTH\D-&V',:\[en^0!j*3
%`n!n]^2a[Vmh6S[ZN%m#0?O;^[i'lo4Mi]"5"/DD5kE[s=5mXN#n%"8\a.MJVeh'RlM_S*i6EBVDq<fW\#T=PgRMWaV!:NODF+-J
%DNl`J9oJW%r#)a><`PKkb&G4.T?CmVP#46[UO=KWOWL#WX't!"V$F]E5n$`iepj7pPfi=[Qcje=GPKIb5h;N.,iqiam@X.7db;aU
%*/7*i?7c$9AZkT=r=H'=Ro@n\H)?I`cD!t9R1]>/qri3fI[TWe:J[;4I&$R-=g@:Y&:rYsLKbiOZZL5XH$Oi=fY"9"i.Z^L]+sMj
%Mo'6g[oO7l,+/r_8`jmal<HAqIasB4l2K[qo)9DMPJ-e%[(X2'G^1b!lVe_SR!tX;4^EiYs1Asnml"3X5%ebu]qsp\=>5iFbOq<W
%532q\r-_N\_5)%klMpM)4Fh_i=5migjndHXhD_]+d6-',rpBf_Qo@[OPFjjh_t$mec!F%'GdV&q+,C5MX'N\7_5kohZtW<Sg0N^F
%r=VdT/G%PI3K!5%AQ-<(fQm-L*@n-=HL8ODV0i3l.DGB0_$\pSao-IW!]\La6X/ARlG.^Lbmc.tj@0Wk(53[IB1o2CC/5F^]I$:/
%iB57gBmsKb)TNsd282P2G1Y#T4)RfCYH73-qt+E<aop7FfXrRd29q^sh@N8@2uCU72j_6,D]W`0pj*nUXJ57#D.IoL&O^TEq(8Q-
%[bgEl#a.CF[r2,i?]_(#%c(Q2O.4TWHTHJ%,u[%_8%7%_NkE^oB3k0nOSbcC?[lNa@P03p4qoF*iUSqn@/J3Xl;$Hoeb-cP>;n_\
%Zem=Q\$*"GNF%!Vj.5_!-BItDhGma5FM:ZT*kpORq9?5ZMD:(O'5\WAPhblil%<Yto6'Gr#bLML_u-@\plqfnF''R1DZltD7mCrV
%j@e[D[D"&H=#7$]DS`p<&'XauMq:_oj8el#hAcZJGP.W:Bm6->Mlfe0e^%8"\GkUsng5.F0`SMh"`e\T"N$IcYM@<lS#uZiQ2PWD
%i:Q]j_7-<g5<=Anl8mKro/\HfHbI8MJB\q/'d%nZFB8QkXm_d-F`O9GF+c.^JUXklWR[gP#gMa`@t4CBh8)k8Q3WQ4rJ3DZe[/We
%:Ib&P0&,LYe[N@Iml,<NrVj'koo31RR.KB4c!%P$A`I"f@/K;%NL1J?2?U6Q=#]hFDa/dCjA)8(ik`)i!Ej;QX*^c3K5GhO1S,M'
%&$mppYFgPXUETPp\Q^Y6a;pNuc84/nV),pccc\u>9Ve$ClLE=:qq4KK_ZOGpa>A_-F(=D/6`6*Z?N-aggWagUJu%[qBIXc-ibT>o
%5hZ%=]Cp4*&qt]lJ$ns`fc-55fW=)-LB[Emq,%/H>lU2kr3]ItZK33#%m0Tfb`c%/B)?[UrSSBJO-Y)[k35`&mg1X^ES3<[-<Y`p
%3'p6//\>0K'?#n97p$dREuRP2/2K&+m9:rFFA2Skg=EuKl@<J9)VG;mJqpndg1Fii(kumhV\NQ']fk$(DrP?&9W]I$)D[)?\UE6n
%c=lYf]R%$\;1"f==!%D7bd*]:8B]d0]n#`#+2eo@3!dkq*b0a8&D#BCa<9?od2^oH[Ih=AH["=dT"gK4YuUOi^F89fFaKnHM?gr*
%$:b'^p,]M!bTmF#DY0==L=\VVq-AI^I*G[Xj'(m98Ti!9q9mu>SQb%SePQ-r#"8MF#]@DuDLK_lJ%iP6@Q<I\@FNKEPuW%_\Tf7,
%qIUH^6#k*#F.N8gZ-q-C7p^%D^_G>Ef75oS0$pi"F3fmg@%jVsPBJmrkO71.WH/B)Dd9hG:Gub)F'mlK>6,12^OSL3[:8a-:KH(L
%!brLqcf4NI_+NT24ALYPGP.p&fJamZ/A&Iadt53[eA0ABnZNJQb^1p>8ff"hV^Uu-$\==@=O&tss4P6VApS=h1>(p?+VpJ16Ee$_
%W,0YdNjbC%Q!\B8I6sDIpX;cMDnIGEJ-Kr+)ner(,bqG@MF6Qg+!6h(Z$u*D2ePqGWRWtn-0Yr(_QaFZf'P]K'a3TaP4K$9*tME_
%5?T*c\(t0LcADE)7,ZuH`@#c,P@A4ci&$ca]@i/Mn%Q%=\51[6%#BqN(!&3AC37^@a1"^Fq/ng[pf/<cGcfu)ipLVFM":I08W14O
%B"?p(5!QF7S0jAHq/I9Je==BUZbd>I`HZ?mWB[W$`WE)kB?b@gH:ImgQ?f7nHKNMrZZE%kIAI?5(ql1rW`Rs5a"hc;Z"CLQ:06f0
%;8LrZ/f)%(Vra-(iB.p-L1LToV>O?_Ci_qXihJH)o%o_.#FYGbUR9@;,qTmr4FQ`8fNjKm#LGD69E>B;70cc%"@bS%ndWJ+UDKVf
%-=cn[p%YZdW8$r#=uQP_&1$>Ae=F2#="Q,(l$P)Sp$;E>m\p&hP<3)VFn'eC&\IVpe@[h29_lu/UF!2;0j\0,'%`]`$Z:6CgKH5)
%oPHQ@T3Quo/CijlEB`f6Un\HU]7"E;Y^s$T<8;rmq5Wb0q5i(Cda[d?r;3uhmJ30;2aE@8PZX&c5Cfq^]:,c_C+^HrkFFd1ZBjA4
%?)IIDiu0o*IU[2E?8(4OV=f;oW+uhWJcs>>[)\40>CQ0kbHVQ3*P;m`!kfiIm6Q*dm=X3cj%nQQrpJqS&^siOn3mGg?"nm:q7(!P
%?_'>P3ZQ2oOF99=k$E3pD7Tt5rF5414bNB\)]OnuS:e:7fY"Is_2Z@MpK$fori51pa^+4nWdU0a1h+=NKoVXj/C'PDYljHD^e:*K
%Rh*-g>j)$X\UE3"#//PT_tYS5(V*Gp]?NL<DO&FO2=K_c=,ui[8X$_"5kbX=qC9gr2U`2@C2ui\N"PIT]ik:(Cs1(G*P/oZ'#KaN
%RlRt:S:X6_Y%;KpFuO^!dPp8F(qW,D=H78'@@!$OqXQpA?ZYa$Rs]KCG9&K1]L-\,;jrp=Q#dP-Hnk?0Xkgu1CF!u`na8ttj&9Or
%`[^Y[UeC=]Du?kt7,.b8j>_AVf"V3mgOFDAm]uYB$tcG-,H)\>LfYAd^mo>Sb=:gZZ_n?G4U$K:r*+n`$;7DAbLI(peZSH-]Y"Ct
%qeF#SO]N^<IX/2\4'npXE?&*DVJNpE<cQ2J\18rhG2M@hB9Y7IdJN6!XqH+cVaAkZ_Det%)%3Lf`PZT)q:U&mIa*a<!,j<2S1f",
%I(%=lWC:%I38SX.2dUFs@hVU:bQiR!]Q^)'g$9UO0j[5VH@QJQBGuY$n?'BX[u?j=5#pJlpK[QT9YpG-p\H]j5u4fb&n9m"p[R4"
%qlCk$9oqZSH'lktY:o53V/)WWq9me_R;PZBUHIY_o`pP>qj//@mIo&N5FDa<T/XAW0l()^Am0pWHu%2P!loL0kh%HOWj?cNoBB8p
%C`F2Ogo'I6$J#@f[=^%c)jlZW1+6US(NAf!;Y0=O_in\SX&F?/Oo<ufNiUc$EV&"5-,6gTft(m^]nc=SRhc#$%(@b.aP#k,LW?>P
%lVC.1EmhkM#.],0.JlMfPbJ'VP(?\9LKJG"Ok'KdO)>Nq]d5=%Hc.2@%<;'Y;6AEG7mVc.l;o$D)g3GNhQhBtF"`HRCAek8\PCNG
%gq39@U.<7YhXiDrMJXOMpW`=nE&&&`$i`6tn??,^7Fs)?`n+paI6se9Nf2PB198A5^[7r3QCmHtpaQ1N=fUk5E-pSflGnnA8@:Un
%WAWcp;TPan)CN%KGLWP'2P,kFnJ%IjUf4JN1bnoGZZ/,ArsZK<AdsJ!NKdeQiY_fM9mZ2,)l[S)ND%5YA0V6cLD)KEV,ShXM+W5s
%9$dNaWLClIrPYgB]OnKN/[9.^gA#tL!;NLTUIWA!ak4a`4eQ1!TFNF`5h1%XgUP4HLo!V_-7T%Z).kM/Wm(iGW<fB2?G#gK^Ns2Y
%IjEr3gT.7khY'.9Du[fkj.N&n75@#%9FpHi0U2]sqVrUuKq92[Jj6N%=?'*N#NS@u9+Vdu*gj*23I^#`8CUCe7Sp[1"a*$7b[^O&
%%c4KTAi7#(%;nY`ka\uW8C7.%#9[%+;=C4)\)(spNmVHq5=-+6JNQktXOgue!`f1Ek!Dc&PZkngf/`AMqQ9bQ:rZEf)f7(o]\3W5
%k>=]V:SSG)hTq#K8,2_IEts'uJiQD6Ce_W&bIE=D6K+j*p07S9N8otlFW7f:j7Sc/3u^$!oVC/;)>IO?<6%2eQ@-T9iQjIo-e<g8
%)L!<)N'VZ4SguWjiJonaNr@ou5kU.2[N!^aL.D$Z:sd4F%4-+TN/cOnU-D1nj8Z-@,VUJ$(-lMh-p=G;U,*CV?;0'W5`F[jB)EMc
%E&V&oBSO(9iT%$,I]UQ/=_p/%Uj0.WbL9lE`bnd6:*3;tL9&3O#s?.[]T-@3l.3$V?F?(EE9,/>N9s'#^lLg(7$K+>2mlKS8N7IT
%JYh!404UP[TmMKp%2tcFPbB?*kcmB-WX[^]-Q\)\r4Uk6NRcZF9tumW)!96+J.CI2-2H,5PK<>+H).$j?p*>'>()>O6/;jZ^a3r+
%_m`8XB*``]FOV^)KQ9$K2BoY''Nt(Md"'fa)`sd)%MDt/_>IUt9K:"Dksj!?B[LmI%/BV8BO`,@>?Y3V>gPPC<mjY0p@m+mf%Dj+
%a7WJ:H^R4^FSTJ!.4d(<WXo+jfKMC\khYXMfjD;MG(0*;pfUd(qiY/eHLgjIdaIFN".5*\qCDDnl'Ks3=tbqIporPnY6DuEFBsM0
%%klkm"7n3fi#a^F<iXe<5C!.kgDYHaZq=]s?hV7nVanAoFXs6B>da(e$%4rb)L<F=I\a1C0;YFRr*#l#):dGdME%cf=1k&/HsbUI
%QD`6lAh0MIr\E=Lc("W2;0mceX`W*PV&n)cp[uaoQQ+:a='g(l55U_J'Isq^cf8ikM@s>a3%@mq`kogg\$Z=U3;T;H)>hhO?i<49
%"b%,)OaO>^S:"+Mhm5fI3G>U%>;Y`"V,*.&Y@HIP:45k/>tk%W"X(B]\V1^F"4?o%Ws*.mB;+js))aZaL@6e1!%#:u]bQb4@>^=I
%G(u5V@]tIQH[F*H^4-E\_u(bQ%O2>UfaF\;DgK<F==R?DTbf*BfQqT2a8]2>G=l17SMWm)5u!+$r;Pt0#6N1s?UA[cMf]9]?\LT@
%+eY1s2E?'up=gYpK[UVgfM5)&@ERr%S;'eBQGf,,WT*<Yie>#(V/gbO`m6`Z=.?W@B7%VLYq,]r_HpGp_Tt`E_UFd4fM?;hT18LR
%gY9M)86`95rq:LNhhUfug)elmV8$Ba!eYmZ61!IbhNfA+3blI:GQ>@%eG'O1.K5'nU%;b&[_49mdO9g1UA)Wd5f1QLn(fWkYMP+$
%8meCBfD2@B`=6e%A`I(s!u8/Vh@BNV%.j_k<WjdrW=n+]^2LfV@GB[u`D6A#@&./(]Q>OROpb&=Cqi#+9e(=),F=GR:TE=N_Ms=L
%S9lik*cA171UmsQfUuk`UKmCp^$g11l-jG;\psYH8XJdM'2;eNaK$4jp4?H'JA?bC9o^mY<JGldF/LFDSMj3c!qR[A8m96d#1p+c
%Q1604fW8k&(#KWtD7V'`fVfY^2J3+2na2YU2?F"qe(3kbM'g$iZbeD0\+I&'C3kb<"+.+ZUFE)U$W_mL/$8-KNK(LU*t=4SJF,,X
%X;bQLA_pSMI1:LJ/oMCDosCPFE[lt\81M;1Rm=cu#6JRrCmo&Ghh_e586T1o9ar"`"dZGo_@.d?,agoZ20tlP[;5OM7pHON8?,'6
%kcfYNWR*'2>`(h,L76\0TKUOBR4q<7W81&bi"HjI[aV[Di6%p[[M@?.2AolU:+M`%>1,AJ@<K@eVt$VfS\_i<[1.ND/Ro^5>uLe1
%,f@Xr!>>U%R[+A95l`"TQ9e1H501ee"mIQWN!P`?Q:uDP85PS6;76onDsM3@TW'OW#`>DXLOn.*BVd<8@Z<W-"4"6LBECUl)Hao^
%ajBP%kqY*udo?Lj)g^5b'V!*t&/Zb.(f[8"i4(?mY^pa?>78Q3JcI%DMIEgtA<:6\ULXF\$H!7-XQ,e8Ba.tVTe_5QnBip%=plWX
%-IUU/^;<df7MU.mgXN0ul(u(P%j4uC,4ftXQY6SRf)kY#MJ;i(?e,l,`^Z%(&5PKBMJoI>Gk!BR(@o;)@9qRE819p];uf*dpbH)D
%DqgL9++WZBGF=Z2edqm]"c@BLQp;RaN!uL>%8L(o1EnS(TJ=@i"^#UZN9%8i1ZmoJB^1O:MJfHD#gB\A=;`K[#JP-kgHjO%fjL@n
%_if;?`GdMm>S;$SU%c<BE<[F;%>2'@,$IB('*,pON^BL5Di&,&<=FHoXH&.@X!\0(Ul?hCC\Z>%5a&h8S/PCl+Ass0=O)Iq%:*Q2
%gLst3_*LHi'Mr'l'=oW6WRG]P!/qd$LMCg<K)f%JT0\&<SVnntV-;LhaJl3K!Sf.7YYS+l*<T$U)Ghf8>6M_W?WGD(A)eM&U!^ZB
%[L:rB2,P2u3g3aO7%j(D9p*n<.]FG$QBC/b.\s5%C`nE7W<?'DnPBq,)4V$PZA_Wmi3cDrD$=9q9b;i?L;b]5=cH9U"bjB1Alu=k
%PaM#/];<V-lYA<RUSsjU[]M9j#-?@#UTR`ha9U&lRR%%kJ6Rup[RhC3Js`4!!V7!lWWFdg2eq9Kd^CKDn^-cB]g)q3nWM&6#ZMbR
%!1L#=b]j/g?qQhu7o$+B/S#'%5G3PVKGfHm!^k&@R-68)Xs(BUCWsD@)c05Ojq8lnS'5OO';edVcI>Z$>G<Z66N=1/TIM9Ik$XK4
%$0JEi4$]_oMJ*6_85Z/$k_>'X.6L`'[&.RVD`!$6"<hnG/McNtXsLl=blG)m]M['-,TXb;e.N^OSpUTQ2Dp+GbGqB0^*`GnZl47d
%@7Xo88HmqA$;*`.%"umR9o^<H`#YF<%KJ4<FP[:Ej-tn);6ef+?lJ:clO5i8(3?V)).^bJ"Ho-nL=O'YfrWS_QtJ4+<FAD9).7HL
%\(`qg0d=Tm1J!HrmX5?R!^DJACl?4I4[6Zl][!!l:kHqMW!8/9^g@X=_(.j,b_$F^*),2pY*N3pCc?2d6.deE6K>G1Bo:G_%AACc
%%>#J&Q@TO/c%*^KB&,@J?V(ji%J6pC:^EHo(8(I4n65#m)=IP^nFkY`)W9h@7X/'(ZFJos^Osr9dU6iAJc_KE2-Jt4R4Rpf_1k?6
%ki`XYiFFZ=kDbX8F/:W#<KIGK'3bpE.]YsE#UOTL(BQ)2ela4V`%lWGHj;Ri^4[,2nVJOq@pHrGB7V2:J(*?0Tdc9Y!X42]W$j*p
%XGV09_dO5nbE*,rJSc$%-G<D`iJh6Y3"_f(IT`DON$a`,%E;hDePM';fOuu[!-5%MX>1>\I&"3sq#DC3\H$DsA\-!+[Z?Co_-jLX
%$55UZW$$VR3JYFc8Wq*J!=C$2%Ji?>Kt'K^MIC"n@.?-RjcYC0i3=$:\<\^g85XZ%U64X?Ya-`E7W=`&,,5HDY&N<$nEo)>(jLOg
%2eib,pgfguVZ7T7=$tt^2TH63,gFat*@98SQ;bnJ%\nRtO%HXp!bGbo@<:I_+cFQ<.mtj$.4AlMFIbkS&?6[)6)R$@_BWp5hmU&]
%?ougPC=Z,1QP<=S.\_o*6u92_Ba-'j#(\@\EM:SWckn>dFN``E_)+Ku6C`R>dmeu3!!'67Q'_l/Y\Gj#^a%KJ<g/\,K/HhuXpR7k
%KET<!gg[Xt=nY1A2KRO7m0nUkX<CQ%&Qi%YIKM;97(a[o_'BoR1dd(WP67J4C>57U\jFCIYYo9i<[8"l4BUI+Cgl+AKp2tn.Bj=D
%7o6H>7K<M4/Cq^)?q;k5K8OZF+;#$gfQ+PTCO?>Ba#V`L=>1-Zj:u6&R#dqOBK?:oZGN[k25?$po$13&!g=.7]ulhk$;d4GOV_ec
%:mOOH)FR%%./,%kggJ/Np!D(FTE'M]"e$<rctHel.HT,[huYqO)NGDq@8Shj8Vs01pgfP_ePt=;>f$J97IA'U+1r(qXaE+hs#)0b
%)MZk.Fso*MR(0XW@:"pZ3/4>u&8Z)hG"g,UBf(LQTG5aQ"Y6^EZk-c1&;\2^.e5j!F:P'T$c>(A%>H-[7gQSG1=@Y,!#D[HYqkHV
%d"M0l64CsL/->0:+gZm,Jd9&XBN`gl&[)6u"k*d@%,!_LBn2O:R2#_';,"0.(u8CYMh>V4H`3@4+Vn8fXHLTWG[:PjL9C(*OErXT
%`+IIR1tF4Y-LV9jVom^Y9fP0HfhZFBdMEc[U,EU,&3WBM33a*kU<3PV5rgO:7uaMd.ekkAI4&MbQujm("#F=[;^7.8E.K_Qib0mV
%5T:9b`#)F*+;e$n+`A,G%Rebg7`7'D8+<,r6YMI5"@MP"jU03P#96,P11a\q":r@ljH#>s-?:*&'kh$^2TnG"22"<Zd=MM()No7V
%G-FuTbu7;lRLG]a`<li]P%a(,6(kT"OACYr58Q[\>:#O^qBl%oPZGt:2&J/'-nn17Y]t2Uog5+"XJB[%aqlO$Y@1**EAtH@-:HcQ
%YR09^F:fEcoUQn9eA*>>7t[X>cj%MG!+N2k/8M5`N=`;Qb1$c.BM-VSRh&OO&cl[o0Yh,Q:kPal17<:(rJNtmYf),3V:\c(O:@.o
%8=^4^i2EFoo:RF$*K8nbMZq/>E!]t$YZdjg#334Qd0m<iBSk]u&ECc_7oUh:7\Eb74O1`W+PJsn\Ofg:<"UArp^Y^XBTiHc`kVnB
%0?C9CZ_@Un*^HgQJdW97K>j''dm-4W#jOQ@CK,5jA/Upt5QLdU6fSCP";6fa!8oR7qllG.-5k_WdjQ=s<\r+(.]NOm.7b3n@r=+o
%1_qd-5uF:X;ck^[D-2>8Yq&R:;5]:3T`G^Cg1V<lgoFnL7b;TreRARiD5^VD\d_UbQI1qSL;b2QitPK,X"2unb%Lqf'uM5O6/e$Q
%k^g-59Js&P0!Rm56,P51C^0[/ZD7I0O%m+c"L&%)I2.[7=OfYF<)mO]Q&Z"X(7M5t3]DuK5;>d^Lg$a0#5M()rAA1F..[WR,4VEZ
%(^Si*kq"#[YUF6/X2%Eo2U/70Z=5!`6R7Hm%O;Wg52*BjF'(=n]<KqdUY\AEJd+qXQ9qEW2L%/38+<OD6*^YC4:$tGF^j/6P<3GI
%KG:G@8K8#WV(m1+V,@aU/5h[c-^g7;oF?;-M(tDi`@9&$HL`s%lU]BW5nJ>CaI/HE?mZZ4p,4d<rBh@/SBC.'-\U"%KU$5)ciO(G
%-cP]mKNcp2r*a#r<+`]jVb%(E):MfE3;<m2qb7I"]4S'4B]L;80X*'p,$(V=X9%o6$YrY?c.i*9c5;/"-0Tp`KH9!HF=k-L^iMsY
%3+K2Z!@sQVL2>58@STJb%'l\U\tI&FXCq*_+"`e_R98u%iO<q\QN<FK7'hKhY]Y&85U(#B1o='5&3u/)RCC/h_@5*c!hh!sZln>S
%8Jt2.,8tZH-Dl^bXVCr>Mi8-Sdo9/3GV'Gh$4Kam@j#VLC5mdU/dZ"oLk6f!_XPnP8qU7NKFELM?fkH5q1*EY_cA>\@2NLY$C$Qf
%W2J8L"K)V-i#dKcVT-Yk(r,TQ9r2Eo9dA4u)^pfag+^?OD&1\q&TAauP:1PWF,u.\&5<D4a<^V,iIs$"?,t)K@L[r!PPK68e1i/@
%<ZAq_C=CPLD47CTZGP?=^u9.!btGRrXC*1kRs!QH?%MDnCGScs=e!8u6cQnB=6UV>Nj^AH!PEOhA.70M!I5(e&K0X7eN#1fT-e3<
%L?UYJ9K"I1C\&BSJqjN@+qnfbPZ]h"R6$)9O?p11?8UHQRNGG[7[@L)")Ss7MkNj4\Q,jCf!NMj@%_>:9YiSq$d+$[,aL-I5j&JP
%LdDQL5m37d0a^8?LGhh(H-D;n?q45JCamjI@)qh#Goi6@Su-!k8$K$2B/>;ObufA3-l$bfTU\;R1#bK6@[fYT(:Z"+s&@PrT`^tH
%i(@.:J;['FHPpTDmBs4iM<P-^DDAn=U62hXl7s.3M+UlfeJOT-$(Qu8KW3tj=D!dOci]G_FcokZXC:&gK2Z.i7Y21,T]U#:7edfP
%=uL!'8.Z1T0IO7^oL1D:9dY00)r%S`bUX)?-Bj\]5_$ih,n^@ribJpk.&]F'YgAi4^U3M,RjJ>Lb_2Dc(*2!mbjfG0JgSK(9qoKS
%[coh1dD[BV$BRCgX7@#MJ2SEP'P;e'bgQ!L!05T#""[,enDY*Q!<<7e,a/C$8OfJ-\Br2^Me[hn&]2='b@74UR28Rp=u@dm,N)rg
%F=)U`a&lG8_lEpU7Mp#O)_)$Qf<dMlh\le+`"=b2>#6pNQ:[cI=&cbYK1UZ(P,Kj4:ue3I,Xd1nS<md1F?m6!eraGj0=lmXK*D>c
%"i2Hc.OJ:T*5a<W=eMd&8qiV<Yf<QF-4:8'[%T%45>YHFKEfoe1"g(=#_;uu0=W^bA8BYJ8Qm'C@$E+)8dOko^,?gGSNmFu9b\s?
%8&a0s$7gWMUN.cM$-AEL>;jX*`&/V<F0MT$,I(_<`>-OA'GP9iWtJ+t0rq5K50=FiY?^VF^lb-S"p/,R@Tj86LlkZaZWS5XT@a[f
%]I4Dek$-ms83C\s")(:9_\.m?Xj,DL6Id@'+u*Oh#F/b8A7_G8;6\_q1:IC2[9k9V`G:7;'qoI`.W_eh&/\_oFTN:fYb7,RCG^jS
%D=B"Uk%Y[g@mDl7cp]+i9b!En$A-+1bOI'\$%sJC6lF2#SDl#uM.VpH@]9gm)-BKSCGJKdlF1M:l:O`<WPeQN%6&-GhE']+W`)HJ
%BbXU<EH+pDW!ScS0R$#!YUpnj6)Xo,FHQ]bC-6%0kj#^q%$![+a&(J8$G=ctQrnpj!&OtA29&`keV*?uOhi:MU[,rn99eL0Qq9Wc
%$>D516P<:EVdXfnj;489\%"D22FrbO\rr@^R)s$Qb!]F.kZL8jX(#pb\eZ3&$Ss/ajA3cglBi;r=2Q:N,#_<4D'3M*],2c$H3od1
%>[++!D2:/WR0M$C30(CA<(BX[TLhl<*>Mh!_,SdXA;eSiXJ_"70q8hC&A$F!lA&@_/s_YQE]o5@9pNeV:;fCF!Nqi.JjC%8-s;qQ
%ONf\?lo%N9R2k.5).\CPFKd["RcrDF!aD&-,N2T(M`@O,/>2"U('\'%Wpk7cmM`m:`aXJPR-kin#u$&p\j6D@Qq$>ds6&_(F_jX4
%D*.[rr=<*X$"P4Wm4O`O<.\0t8hTZ55@Y*X?Wl2H%tSV+[rl5_#S2F;A'Sdr;*9mfiP(WgP*.P,B&ggX-RT.B]Z_<'kC^NUdlU?0
%*\ol"]]0diEX^/]UC=V@cgZb%bNJgR7eI^MbuA`Dps_r`kP64g+i5g&E"'dBMWlU7!PISuR$l7D"DutZj1C/_*]oCnf1g9"gO49X
%PY?AtpjjJ:8LJtd>7l*E]YI9Y,ek>lGEt(+'_0H*q-*8\(0D#\B^pM10@sWHT:-jB3K9UGqnX;a9oeHqhcQfh2&m/$!o/Y8\sX^%
%,K$QpT$LL(a.X`B+rU+.W/\;b97isGg\Wdf1\9GelH8^hT_\9O>6\b/FHsL6XV&WSd[Rl\M6ssEau=o(rQ^gT-Wieni$B`uOb5%+
%id_h0e#7r$Z6Cpg3'o?An(PUUpfd.cgt^u]LaF7MN*&7+-o^*qY+C"=HTo*I'qT[q=Q6l2^"s"p)`T6h[F\9KhTrgXG>`oqlg`m6
%)%Ba$_`]%/T%>EdI*G.[QVEA<@!SQ\2rV#N`f,XR6iu#dQULPNmDNTp[ZSfrk+dhQHN/:nXNB9qZR$++<3O2_R$u[ah(erB4l-ej
%\/Bdd<3Z8AYUn9%oB-Widm7Qug@T@U,bE"V.'CL`+4>i]aih_YRlkZBR*"(5p'%_OHu7YI50+Pd?u`sm0g&3dn=T,L?`>'.Ug%6.
%C+f'GNiGMW6)V"X<rC(`rh='C)'>AIcF)4Z'jgF7Q[)F<7Q-IQ<b%P\kqsH:pObuaoZJhcXmhu@(E<J#H>_H.)5_ffO"`.%PI<?h
%kHF']2r-mLg.!=:NB>^up#kosp%u3'"U_:6*.`+Ioje)sl^GiRR"V*)IR`\gYP[mG)(*eJ'Bc]&IAgVTFh[0scVT0ED"GK59]X=o
%CTFEh^'(;C&`;[.a'T);h;h*r^[m*bAg3ct2Et>mf1\+8d7pqZpXee6=gp^#Id)jl=SsJN\$P0aJ)-Ic;9ZS';WRVOmfE6%*_q]M
%p_"5X0:u+c=k5,Y5<=6g,"BQkY$"BL\d/msqq[Zdr;!=9e9Ri-5LcWDpNZ=S1%XOXr-$98H)C7if8Ha_[oM:t$jQq%+aGLAl1KO$
%jIV,Ar5uih9#hMF?5;Ka!&-F)n!R#)T&/G$(9qr9[hE0O9ORPcGLl5S^pWoMqEsu`a/'LUDA%;#6?l&T;bpgG$k%"b=kc%'POo_V
%=gtCVl4k,I>Hn7/8=6N]R<;o[]J4e%^NK$1SCm;>l6[hC!,t:H%VMXNe@rB6\%kJ(G2HZI\a\t%8U4)I<Z8SAH)sAML,Ir'Hh8^Z
%][oZb"t8#<>)<PF\3MlR7r%KWl4sOsENi[10]A,ohKR$[mRDQ4T=+TZ>-dLRmCcd3f[UR8h"Zeu:cj2HbHrk9o>X:*WnUm('M=tb
%\gM8,jc@[i:(P'BWEW5nGm=ES!\T/Q]4RQZV>q]3e4LCu4"`Lgs'^qWIA7U`BT3ZMX$CanJG?6)/[UYR^@48UFBO%`>S[M@\<tr8
%hftIA4]_:TfYEU"749(!ZQd12]!K(+r&oqmV`F#EhhX?t\co/A"Rgq1ff#@bHkI$)cNIf?Z[2?%U.3Z;J72K!7V:dS(`-\Pc7W1m
%5'2TE9.[_#&qo8kF8YWsa&sm=SI]phc'.qq^GReYDGX`6?$iBJpU$S!:(-gU[2G8"k:H=2H#/"Wq5N!tX@a/+0b$[DXC7QhACoic
%MkY6PB*ID7@9A@B`1%*Uj`/<0SC(@<+`Y.mi1CgmMu3<(b)qI%4SY:o7)):mDJBg<9X8QY8?I=>\-dV4BD`j16Bo"aPcmiYJZt<S
%3<qAnfB]'<Mu3e%8tB\0nOQ?Ak?T-II#W2:DV5HI;r7Uhj$_:&[L:Jnd&]fCTkI<UV*a'7(,nW?5(X$DOM;joe_4;p^*0bPV*>#$
%CC(A2a9oTS@YW1<+^a.`#KMYXn`\uAq=&\7e6j1[e[/IO+>1D_B<3Fkn@gtQIA+jQ.B]^Fahq:8?m(5F"3WeC@>nRJUQCVG'l@S%
%:68Cf,>lms(koZ`In4N=DMr#P+9fPs@'&&;%7!Kj"p"\ZL*FlE8M_]ja(V11\SlM(CcUjYh;!a]=190L7iW>",&\/Z5*2GhL!;YW
%g$UPa`'':F<&qH7\DtieJF!/'flMSo%^HEW);#hY*K_gRhBAN%="\)7[RHM+^F`uK3//55F):+0oBK%I%QL8ugq:mn]G(.4g,4Lf
%OM*\'?a"+%&"l-E5hAiQ_#;&Xh1[(qJs)M34up]Ag$39Oel-\S&$_]SM3[jWOfp#/ge>mul,kkI_#$J#'KjInc(2/hq`I#M:n0uC
%NEA71'_n>O$,!9r$lEts-fEYA-4Jb+P"hLrp-%>*:JgWGi/.&5AuD9>/;krA9DioEMb^tR!QJIm6Wj.>Sh.EG0RN4,d&s7\9'JCr
%AloXWW2cMOB1=T1#t"YaGH0s*YX&QZ2>DO-)9Z!t6T7GFSbW_rTIYBk4b+HO`YanZW&Q!UaE-pG,>!r3dht*]Xn&ig9dTFCZQ4hS
%(b$I="`1T.<[+`lX6\X\#!G+JM?TWK)fIk?"P:(E;?h*rPGp7B!3[&+'e?Uf<8\^bs#]4i<3t-AmAu+&UAI;3.KRksEAms()l-N-
%!M!a!mCPDOjJn,Uarkm7'3*^JV#E4'leIuNQnc!oDGF7HmGJ+<ahFs,81*^pUFj;b"6ZiRqs3^K=B=6K=.#316/UeE!0^9(ZQr=Q
%"?9+FTRQm1_CmRfpZYPWOe9JPoQl>/nP$ik`2h/f2XVp?-s?5!VDkERmuAJHGKbXk>-BljJ]p&gR4J5Sn3#7qjK=3@hu%BAO8/AW
%oXt=qM,89a\qu^>-9K<C;<$Bj/kLT&=SfORKGgtQEXNOmEhkmkd[(LL^=sgWlJ,i02_r%ap[=Sm9+hq*hBQ]0kFY"K_FJpsAFH:2
%8"kXXP5-H8N-`q";grpHm[`TdP(\uqQsQOXJWQFT_eZn(;t5,#q\BWr_.N-$mrh;aagjfjYi_eN<j?+_NHoGfqV8>(N"Z-4g=JE!
%C+Qb)'4_(mE0L])WAPfg&X#\&Uba_nRS?:ehNkNfIL-,Skc`/k_UcsY`C.d&F-t4\?s`N]9A@.%`FkA]FK`U(pacA,#X^Dr+o+d5
%QMgD#"AYHc0q3M-l%DusGW1D@Hi?-Qkl\NX[6]i,q*[k'X]lLM;i\Papt%n>TY@W^@5Z[]9gm@`8dks5oj+i0\FH!g+%9nOAebRj
%=J.(RF?ZA4Ib('pAEh!)PUlR2W6)_C'[QcK9HA4_*UJ]5hYu;p47Mo'27%<sS5I<_;m]9EPE<Y&@Y!*OAQ)#M%HfCgeC6%4",ATb
%(]`=".5$5%fX_PA^6Q)-neEshWR%=]Vlhh9,Kdtp=Q2,3&p<BgMl:5>r7T[@NBFpr><_=f':mF@0/o+/K=T.,<)=D%=98O$=A?7Y
%3$U;jE/2*kN<c["EfYMGQoXT5]B%_,3pJ/FTRaf;*.EZe)X#?=1S5ULq;ru(!D!:4BEWM(?*cOs#:)"(e80gLW<e9mE9YSB^:":S
%d_5&TN)>e83,gk/>.GGUDdkE)Zc!E_8:Wl<#k/ORoOAX$*G:Z>f+Eh!9\?s#216fllGOTYL&rnB?E1Dk2c?E0Uj#1j2#^A2=mSX/
%#TMpg`ucoU>gM$j-=IDN++DAuh%307S29E5F)EJ\m.;tA`=G!pOdf@2&h\\Es80pD7ah&qObFkn&dRc*l5P1K)3OEkR;sY1rgbYp
%5m&sMINB0on%&)sFhii@f#:1H2olQAm-Qel=\g3p>^qGqA"eK*=s">BS/GJW!E:FFrF=a"T(UYV$?]^aQmPD@RfE7GDeR-2c&IQ;
%JC=bFo%#32l)G._Mh9%I'JiQji7D&ag329@:!]pn=kaM>_!r;H6#8m/W3JJ&2j^^oZL6-n5Cus_+2()<cg2D!_"0O'Ud(r=<R=ts
%.Tk%#DE86H[&u&>YjJDX;X"X&'3qm9+01EdA]o_DQ2%-+M>C^mAbY#[]F^C5V.'c7/#[MY0Y[a3<2r$+h)JL4R:89@r34FTe^NW"
%s*@-\j;e9m54R+*[qoCE4`'XfG]4f!Ch-pcLB&MYN,o6Q>SqR;8u*MQPd%@aGQTE54`*\i*k#f_<6V@Q8K;g9l^F;!Y)9U>-&l2@
%&5Qm96(@PKqZ-(YRgGM;lpD\<&,\!*n8jTc3oFWW\[!JQHrLa\$=[MMR9't-XXB6D"S]0@6N7BbBKM'ca1?'75J_tKQh4Xm>fQ4'
%(_+;,SOr'f6c`ApKO0`q)^jqJ\c2K?g1lr[r7(UOmq+#&[.:TEn<3':E-?6clb&Wdo(eHH9GIWkH/5h4:0U?m=CkibTATk-0UP*b
%dd_#'"\*0Ti7b"^BU?oB>ta3QrX29*F;Nh18p39UR^qGbVCas@,^e2gB_L7)?Df,6`;BS<kMBY-#m;08,<@H+2o6?79"_8S**Y1b
%fL8hVZ:i4Y^o*Ah&=2/Tj==mY)p'.,<h>rikW\H\q:lr`HN;*ErZV)]iXIk#&h4Y6H:C.dOa)aT-N1+f_QBI5+KeG$mJZ>u+:m1p
%8ORClLkR1d7V;+<JUYQ0PT'>Uf1)<50F(u%o+QoSG6u;$N1V%&n\Gh8q;?*YM1YnHL8i?hjG*+/e@]VRE^0AF;&8W?8kGU;<R3*j
%,OdL(U:VYXa.nicb<MmO6NEf_:6dMJ!m#c\EG\H+D6RX-P)E$+KFPM!hk(R/Ylc\oU./2b#rll*pdT^SpcI'iO,<jd<O3'META-P
%eqip7=Hu&1&8pV=FMO<LiP8_`U2-("JeO*;IgaSQHKX*cH;0&9.>?3Nf)k>%h:%.cBuJSG@THWCmO$iHY0Jss$Ue2IH,qqlo`Ue6
%g4d"s5_tO/Psdk=o\G,M#;\3,;MG%JnHMRs/NNh[?nb,"$AYUS,6F\?+teCa<R:J-VY6/(#Jfa"#CTqijX>Y3i>ZcIS0ZZqgs00/
%%RiKT^DT-e*$PQC`-<IAkNNd'7nk<BqlH*dUFKtN0aN^_n5@4!Z*-BdhBH>Nlk>[_Ju*SW:[L-EX?Bjr<iLH$?b1__:<tL!DF)J@
%^5i+;p7,b"KWD16fH_>Fjap`hF^2r#!nj-,hDb`(@_%a[0X"sl_.NrQH,F_(bgd^KM#=3g+N^QB>FcFqFEr89QrTIElN_Ylo$++d
%"?-@@PSOqr497WWZL9P2m[.?=^L/i3Bu,J<hiWWn;!J?Zpq*;>Oa[p*P1S#U[>]CektAdM<WLLOT-a`pR\P(,5N:I^k$3Enp30V^
%Z5fcrCc7t!/dBA&GsuPq'3o#eoC9MDm^%Pakq83)i7e,TM6d3r,(WDH[NpLsSJIW]K\0De@YdVHHn%Z;iM`I<!j:0sGg&/?@<.ls
%7eA$**i>3i,B:A_)D2)ad[A(mdR)K[_)!S4j!'_gk-+n(ToW#Q@cO7I5]96uF]n)KA*6^^U$n,`pJ[mj7E02!;?iq\*RYI1EP*mr
%ddHo8e7XNm$#\EU='3P7d'ob[41n[;?b?Z#oq>m:RZ/7[M]%ZAVoDeIFI)R4/5DLm3M<>MrqAgpI\`S\7I6>8M3QF;iZ*':@$LC"
%`[6+uB;I_;YCm)rn$#dT_0hssAj3ho>:H*9Nsok^H_.!*j[lrp[_a<B_9u^4]lPPo\aS8=q%B`1Yc-[O!>Wr@j/c6Y!KqFQ[?%GW
%'0r-1dgWD$14'N7[DsuZiO(eNq,@sD39K6U$k\aGb!6ZtKh-;"+C[50I!DsF<B2+Epkr)'n;K?HN9pFDmhVR4L6#n3j#+:7!+Va%
%'%&3C`BcgF"K>-UcFX5--`Z,U6t3T]Jia>.q!OMpW22m2^EA"^G(-hZ_Pdu*r=V8V$1T=WHBe2@6u.fL<>hHES4SP`,T6a>$Q`dC
%[gka'1_mmSmMTf1e].G&j"5M$2u,.6Qp;tR<T4JoHc4X8Gi4h+(n%1'KgNh4*S>+N*/I4YSp%FP&Lb$L?C^*to%5Zi!=bd7'nHsC
%+!K-cmZ!fFLBm9N<@O?UMnu]'U!3+GOR3Zb=NaXaV";uU,Gcef`U_^p,%N*5m=*[U/9ftsYo86k<<[@8K;@m1/3q9o4_Bm[VKdeP
%;NQQIV3R=='ZT$_2Jjt"+@(%%haa<gOaW;NSK=S[K)/W71En>G?$Jb$)7c`t__ld_<sh%'Ba;!EmkSpIT#.9UGGP=qMj4@3bjkeX
%2?e]J8M"lKJ=fouG3Gf7/m7aN"G?/)%F6_eWGg_#X.oG$E/BVue/Ip?4VsnA"V,iaH#ZF?R>.*VD?2L$lCs/5q^,n9cipalk(K#C
%d>+/g0_!X/at.+)feb[pn!^hq!9+3.!%@aZaUUttT76M@!e)hWXFZRHka0*@'tpTP8'0.j*?rV#*JU*+bpRbo??N5?Md3jC$UlNr
%?#A%3)<MZ6=/D)$JM(oZT:Jgs,Mes\cDbjnEX^k2=!SH:/?25Kj2XBX&[U=EZi5W+Vs&hTFlUEZZ^t!rU/4U`8RgBJ+hm6R&FLR]
%V2eTEG7qRt%<l^7Z\Ut-3m[2:`!I;7n\4.GdpJoJ8U]JZ"OfoK/INK8^"0BXh#1-mZ-QBN'Bp+TMea:c!Mm=V?i0>G+hn2@iCO10
%^mRj[\p'SP^Vhf1N<=oFQAFpV`L;TA&)#C:<%fj[A`#BW9kMcqZ4.trMDH$o5Qj4(?&`K.U3Zef)6qKM$=N)p^BqbE'apQi0pNTJ
%&OpN;:\rf#Ts#">K*g)gJM!M5><Ia;,cs6#N&4jD2d^E55E5fLhtYn-J40cm1fY7rGJWf51\*[57[XW'<O&8[BOa+6e5J^c8!c`5
%q&l@PRYtDW5W<Sb+p4DXO5\gfN^NTL#MH!+Gchs@]5Z"/m-D4`UVAH@M[B7265h3-D"^-_N_<C&3GOu[*ZdBfc$I?]YUT-(g,Nk)
%^/<@%XpVBXLTu[]^=2>RO`u%BIN@Vn/ei;NIG`/-NtP5r9![TieR/f1LK!6PU/o.`![Xso#=()5'*YHWV6U0HZ7Qjras";'F&Lpo
%Brid!3&Jd<q%f4IXGhit8a9dCFHng4q7I%[%JeB:Ibs67'kNJ]?>)b8km:ZE:qLK^a6<j`D-pNGbXSPF.6b9c,8+["bWW/0pFo(l
%[,'\-,2o\?cIDA%hRQqD0TA<od$h*nGUO`E`I>-h]s"Z'&"oQ,8aB>J`]Z12V>WEphnub]4t't(_RT]reTbCHWAr)"7A'3!&(hR9
%)bS5KkE5l\RZChl074nf]'[_4/)89h9@>5?YG=6@5)=6'r7J>p;ht7%.S[Gg!bWl+eTf6m1ri.X&anF1PS-hedK&=\0fF\Yl?s*]
%N&Z+QHq^EW1QVWrTBkd3NjuU.c]KEn&_e%rPR`iOAZqX:L1$A4'#/Um^7[nZNN"n8OlE!W:fo4N-n>iDW`"?PSrjAM)5M&<EE`TI
%D_?!Z%Nc`KW9$3\KM0shl%t6u!UrN?s*Q$ZZ9[.i,D*>)';/6cotVm6:g\cGW&"IGL06G@MtOEkP9j=n*pp4-?Q3\s90QSXI$gA1
%Eu:qSZQ\79W+E@a6m/CU./$Ol!^GpecXjrABdWaAIpA^S-$66MS$s':""0piLI%PKZ[_jf82I7UT\crEC=l;4V-^?mq2;,.#c(1N
%Q-'Z,a!7NT^<hlj\+&XWjJV/I)3/j&2u6de?HhT"ct3fF*KS+jU6tbS<h+F6I8g^_KBE14q7q`N!k,K&,h<>l$M??YKT=+Lj<fD$
%3UO71$o)aKCb6CC9AmQZVAt:AKu^:a!9t$t17hm*AC'jR9b'Sp=C'lp'eAM'JB4TUA:lFOc16Q$"ec*oDCP+)[FAGk[g;MsG7Z)D
%Q9B/TkT,jd7:;bB+o?7OLsf$draNJG'hknXMeKMRFI/[#bebtlpJ8CnC.$S:JgqXQHTXW=GNB;i>eWPj[`"S+$+uO&[D`;G_Z;L@
%;.IOV.&b^2.HH>jD,C=l;;aQpd33Zg;@%Y@W0W$+Kj7SC3Rp%VhH3Q_gr)$\RYfH?A>/auOg9mq.6Mcc(s8i@4+;[b^aj7NSrFj'
%Kp^KcE.UU@8:n1N<,PeU2ZfnYh[<9c.!CatZ'N=Ylc0"F2l5k!i3WT<s1W=L9]u42EKh7(`XF'RGKGb%qLe6p'b:!m^+Xs,WKSm\
%o"4K!O#7C)&a:,'&lEcfPSTB>fo;P9&uOn'd;aSbiG;un\'MU&iq!$l5U>>g/g5`7ViusZ?[*p'1UqT/NgI?EkH.^u(J[fN3nEB+
%RLuU4J!@Rn#b@<>RB]LUi/uAln2-_A,`?b7lB\*<1./tJj>qUH41U+iltn;0nV#)>&8/&SXXk"$W*nVMWQtYtj4t&/0aDO,[bnGn
%rq_E$XL2Ik-6S]fnGN/ebtMhOr@"fgafILK?=@&$D.nIuR=@COD.9Xl]@#Rg.:Y;_W/L6SZ3[+'[=&>dRST<3L$u6CZd>QRB@u]^
%\E20Q`8D0"[\m9%`I+8cj*BASottSFR3Fua/ru?VnS9j#9IZ\00Fe-uM+0??c7cL@npeH/=2@g+$Tna=<IL?Rqht5_2&<^Mlk\B5
%9nnHa"a<q:L=u<k$b_&79%N$cf+VoSSE-ETR%Yip*s&YA=JP8F(QQ67l;;+ST]o8SUVABe&IDKprW;^<N.Gm3qhha0+NKKGg2!%H
%g>&C2&i(mcILGU]'"KCoj_f^N['3D*7<4oUFT(&oU?tecP$$(r6PX:!bYFi,oMes7#_,O5GX^1U%P%VD_Y!J.B2PG618lJ`<Pns9
%.d^A)m(/H1"==_nOl*nI?R\?F%4Z)uq.qD8he@Oh]7nq9T0VF7n>Ahk`3rW#`qGWB3#9::<LG26_H(0AFatT_Mt,5Q-toPI]cKaP
%8O2:<6/]O-6jiOn_,ao,-/VFjo&$);o1nNHNY@d_"MXJuSra#&c,Sa+A@<G*%)1B7akL9gp2C*/I4jha=`Zrs.2omrHMOl-"bp.c
%S0I(4?O&:;Y(XH"Vk[uqCgYmI")-tnaf_43rq32O:fNS4H"e[l?n;)qe!dn#nEAAZr%(t`M$^a:M!dOQP*Pg=&:)#,cBFQ,YPaCQ
%UdrYq%N01IY<^p:0u&>%^k7=\*biGO03kuWqqI*([A.'6N;kO,PW9V4p7.i/rj8p.gRle/)8G9tL?F1-lN&bJ(2L-K4XrRRI2R\H
%aO&c)q`\bqU&J(+N.-+E"=GcBSpFcgmWENKei@<_0`H+74lR[%N]s\je\PV_Nl9)LM$Ek]cRCs]3W?2kEKm'm!E!`N%,6#`d?l;B
%Ds)M)h[s<&JYlV_&.,sI-M@$An5!ZKW-cRWMh%-:%2<t91YlRdY!D>L+:hdKTTX9KbNPW*)4NXcRB9FQ$dKTJf*O^\%nl:B6HO!j
%QY34&js"UJh%Zu:>]3>Z&3_*cCGRA$Q2IZHOC\3L.q`fVE+t@WihWYj#^W'&k/'8Z77r?JA;NQ@P41rD4C\#hD9M)>cr,sd-Z>R\
%Y^0Ud3ZL3*b9b'm2i')DeE)sn.X@$<_ncA`OZuSnYt5\!M&jVpKqpI>)t:VN2)n9q)q#V]J)8X87FM&q/[!$;;/,n$6-fYJTQK0'
%3`UDsZ"mMSaLRhV>.8oh3_GG#?W'&:;?j4Ar+^!MJ`Y5Tk9V_aQn%,0mZ>CDCo+)5ga0i`Ed'WILE+[PLD%AohRUV%TkR#YV5@YQ
%FCZaea@g+uZ7($$*tP0MJu0W]j7:e4YPf=LPUDjU<$?fr`H]$G#_rEkdeV:)1Edc.i>e1<3\k;B!%nWbMoSuB2^!$DFQeTQHqB]i
%fir.@j0-!!m9u-i7AFIO5o`Imk*7(n9lde":c4&$'DBd6B??l+QbJs?$+&qao`:I&>Suf,\!Oh(!C^ibE:?(]lBPg"?*1f>e4n*L
%G<m-g4qS-8P;K#94kC;(dNDq+Xs5S?&fS0cX3<fgAB!-orquRK:uKqI5t0L<HM^)Sc$t!55JK963$s\GVXeH90P%Nm1,#Wq/pqAe
%NN&d5HBG'WWM'0aEC/cPr8Vg%5Wj&$p1Y8hJm/(`8SP8EDRG)`_h3GONsCjERKO-!p<\"N7<;(Y)kO6B^UGH(E=n>nNn+;r<UHS.
%+2:S)])EX_qrcaOa^tsqV'SNpf1Dg-ll1*hq5Di!mmP`=-"9`X`Bl_0oiFN5*rc\sO9&$&Pke+"o!g@QkgL,<:,'.tE\q!!W2,om
%[^QG+CnqNA>Q-W!pslt:q@Y%1<ESpN[T(c68+&11@RO`o=>aca%O;QMCsA#4?_6Sj+AP1ko;%agTR*.L[EeLlZ%at<r9mJOh^LXA
%XgX\hqeN0VM1EG:/:j6:<G1qHk"!IGfRV"u%J$EP^[ln])Q=X7E2\.9MPa='#W1%Q@$.I5mD+cbO&L):8M_QqK1chP2<tm*9C*ui
%&<Pd94Af'4DlTs*\$1k7;!GH=OD(2cEUj5Vid"Fo[XJ"/8b1[EQV]mfo`No^6R<L'H;.'<0"5Ku<It4S8f:ol6\)bnd^A1>99`O_
%&T&c%<:t3!HUPSXU\2WBH_R,"DmN/rcTmM!%J=%b/KIf.YZ]^6.CJm$H;+c6IU[n[UIa=\gn)lEG]M&<Hc.d,Cm7*kk"\5$ph^S]
%b!(o<3?i^A+Icq[dHr;Y>c.#*>"E#_Mh@DSNY'^f&P/fG3+$6o*`spTl_S%nQ%BD/TZj6FKaNbpc)sA7]G,upA@ST(8(%ADR"ckY
%9G]/fl\*K;EJjAY&`Nr%Z&4SpWeTmYqW`Lqqr]bM!.Zl#50@7$VX""S=PC<#n$a>oIBLn'K2=L`6[t\Ks*REG^p^$<bO5i#mL2(B
%6DppnOeDY7bn;Zd.j^'e#"`hboopes,adr%nlPh\MN^Pq_O<U][9A_J+&OpSCT3Ye4'>qY$fB1<C#=XXK7B*cOZTYW4K5dL#sDOD
%aWBtM=_CUr1@2jA%B_CY6d=6YNu,RC$BAp"r\-'oRjCKr@B,\fO#_d/B35/qJ%C2o$T8eYP]6F\PR[N(/7V-T%%;L0iYd'(4X\qP
%S7MN0rODVCjeBGq_#e\8(@/(":5_jg-WM>MH)R&.R;Xnr4N;c;*[A*`pC*L-39n8nH&bHAfh9P]70_NgP!ta;:;>XRnj/nRn:==/
%=>9/184S9u<D%k&,Ssc2gM$s`lmltq!*ib#9'GmhlkedjFE0Q,FF[Qcpa(?\&H$fTli*/T,"#T=/H0]&Q9ZU>.(5'Z>S[i@(0@g]
%+JG_f8pR`KbdEn9@)s^1,(:[X3*L-#kcogO%o'&lB;-MYkQ$mL>T0@;>EtKcpT+!sF&*T?!LRY+b%=Eje_Pp)onS%u6XG?SLIVYN
%V>=`XVQK"SCYn11rtnE5qBoXp6>fB9h%D,p[,1&)'lgTOKOP`:o;[Cn+,^^pfsZYdhgHVkX>bs\PN1P5bahADAmd2I?rf`B==:Z/
%84.9U9u(<u@)LP!4V%53*Mt38m9"/fh]U63b8P6DEH^^3;VbH%-"O2SJ4Y-`TdEhf%EhW*K)EA('"^#0Fbkc(nkSCLfgR08SP;A)
%+nhtL&n56"K$],oBrZUe,;O-c%.dsp&Fgd+q#p_?]AH2<2d?M][?X!b[\%gmdWiW!Z),VPN=!/LNhpGS_98e)GXpok\IqNMiL2o4
%QK$jb=D;%S*ge^oP541&j$Z!]2`8d>j6B$<4=?%].4[A/!F&Tom[j5q5Q13:BX+HqOi/j++"/o[l5KTsFWu.BhF`.#d"WrJqAZ:\
%4Q,b9LAR*4N"C<(&Y6t3UUR4qgR?O1_(cRh_uW)LW7(d:oZ_r/hf&YgC9B,9B_lf6PXK#DZ4om:$=[nCC=h#$p"MCJ,fR-/cHErj
%8$q%`P@(^d<R,p(&6<uL>\T7g(@%P.hGkJ$ic9etdemsb&Y>d0>i;cbMGKc-?)3DXiGU5'SV82()=8Snd6dRLR#muW+b;6/&0`ST
%S_TgF@%rsn5[2Pk\7>lq=<Ln1,YiIN"Xc):1Dj-A/r]C[9)kNuD@qD^KO1[K&9R2SF2uaQ;Yg=ja`BBBj/a$_(DY@^b'bYLQIX?G
%Ykf:s4a&<VQ6sHqF9g-$5P$Wm^p/2DgY5Ei/`gc;H@jp#b(p$!DDDXJQ0_;<f>=<Kn<_q!C(LEDMR`S0n&h.!rpZQ3_G<(=7h_oR
%Hn3qshP-18"gJe@A)c9eg_ZJ;.fn_a1I%LhG\C`/I+2$P%?<$bL']T6J7'1SK?*OCj$K(ucTMKQ1dG*3fqqS/rd'&8khdK\*ZP^n
%!dsqL>p-fljY0os2t/%S.&Pf$K2bgR\/\#CP%4`qX9Ql&j\.iaa90btkTZDtP<B*"ZP!=2'UX*KE06Sb;(:TMpV+#CQMQ\,^(_n2
%-T^ud]u3.l:UVr2+Z>gKdKNrUM\Q?L7'0J\:OKPP<DR=KT1rV&ZRr0Cca+W,;\%6@ij,@N=C+5W8!G('/\^Z*0fj<(Qq]6H^GJcu
%:(bEV1G7p'7mufAO+6%\5s;h0bS+hcHnc83$9fL3ee3Bt+UuoA9ImWc8+cn%;Y.Gm12""(>Xuo[)HTtIS.?nI[suto$m4E_p)<fa
%IsU=*dl5@6%Qrfg_4Ds)ddp]HREp^5<>4lJI%Ml`o.4\21]DcXQ'$jT$poGnn'?fSBRXo5@Km_.l'A_+nu]1)BRGD*LC?\8GTC0P
%08/4RX"(T'!-@>O*YkX'<W`C.mk^F3M/N^?)TILghOf(Gm*eAIp#q*)o;V7o!?L#%G`oNA*-8R7hiF-C7;Q@<4+f*(DZuh_Si@G%
%FtQ+^.U/Fpg=:,]#cs:*:TAWm8otQYFoX#dcb)g0oHPT99B!B,_3>U-6J/RGUY"0&ri2@F%nM>7N#J&6F9],np%a+6KQm0e/e](F
%J1r7Ph1!0^73b0U1CC+:Ylqq+SdNb3)iV`<j8HWs2VF/H3-r8>9?!oKL`/J/fQ<?4NnaQ#h)ob8?G,R:GQlP.Z<mA!:u7H3IX6kJ
%HG-50FO=ZWNg]N`g5.bD&L.T\0p7rTS#Mi(.@QO/15VkGj3k:"amS=d(nXT9K&[c=3(8cN3_:coE7:of>._PhZUNKF>sAVE@_5ZI
%i:IkkXs-G`'Cmp\<JEVp#@'4GmV-I6Ndi.%5JK:Sm?At@^NEJ<lG"\R[ArpYZM@L-pDYQ$.R,d^g3ib[j6:OQ%b/.%0#cLT]o@pR
%bW!fml'F!<D'"1FE)KLuDUD3>\M?ChXU;_#q6G9j$R/3u@&7aI4KcIo,Kg[th7Ba/3G2_"%)IPD-KO#k-X-XI[o!!a1N+XZ0]pKc
%@/i6GGD(a7+G-=!Of)ITGM5DJ>J!4qMRl$W1mE`;kA'.`h+pbrAiF8n;M&1KX50V%7T:9hLk-gP6+02J1[-'-p<UBt.l1Y\Y@nQP
%)p_53cgNSY2Y41S!7@DZ!9uf;47lX^#QpKnnqC.mGVt7^S3MtLB7T1r&pQGPM9a<GU'_i!FkZA5A8bi`BdCAHY8$tnmoNEAkJ#l\
%!gJI*;RHTKTuIBo,m6D)h/ojmRGnD)9N?#C-1#^Ad$.QW:VNFY`Se[]^6+:1K8gK@D>W*rjW"C3h4eD2h0.e;9<`g(dj6AAkg:fN
%QP`:5@X4pMl_dC?WU4M:If03ca?.DQJ[#5Q\*k1li%gl,rRtA3#JjO-]f7.#9b2!r.o4DVP<.bV8.J?nlAPa)af&k[k1;<$#KTT6
%Y0n>ad=V7o3`jK:RNW:d-eFs;cJp0LE,ManRE!4J`>=7#BpU*[k_c!"aCj-,EMu6KGD]1?"r3E`gF:J0pE6qOT"?RC)_H3/Sn+2*
%41T\Q_p^jE[A)rRa40)+1/_-@HK9N!)#jO-N3B"*Fj'J!1[2UF1>O>Xr'*C*k6$cY<>7iO_05?mg0:qNAj\O-Y@4e>CLX4=](,s6
%Ah?FKR=@tQP-ij.4H#MFYulO@]CS^q1FnFom-_PS88NPVjlA8$RSV*0n`0Q:$D4esG`8m0EnoGKC0Ek`\Z7hj!-j]g\;p>\?Opd0
%qDM7FW)*F%rOBPrXg["\IlAlu)6kofPatFL@<R(^c8F8<7D7^pK/$/,$XiRG)d[8a>ekX0jZOo=#Yg'Z4(=Y[l^I<I%>t(EK5ej9
%N^9=X8KWfPFF7p'm!L$tedY];d!NA7`]a`U&^RB^;FiW-26df/PNm9;+COik>dK8Xgu6r/\h$UZ=S!5ObAEcDb'd`d=ac@U<FK.Q
%3YZA0DZD6Wl8@tmSIp(=^M.MC9gr@VYd,"-GGrntoS6kr&[L/4R/q3&LLSO$!=nLRi>7jGg(UD&BRa%64ZAa9/^uX#7BOK9X-N[;
%\d!,0'9-_qkG"HWRnLA;YTJ!:*"-o7cQ,>oT\)9pA8dlG!C^M/rIe>\J2RiAAp."/P[:S%h7H%8"Ai[DK.>t7]+eiV<74CJGF[=*
%(n>kLPG`md@r5JSYP-F!h@]I/N;i$KTP8HDpV3Fm=q0YK1=SE8Q;W>-?\W<Mg&%k8=<FE81V%%+VO#,S!.\@eMTfGB)[E1#\Xsr%
%5+O_:-/Yr`Zl,&!AVTE+R]H-)[%U.;YMV]r\+PtoEf=d[n:5kX3Q'X(_ln(Rcd9.cc'^$Iln=om)\DB0G4O[EDGiYTHI,u@Y;N%7
%(8@G+YD(n,NXtAdFg+3h77;7L'ef;K"fCC:621j!9SdpS_T\Q^<QE-L^gSlOdA`Ifp<;7"8KFeu?INL.[(lNcR\dr>BC`BSj0DQ.
%AqZVKj#]TiW7ZB@Ih,<s+-i4k4PA/ceJ]5cP?*WF$"ppo;)T&Kc]ad[`/]:A\W>M1auctli;@!pmeG]\"_"['^Y5r@fI60E9`ZCr
%8%I<J<?$cDJZ/8e:D#N&O#-<Y]O)-<5.5t<,<Hag%XJ><7skDOeHpf*67HV4=!S*t=r[qIB'nr8GXC2FB<WTOdn>)FO(*TTV^SVj
%>4Hgjlcu8SA=F1&A=lX[_;g2'0SA=tPcL1Ppi7ob<Esr7NfDNZI!oI"&53o\XUQ%)rZ!U[B\8+]-m9Cs7G0Y@O0u:[5',/^7XF"V
%2ht;BDr!dX+KCMNT0OftikA3a3q3AK/,sjKP`S0KTZpH;W\o1Da5U8!p#@ag#_O`J+s1W]2:=^Y_X=-%RBiM_gB`00Cb(q<d0>bI
%b9'+>Z_-TE1%!.&@fCVd:r9<c7ftR,6X3K<jk0$^=p2V7B0Oemn"m:UlJMW4juTj-!2:r_"$9ni<BB6a.0)Hq'e5cR\MamkCs>K0
%^th9rPjRnJ&0.\`d&?eu>FlCH^4/>K<+5LMng.#-_9+U_f@D4O@%0+7o0oG?,Kh,s,@>(QY6@Pb'%b*F)5G25pA=$<ULo7&X%FVj
%A5bom[9g`"bkQ)kk1BJ-okO$QT$Zrg[nTrV9Q%oFq/%>2.DiI[FoXauDK/-SI^eSX^#P,FO4q%ecH]/WA$ZhAoTPd9G(f:gh.WtV
%p1X%S_\PDcZl*o;"/;]CME1+(0JFSDFKkZQR7FP;HOU1EcT%OJ^i1`^fYdW[NMp^Jp-?__%a6#$r%fTPr`@5YN[MLu27_PBOa2=B
%l_E9!-/r<:i%27C;-Pl/h+rq)Bo[9pHFae![5g4MD.dX(D'd+6OTSA\!4(]dhh+Ci<R/gID/Q3lUhs729b+lEMN6\,rH1NF/6ed?
%AfnH!<(82K*')q&?M7(IL'X<kU^o[(fFffRWf9fBk)ur7T`]r?+cg>Gf[bCurZ$L5>/PaYf@<aicN.kVCU6^<mA(H)>3b[ckW&Eb
%n3*__cVfP)e0IrlnD3LKjm\Au\L<XA2tW$&3FO4E+XCL.@7Hnl`M^Pq'/Pt0NE.:I(/3D/]F!Pd@@eeE>fl:Q[aeo!HCifnAtA-*
%nn7rJZ#-Ia`O#,$:UU!iFC%+=>:)7QU;_0J/)TTJ/gMi_fg?!K[2R'nO`CEoe%=L7_-ME)4fBl7]`4PrbUR%.Wc_,1A]&/Zp,jp8
%4R.E2lof^H:,4+-1K<%q^GJB^''@8<*s1d78pHnhe8o0c$pI0FQlQ\lT("_4MYXh`6;IG@e#D6>L]/1:1j4H'^-H5ZjKg8ap<sS#
%7`S925-Zu:-b"['#m-5_XEn&KjC[&c%QJ63a@&@p4>"LPmb>u"kuMJ*Hc4gnAChou['6Zs;e@-,M>Yi:Y5'XC2f(P.Ye(su'0^)e
%iZ</j\X^I6Nr8S;KliYFpZ]:"Z_I+MY<1X["tj5U.><2sd6XNK8rV;qBCjRPIb#_qGGB]/;8VV5$h=o08/&#%$ce]lQk3b`dlFJr
%aACfUR:Z1FWZ=F.+P&pf\^#Cui?/kl!-P-@HXU4QHW?(@ok9.q3sGd<CC"O'r]@C;IXd3(lo/N^&`/s)*7T@#]>)Rs&"=$_?6k]k
%(mbqMN'N!C\EP:0BAPrBCY33\BkpRj7)UVMf:IL/NQ;L`f6]Hapj8%m;I_5,>*M307D(b%Sd7(c?g`,cm$/0o=rRLFkFPfgI67SK
%G8bgf:IL,i"A8N+l\X=AO._XbcZOEPElg65)1EFB^[;uq;GjaP/$e<g75G?d5c*+8c`]jNdM/7,r?<q[_d\=W@'M^X!ZnV-)1)V8
%l4WQ`S*Y!SH^`oBTU3?pOmHhC&;'#XGJR.L>->>s2(1;a("dekP#c(HfM1gpZ2J2i9AJlRmCN^/r`U-03@P?daPr<F5NSK(.sof\
%=+<Nr(p2mR1^hMEf+S/rNH'.(QD^JH:2U9A`(KA@,"mkH2*cWc&teCJ_3r(Ni`FjT:UCd*Ge-K\q/-t0NoC-n:Fh14g+eGHJLBS/
%1B+L0J.rG3'"?TWl"O@rr3:CQiP4s0O0,r'X3M%V^M_4V'YP;C^\BKp$VjXbpq!<c7]E':<[aeEqK'S0I-BlM_>so3XWALaL%:'6
%:u2J7],>1.D,h;t`i+c=qL.-_"%ml'^`ttaF14kQVbhC$Q_T3#7+L8$ebL1&P3irZB6X9,+Md2Ub8WCZ6<-Kh!@R(Y3mZQF3.r]2
%p?Y28(k0H_bb_'"r2gPM"jM8HP^[k.cb%lK4cVBlO!gjK+PRP=#j_tpIL(e=KNb$32e+6rl::3]#Y8O$&K4furC-f@np]$;6H^3U
%ZNp_m9Sdp1k8ET,LQ]9!Mp/<LFe77V+M`l0i?]Ze`7\!??PE#:I3u,Q.Y.?3qp[G4&Cj"*_Asa+J=.g[UBZS-^XGAZUbs7QE@5(2
%7)?E%j7jA/5%:W]Cg6N.oiBSZZ$2mMZL".oj]B$AL99lmDc#/t=ug[cN78[iq0=XM2-_Z-!fn9LfWlm<#?20HV^d17KZj2`TE3$X
%"f*MP@c`CBcXHUeD<D,tSi9Fd\j/rkf3k1JF^90!O=<"$ka5dUUc6",Xbih=4W@&=0YH%RB[\lNV9*sW4XnLGJ)s`bG0/ULJWKOY
%(FSq/`50cO94E-E15c`3!f23s)d9hR;6?!jFp.T!CCBp%Wl'\jQTXMg)@,!3RUuIdQ38+UCjs-Yfk8%Dj@$6\*RsKV:@gR21X&R^
%Z;$'Y$Z'WP-#%2/\$X[Y:%_C]C4.A?_B0CfN,:`mX(do&e^ls-;#L7a$;uuJ^#JuN_9S;_Q%_&IXA\%$TBg_hdOCeYQT+:BXh8U&
%JFg[:s'l@)6AtK[PNb^6*AOJ(/$`.BmU5aE4J&_ZXOq1C#hM<$r,ZdZH0$`eVP$8!aZC9KodDPs8@m2iB%69PZ<_e26@=gkZ-f#7
%AWTA3>p5-KdBCki5,j#1H3*:$dV$VOdA"[<G;OjGiPk8A5QHk&O`E1C)$ScAf5sU+jd>F#lmih-!".G"9hDJ>h@]^$M1M&;$LQ,S
%S'lEmP/03T@qBs#5b!.CFmr=*Q=&KaQ/&pp6]*"3DU<S!(>'V>DVC!aOQ&qTHd$(>HE%e793rUf9<%;%$B*<)lnsq:MF`_%Z-W*.
%(Wjg\?QEuc0Wpu`K05#Qr'$.mdhPp)80#>t_#;$sI&_H5#ZO,gHtOh5Usp88>a6'fZF<aW)Y:6T0NW/$CS\.#*c?cS4CQtSf)b8X
%CSR73EIH)eKP8\oonY]Y5&qqj-Y7Qd3(EdmRBgpe5XmRTOAC'bIU*5u:G;^8FZFf_NY9/7/9--L[o.TOjbn&e`$Coh9_^%d'b<dW
%m17:qep(2fSQ4!:<G\D`_]D`d$Jn0,SRU<<MaXkDK&Ct"K\AUS2(A(Sr/teAg5^$Yh[kqN[XA(eabU/].p:)'T0gp>3gQ92_i+P)
%88J@#]6p4?]ai:<BjNl%*2/25DQ"OK2^bK1&27q'Rlc2%4>Ru62.o,)7U+D</5ZUk<7"RjJZlNkK=RGN^t_OqQD'Z'N$LSdq9AS2
%irjTnRdC$"2"`s?0onBt7r67D-r"XYpNQXr$F7Nl['JBFB6Sqf:f!J/b/"c,;)eFeO*0mFj+lOW+D)#1EFq><[@PZef@H:&'bZ&i
%g=e-L9fYUn[gC,f>^2ir$TKA+rq:=Jp3F[&N0uqIq;`ir8:G4.[h2^5_gC8QTa;F@"'$IDT_^ap20KWeCC2,0P7rtqPPe[%`Vf4^
%%c3V3jSPQF/m)bMQ"LVsD;VeSqAs8K$/b!b7HMsA)RaIBL8:,Z'_ehmeZF5F+=$D$^#!"h*WMX?k+P:ob]+_;='YmAg5Jcs#c,]9
%r@oU=*L3^$^3HlcZ-?2;`OjZeA+,o\O$Au/FC=<'hU\Q;bB[u`-uI@qk[FM%WOQfNXFucQ\6Wq"fZ)c@h/(G])]t40?7jpE@")^2
%LtX>Ho@Jc%8m@+Us7"8tZ[npTT@g#/T@qStONYAQFOG=n-Z7;i[j$qSX(Y&bbiQ\:[G;2/8E?&bBZ-HH3$PeJ5Pq4aE-?["Vl(K]
%Ya$hVJLlq(_#3nboRMob*>+=/RCFZhlboD?io-JeXgC3/g1,$cpD<i<ai_,]d(b`EpcH`?C*9aVQKs2PZ9=gZR<.M->E3Ia_>B23
%)QE=]=_T=%9DoTArH[f_V&gZ30Wt:R,fflRUl>(2-HUY.IcAC.HJCtY7G`F^CCUK/De(q*D,87V#NGWqIX:TI-Bt`MCf&NIiU=.6
%j&SibN4s_oA5'Ot:\?cGMgF6d+kQX+ff]YB]`q;(Rcb_9H\Ii`26;q<`KQj*1j?^K5A^`IRi:hLpA!;"eY+qX%e\9`il]oLG<IVp
%X26/\SgJ=!]I;W8IBGE.k'#"D>f&DId:u276^uJ\Q0`rAhEo/;?RhpQ@,2+00WmDgOP^7*^;g3GJ,eiL5a37eip+cE+WqS=1?6\6
%dfH+F";IOl@]M\1qS3$eImoE]aOPm1H`kSLiXuQY7%l()3p=aU'.0/J'Z&#n@m;**#6gXddlZbX]+"@>s$%N\<a[0dMq;Ja=%/\^
%I`cs&'E%h:kq2q2kP]VYe]%Ga.WpXu*3/kbX&Q5-H\c9hZn*3u"Q](&LCEml'[hii'EuFo2b*PMbQXL,riYE)$h8]Xs&OOZgHSZS
%Pn_!=pEPChI[;,u^]#USnfLlVR6CTI?iO+;6$8cllHt'GGLF/((%UuL\gOA34dABQlESnQ:A1?CP'$ep1?a;)+C1[[;+l(>8%;/7
%o%-?_U846%1%lVrIKP=rbnAa<m@m'oeKLo;h/s%7^L_4B+hSk;G#^N-aK\`Q[<>NJ6$TfTC'k9R-.=MN9s,m1ni*>EX%,LrNp<R,
%L;8A2<d*c+fMKDZ'j]0(U?.mL*nL9P_>AJ,f=D2R$p+Q)s1I#aV$C@P6q<&VOc@`VQPaOf-=hdCFY^.Y`PZnp-@.j/Po(@Jd&,jO
%D>"#KYpU5p.HQdEU.eX"HF&%I#<H$f5cOL4kA#62V[b`W[uZ3;?GuC%G]Pfd(rBS*$@c?ihsA`8pC6A4OU`9ck1QFt+I?h37q\1Z
%QS%+rU>Bc:4\4/tTAe+5C_OYd`^/#AjTOnL)\?$(Jj[sfG$pN[bsjL"LWt2<P8R59fP<VGN[4*iPPq\7#R:#7&RP";K*,GQ)D1(S
%O5&H=WKW@"UdTs?0/."n]di_aIIGs2konCNeP0klOrg@T&-Z"i2qr.mAX++SgFepj2+$L=:OGRn'+$NP-F5;u1eA<Vj0kMj$qI6@
%`:(XW75`03*.DHZ@'8L_-LsW2o<X1@,s[pc/ADGue&![]nSE^/#1J%ID<J7lX8q)';is(Yl,6R-K-`-uGKl^;AY`Tb1[.c*`>5+`
%@95p8O6I'hC:*gnVo9=#Cch=]l]QEn#%bAKnj#h2o/^r">;7)6]J3b)Mbp-DNF?UgfnWa*9;OkMQou3OrMbS-hWidWd*=K18blGG
%hAiK./.)?(;<4$J>V0K:5T#`%gVanuq0=.UftW-;-+5:$#WAPBC)+?a=]+Q="dC@frG'`S$H_.lQjcX4[T-8C-XUoVd>kWZ\5F53
%N@Tq#o<:B4dFb&CAH4!@n!7%qlpqpWit<[dStGaK4hi))fsf<!roa4U5Q8u9s6K^\f73bfIiMufYl`J&Hng`LIq()oJ-]M*iZcEF
%4D?@V.c\PN-qZmcbMl"!K`Zs?[HJ[l7]oZ\3Nqa:D;+-dWX`l919#LJ8<UEN&SFS,_p/OQ>KFX"2mhtDq@D\pr8hNVQ*ELZQj285
%0!+2_,hZ%2D.>e+7]Wpn>:iJ<`P`"n$q[*?A>%^3Hg!l=Yb8J]67N/LV\QL:Rcb/:6-D>3_rd73];YPh@"=aojSNP2,4aE>K$_>+
%U*AVg/diO[W_s<RRfFt49*'q<2heS#AFb((?/sT]X#Wf.`7;bE+S9Pq@j]]#E'n'Cg73E%\gW9LGo.h0rk,!Z=DS2Li^g>b:]1!7
%+J/LNT9p#>bX,7-72&.g>NdteHeQD0;j</u3N`A-4"6%2l,'4la95Z1@Wm'4P^2iik8kqCbmp4l3H1#^h#+r.gtPVgr>u8Ed5sEk
%(oicuF"JN\'U&-q7iV!XS5U\tf.FdZ[@R4p5QYT4)^P4m/r:sc@joX2jZYu\_rWaJa:g!CQ[]M/il!/Iioo@-<63Qb3_hJ4;pRkE
%c.c:Fmt,giO(JIHFT,5O@XdRpF!3L8,Pe@;7K]*HIYQoHa<OAb])BVgDip0&/KR8tCb+U,$I,Hl#/=b.^:9CGmYKt4hr6=)cUh0^
%Nmf?!1+!SrW\DE!/_TCR,9^j#D(9VK[h.eOs1J+$Rb9;cgCno$]FK8<Xu`'`k>$NDeW/H3hK%@3M6@+'/jAdjF'*4!'*J1K.]0V4
%]8:YFRGEQD7J$;9`m((f\[k\Al"&!5]9LfFMh;0>N\],_dd:Mg*bPME<Rb6I$8cMc!]G"?e9JqRZ^$c>)k`,\nDL+o"IQ1GZ_)Va
%,ejNCq'E'\5H*0Kq[K>W2\nu8+Z37$GPYr)jJ[lDp,[QTShN,[ITgCA-e3F"ouA#4"%"3[U\SrHd3<$>A:nkQ%*O/##8*=D7-5fS
%T'-@OGM8Z&nKmrQ,$:>%lkL=(J>Q_OnO,;jeJ<As2VNAZG9XrV\<nj#pj_[f2A<9VUeL9Q*]$5:mm&0[MduN1`J_j8"<n?+''^o7
%4fU&b72)NMXIHTo5jDLTHM>P0J3gAPhE<.VEEd%=qDY-Li8jYA<C(LG$?S:8jJnuugPVW0-faLu($*8%$.TXpeN7Z!@^QLqb"k9m
%Uq"QY1P+1-8)!bglTh-R&G&R*F:6K\&Xo@Y"]!:<4a!0jP4O;m$o"OPd%sDsDVuIaKL<W`12aI0.>TI8cjhh6@W]G:bKbZ&m?@<L
%S7FfSn>C3"-$?H;07U$8V\_;fqZuVb_;9oScD_&6r8"&u8aVbl-m`tHcDBYs;@Kc4/I0o@_P*,u>HhS$pHcj:=ns?C>d_r)*B7:j
%B#8_2N#6I$o4]*GAh")S.Gt55VUYMP1bkBNT9#@rcVOaap<8c6^.jM)PWitoB9rnJm9ES9[^!dT3;LhnN"!j.Bp:?&$l:As:p5)d
%YJ@N;OYP;%R5M_=f\$oRmU"#=:e*XK>0A36+^093YFT>,kkpl2A/1Df-,8MjT+pS#5!ds(IsKn0;0<GTPo+ImS\E"OJshVbr@.X8
%pZH^,Uf$s5#=q=iD>;0ga/gATcd5I$dfqfr;K?E)lgO0-)FSJc3(QIBA&"(Ojk+c7J;mjf-BY*_;],j^,j7drT#l1%ZTRYMCB@go
%kaV/L63i;_NBJBd[R5-c@*=s3Ju8:t:13PAT_q\c,;0]:]^.bl>,77::MI'JT5f?_0;^m.q)%JVNu'$,=7Y>c?$m$cG9\Ie$[S=i
%LD:t'I.JBUO'%_[s4F<Ej)7*486_I150je?E:JWB#.Wt4H,Gj%'t!?AUEG(JF:F+%SY&^i!36;5h9!76dlSbS\F9pIPNk5QKa=9.
%CTF82`=[@<+><i`(?,0p]#$A.XIiLAqjuIR//f&0U'F\6RpiGoOQVIlO#DT]4.FmVCb<YW;e5?ejigRC_=Qg->QU7C>JQAFHY"G=
%]>s)RHV1@p?k^Vd`UOc^7j`pfr')7Ms7FA-i[mtT7JXr33]]%;$+])<(k*g/8)Oe!,<YB]Uj"IUG6K\gcb.*\Qaa3_.&F$No=gT$
%5:_\(,Y*Hr5@%4S[H<I2e@^"(d?3$f/+3="]L+Y?\(gRJi6,O/I6A]M,#JD(%T#H$+5)XBZR1VmHG,('fe$8]p4Vm"dI0gjAJbM)
%$+#s\ZGqPpWc]*!p@u$tG0a?C99/3#i>btUFrLAL')2>o-9HhXgn'J&m+OSJjg6,.(LbP62r3jr)Y^(C\#8(_7V+R7.NHOi.5+(:
%kkF;_<S'6W4"1Olm7Dct%P6=!F5K5<apK@1VVpnKd%gJ_[,H`*4\NC3KT8t27k$U>@%b7QZ\$Q6Q/'4TEtge?7,jqG1<SY\pcIk#
%FKoX6`:4bcRY6pEkr7)DZ;oZU,@PS\q_%UI`4=T&4nlu4^/rO8n9]fao$?d>@fk=ZA`jaiHX3)bCq=8,s$YEgEk]9VTLs-/4?O9a
%A*nhTk-cYm90-*").c;bo<6J5oZIe+7"Q?3"Z5OYQ!Zb9j(F1oPrf&j5L.oR2&<#hM$d.MdMQYF]f8emN&.71@,e>W@m#HfPe>YM
%[76W/`bgWb+'r4>lU-ujmJ@Bo"G,EU:Q$1QVjET$=q:I[^;PFa<E;KL8P.,Rf9dcC;-Ka/6k\$U\qKLA3_H&p_j/qqm#jRtT.LQ'
%p`r>8boFG4$D]bJ8C/IO#!>43L/2E>r-L,729m1jXQuJ\<_4_gopg:Wn4Op^<Qu@LWnTG]4!k?=[[JfT1&=IO&)!Nr#N;j++3O0%
%?'H$:_@R4'Hf,2Dr3H"\Y0P=0'=Asd+NUYA.pG/$*[A(5&)tY=Zo]'?hTB3+kIKrf#M`(a8JrBMR_7`&34efPD4fYUW:-E'<0[#t
%Q2^aqp[aS-3,s5M"@(rF:n141$$%^(\TfsI#VU:LMA).bFt;c70XVQ**qk\ciIF",jT(:<IPVB#W:^`G=%G"%41s$$,1L:34A%`Q
%%dh?3&g8,9*gY)W^OcSe'?-DX9rNke+udCi@_`[L!GHJ!)ZOjqI`Nq%%4o8SfIe+@`,XdSTIhJB(:Xdg'40])[CS$Q>p!R<9f'n1
%r#Y,81Z7P09=Q/7AZLEoN`H/]1_D@<-+&BX7S5tO:/7PaWu!i6X#"VFbd&gD4[+F<?li^\`+j7nY#G+BgY&K-nUT63HJ`8PP5j5_
%YD==Q<+HOOZRm8n8GA]SFP4%=+KFcfM+DYT2r_"E9bt3f('S/OG)/2):/$%+448ZdlMR^0dSK.*TUpCF]%rp^de<#Mi>*?J9`mH8
%Rf<"7d-*;/g<hUUd&sfC[]uaXX9!Jop7UM,rW3lC!NOKZh9a`u@-WT5!M-11LG,q71W]hn7P`44iqKWno4Fc;mY2Z@]:k,=6>L1E
%^h@Gu1=&EaC\$*B?-d1dI3:P_-BK@?P4+J7ZUu=S'1+.g\PWb[PV6]ioROd,joV7PU/FS<&KpYd^P5'iS"ksR-pY,5@#A.d1uLQ>
%&1P$fZ(pAd5f94bInhk$?A2cl18(1*`UjADgb,R4`P$dF7.0`iPXdZ_'q!(Q!S-GBd5b<'$I3il!']M>@eUp35;Rf&Q#p+eq2Q1C
%rl>Ff#o+PqZ._K#_Gee31Km.2Dg,"1(0?Ni8k$4)=%V/gbKA(F1?b\N!VFq;(@@/p`4>]1:/89VS\<7p#<5#<b[IiEGmIom=41B0
%"IZ#sX8-u0[4"6B3Mo:?6I9!`JR+=U=:K_D_=>j\Kg\TJ/^49?[MmDK$R0+j]f&@moDr-9!10dl^))soV2=6OUY016>C'.;E=M7,
%p1?6Xa&=&8_[Q\1Qoe7Q:!!iTiT>Q/S1LKEkTPMU3CB,RMWIoi/hQ^"NJ!9h4$BpdZs9`mL,QRJ#k"LYZ`bF&0'GQiZhCed-s\mt
%7A'^c`$&a/Oi]M@$+;!+M/YXRZ`9!iaE(,%<>?WWWecHAnNk3W*(&ZAd%cqDKG@rBX5tO<Di883Tg)kpa_]R8P;gF@5AD^/S62n(
%8a9/a5=]6AT,e[D@'I"I=K^pZ]HC%<i2\m%_;987<:e;sa+^As%0Y@J?5qPTR62@6Q,d_$#kFn*'(\dKBAeOFK4KuuB"@l_IS#2u
%6*r9.S(jYHCC6V)iNR2qqE6.3>30cVorU%J#8ASpEk<POA^I_'6F,7c]!/.\o/64rEgnZ\*5/jYf2:Y_j?p-8XmHZ>>]Is-#!d-J
%G)OpRq<KUSSd;dOLoKJU"rp$'VV.`U?/eZ)m0U>G@WdM`EYM$h7X0k<gai)0V#H*ODEcBAW(j?MJ^9kWPOn\mG2C%Gll7T3$&2i<
%Xco.r)s/AR6/@t*jOC37:+;W9N5hakbA1V,k"##@4,RGfPiBOqW^$icHD"\Vh[<X_.@\!"d<s^io9Z1DLs8(DIU+Z"IT3qKT0I8U
%RVaVuIi_h#%ECr[?QTUq4f2o\8gEfjO?>(DZJ[9n+E_)0M,7R*d]lkb]9b2^(V^4dhD1o%"MeO5.nk<Hqb<_oG@sqco,VueR$?]/
%UR]p4=num?0s/aFeS"3GQu*t"@s7?43&%J&nF!hMEpnV2Fr*ZeZ"NBsaHYXWY+EikYd1IW-GV]TlQPA.e,(3LCC?QAaOBfY@f+"k
%D>8(9VIiC\gs!t_r7[=3.9XF`m?O5mgmXS1U<*h2Z/9Htm7&$o>ulC*E@Y.Q-";e<FQTD6#D\?]'hgLq3&!/N+A)UWoePl.JDq3t
%&uQ@Vp)/nS,-lY^>05ds!X+":h+aCrcKNu>qYSBMVFQqsWLgP,q$l)BEEBKmf1D5EgV^_5#$riL@K]hQfs^>b$8LlD5dZT)&iDg[
%HCg[sL4-7b[Zr10!Mc8%QRN(Mmu:GtlmX;l8fpPGWY55kNKNl:N_V_JUa"E5"fgK+?@3>('uWd=\>V6KMTR6@!0Vo:NT59?l"X\a
%+h#L&O);C]fTU]UdM+Uf0g8RnXqtQjT'G3r_l->4&NX7ea$j<!P/<F`G@%0_H;)m-artLj9a^utJ!^!>4QZ#!Xn\(SmB:@2@3oM9
%@aE3ilkUKBcIQRKK<P1?j"<OTj,[;=06s4b`uq't0nS.E8#+PakS0Dqa"\]J92UV$ej=0)M.uO.+b_Xmf:Nhqa^7^**53Xmbd9.2
%9"+V:F&U#-!LYj'->!Hk&LbBXO]7"GJ-!"\\a[.lE=1N7Csn3tpLE;+J&RAk!$AFKid@V%E6s%%L)Rs-[G>'Nqq8q_=i:q,9_-]W
%(UiU(1nrf@8JHf.k"7G'J(SS/0E?&GDOQ;3<hb4]Jt\'M#=/dI/@Ueb(nOJ(Rh<gfW%j_J;S'Z@P7^uZ*!U#j[cX#D]/9l1p39TI
%4p!AfFkt0r1JY55gloMifkHOE=\LWE3/9QKCLaCYH6d(mSk04-R4@,akP3`g]g#tiKlV/_FnXZ(Xc[:.J*pAc0G14WdQ&q<[ODoG
%R.PXE6@)[&NHqgJFG^-/*$V=X%\Zfh0M?8JNWtB.!MYiJjC+7NmjRLYe;?EO*ksDfT[imN$/@e&cG]jK6EiRF_RRZ:[sojJNCHS9
%_F>-b^XBq$<2/Xj>L45=JYUDu?PB!k`>S]Y+H,",Q>6,b(8a4io1_ohEj63*`u@m+S$$K?0U2/p:\Pk]cR#qm`K5nT5IjWfl]6TI
%oYP[=U7`7J>^Dkj]hb.G0b$STqjsdC77IehEgBS+"D]I7V:j1V;qdsQB/a@Bpb'5\/1!99W/GMig0NNPX2ND]:a0JJ=L%g/chXBl
%RU2)eeSE-X<NNF)p0Ec5[5sca63(>[9/6*Qq+>!7$>*fcNNMRPcn*;m,BW_.8["-M8Odl)JVQXOa.+=&qW2E5ksD'Cp5-206S9-F
%+\NROSrTB7ZrNb7?VM-'-tM%MnK%:7pO_3bJ)1Tp8`V>a/Xi@^qc9$mO%HMf1/mnQO3krgdep@P!AG4)=XI7nahD[g&\Jq="1mk>
%2lb'=k5Hn&g``.gQ0PVd9]HtVR_<72Bp`Fc>l&"J$p=4XE<,Hl*br$<"PH?0TPD=65f`^KYLjRAVm]l'c8UK&=>-U=V&YmkQ4.Z=
%ph#5t?"2[!S\@X^)%cXNeT#BDc%I_K+nA!g<*"OMM,Ks)!H#kX^.)*94TATQ<mLCW2%A7u.7Jm(g<09knPef%M^k$k=Q\a,[^(7@
%8pU8qh/+lX+C*.&<bUdJHZYu]%ELBooMaBY_+/-0a`_\.Um@+]mj$K4rfWj>eOCL$3sO71p`VY$4P/3l@8b&o#8I>j_Tg64Cj,<T
%M<7s7q*b7&,XL);;7F:rL6cM[UAAHqB"OWNHBctD,?^DXH;aH/hI5[qJ[0M`/Jo@Oa_k^5?NfCVYH3%[L4GGVBWCqC+2:;Q#7K;h
%;Jc2K/O"lQ4V;OMZfTpu.44^L_OW2<%/5jb24gqmpb?`>fSX/*$L$I`ER(@1ZpQ5,b;KIGf+_j<]fr(8@Oh_7QfAB?V6u'oARnt4
%RFiY$h7;hhg=1CI'A]I4Ek2`^?QMifH7!'";dE=c6]/!6<Y!lof0(Xb;=+3,3bbY7FA*WZrC&ZOWY\-S(hG!t#d3$KX\;>7]/YB\
%H,^K77f#!TJYnpkmn1b_;(6Nq0Rt!W(s!A,Z.fZN^dTp?@>AkJ]0U5s[[YC(k9S8<GZ,+u'&2I4WbqkN7rfQ.!jT8u0k:3AfV*i&
%7N?<LNk<%<;+(tu3jOIIOYB(5cXU-5WdFD,19'$A_gXC3J-YH5lHc[sSf;;$KdhVTH$ZGA4eB;tCBco0B4(Wu]1L9*hRo&U`,6oR
%M(*i9=6PBU1P?0]gmsoX@nq1n#l/IJ;u!!_c>]=8)TVY,8u9b94[%++qVQ*NU^Hu+YCjNG9oDUi[*VK"8Rf&0nFPFs"49^O.i@k?
%Kkn.;YnHgGT$beTSDZ9o=<*kD0?I_!:j.63*[%$qK'P]D)6mc(BY!1U0*!-cA6@N2AqISUYTaMUCPjTP#F\]hFCR)[Z3Nl6a6der
%#>"lQCicD>+B&K/KL0*S`<\HE<UVPDDeCfiEknA@Z#c8!&%2i[0^+jne?#Z>B!`Y.O/rs\9TH`u,aH0HE_QSG.7u7p?n9hIX\uL@
%T`V0a%-A#E,S::j1=3;H\g977278\jqC:s=!Oo\OYe^7rG<F."?],(iEE11l.MrC's'n1=>4+8WR$,$4^d,E:j;FgF"#?&mMamuD
%/`K)n-lO*5DSWjWrEGtLC^H1+Iu2BlYeL6R\*d&H;3n,Es$MM#nQ>@!&>1s"of.)"IZbRifP,=!fK0gUi$4cC96J+?C^NK=3q9o8
%ZL*nmS>c5U-*94O5!/Ht7`Tlh=Y2Li*MChD=G2a+*-SaAFab9"8+Slf2Yq)"SN3$]+d6C'ci$2m*s<^+O$,mEC&KRIZ`!Q`:HK/]
%QAKKt_Sp]t\p]7"El9=;Ab4<)<$(%_17`GN([Z!H@WuDs&_4U9FIqCOf#Rm,doqJ$*WC_[jC]m:?K:8+g%>!/EAXeW_nWNjn3\<U
%+q.ndA$nFW\4Z$-"kK,.2GgR:O\3QDcEkAYDragVap5bef1&6Z+;k]"-!TY3]\BU?O9pe3XT*@YoGB.\?@V"c*k%Pg"?A3\OC=,)
%W"e=n>Q"1OIAsqn:^ZRUR+3320-S_T^C`6r_HVV7-;0pc]\A"NA?_Vmp`btkcd':3O?Sm04_CVjF6`;`*(?$Y[NsBGhYW*p`S,!.
%(:&_/jc:Ls6ABO3)c!i(i"%M]282j;VA\9(fBA%8?K[Y_K3XFu4`&0[0E0g.kK7`*ZTk7\R]gUWN;su0s-i0QY+6lk8#Jn0a!2gZ
%akBgZ3Ud"p?jKrg[Q?F5=gL0]d%(b]6BBcYpp'XhTfBZHTN-;G/ogBPln]Z#(>9HH'hsPMN#glEZh)LWXW$M.m[)?"P>H+>KI0R>
%)C2QAf7l?)P>="HQ?/C;QJ2FCiTL%9ocUF-e^+GH?Y>'&dMK#`<*GP9;6;"pWrmg75>F>qV+j<_E3_Q4F_FAAf[fG\7I3*u&Yd"'
%T[BJ@IS&tS5_Sg<;&?`a>`nlMB(1W_rE!Hl95+2oirV-`F(0KLlB9CQk#A0/S<5A`;=9*;(>$";;I6u%Jp)qQR0>sT48k+\Ne._-
%:103b_:]BQY$(?^UU)cD:Jb;E2h39f=@H<Rbc9$nkL!dl9"Fl:FAD+^9skQu/hXSo2rrSi]q<Mpe!aj("WV?O(=A"uF0[8?NbLgK
%@k^ZY!GJcECqEFYfitbD1Wh`SdAdeW768:E44,<YJ_9;.JL4ChTNa(`l)64MfLImjI+6++F_Jj\F2l0I8.1mY"K#de&QE],+Uo'q
%*e%+nOfYJFEPi9%.m5P6&@jadk]ZK-glI:5_NPlHqY#sYWjVCu94U\b4#n=FB"u$[]>Y<GdMi\]CEqf)P9rq^-cWZcS7lr%fi/eu
%'=h-mUZXP@\*$6&jEg/I0Sn\bIuP6m1jK'K4Z+r)6U.!b;s*]Mk>be`75diXSWZ705p3LUC3=+b$Ccq2n`]+E]Q>8,'KO7TPUa4[
%j:P*dSpAf6m7'2`BM-Jb[red[REm99?S[Hkf@OR(pd\eg8*AGEmoZQnR13KnU5&MnD!pe4+#irQ_4I-C(S_[o^+N*up>HJn2@27:
%O<53PpmL<nZHOlS-,j6cMj(`=cgJNe>fS,UgK/coN:*P/.Bbf!.Q6n-jl\Eh_c)jXpbk!I<FFUm:);K&%V*5N+Z</4`MNBf<AFS(
%mqLm4"@h^;S&,'IL@eJROq8-69"N'H2Y0kobrZiicfC/>kXo=-=:11L#\]9HYd(L]>D_t*iE^1ij`J'3Ad4,0@TCMb:LhH(&S+oF
%-GCL*L[$'"ZbQUpS/oDkpeku86hJpe?ctbX?tr:oj+sPR5@unE^]p8'.ki`#TQ._(;\du+(`"$+CDtN9*#M_h;4"bOOSmf$UIEe5
%"Yn4TcTBIP=1I!_.^;1p5>tq=.=[;(ZA!D$72N2L[-4;O1s]noJZ)Es2msl"K;(mqn)>Ab*H:8Lf.6p784,!.&F#E..#ud#FTZf/
%A99=<h6utWpN&3$1[U%DFW%W4*O:L%jK?XdlROu3AcR)LA\)\CQEh4N;G8Bf6eHUh0il\YWM]M&U(rdCD(!JBioA8O9XJlUJ1n'F
%9/GXGeCt'==fcAk]$6tgV!;>oJB9n?co6l\f%ncRHrKhk;K?emGTUc,)XQ882k6PVHd\*7Qh]k[9lm_!W5U$A;N&d;1ppQ][Ljan
%XS=)!;g4?0SN'EaX\L#Wd?[[6f1k'%<bEYE8-TfA)i8u@AD3X;L&k"<Kk#VpVQd/Q9EtigJLGr/2-[fTN%SU8<`P9hSZE@+?V.qV
%XXfhe`:bXO6^nc2q<03G_D]bbWWQV]3GL]8o^GiND74+Cp;2Gh9`arj\!Vo"Ti?tf6E1kDeFfoZd(A>o_J8M'lu\Et6FJ9`]qf!7
%`"e8*)\j.c!F\&e)?eg3f)%LHGi]7TZ#deB?^&2f.fkNn%-X?o1=eaPZ\8#`rE9)OTA.qbkRD'Te_FMZ:-13o=j=C7)pK2q\;(Bu
%0XGEcA68lRR*d_OCT;FKbh+>?>\LGF*qN)S`!CE0Q'$dp^r7R9:Kqgu@QS@2R)MGR`1u?(5:lm[DO0o<LfB2\\&YPja^:BqK)J(#
%5&CP-G=ZjN9k@NW4D#&UHk]nXqOe^;1_WM:6nZ29G-"PUHUGXf3ESBCIbAe8gi86A%Q2I,!lNQ5p<I#+dhFDe,EGUo\!t=@e"SFM
%&]S]Ll8XRDB'Grl(>FGn`[^&3lQD>.W6p.<74RK=3ibqFG<9%;4kRu1H6(YY$YMdV8am^GflL>7S3,IOEp7Q1aa456lH]m/?2\mA
%Q\sBr.pjD,4X>r[1j0lnl2b&n0'#Z:s-&j,64Zki0FNjh9)QYA\60[A0WElX.Cb]idpOg!I5-*:^U>/3X$7YIEbn#Tj<<h`_U,0%
%1a+s_P?BAYEOD%>`@kCk,0a[EF:`+HQ\(0HNI>,ops_t44s/1q,L`@U/(%FN]sT.,Z(00<9Ms`66ek"=&V0LFCAJT9QBX:F5VG](
%$pIS04CQTIU0Hr12ni:Q;HcZg(;b_\T=pAZ51,8h?%Tk/]ha,i1r,f^d0&i)VCK1V7)C,=lr*KCfD+8PS'V/,F-9]d>^J?DEDNTd
%cNNf,<U1.\CSsZuc&40JLTq)HZq5,%BbX>Vq0$.=-('XU9a/fS\EnJuc_^XJmsBYkp&q'J@B\,=rO$LSR24EJi6dX"CZcTX]+^Vb
%Y*jOC$%$ih;Gq%lG_5^3E]!l;$Ll(C&aV8*W/W%;c!#,H@LWkAKlXPnN2.+b6Wj&U3RMOrG?apSUd/g#DN/b;STZMK^-Rufod=pu
%cta`tDg/-5fs^<.;ou2fd*sUi.d9f.>W-de-k5$<RUs)HMZ9W@7Z#0-YtD=^!o?A-X&-C5rET9rqeAYpf_jQG,_5/VF+7k@i,?p_
%HP_mQLLOHr3\Z6^_XNG2o4^2=Eoub\[[AW<\Kf(c"&0&!-"6.$H*'tRTfDS`ZkT\6bY)6k\W:I26Sg=\L2LE^j^U,ic#"QoE>iK5
%>"t1_)uZk;Obp1eJh#0iR4>KD5u_<;%lu7Sba^]d&a[X-E-,'MT#s\P\Xa/\7ufFGTTC@BZ$U(l0aA7TnVQd(5n?df82*l77C1$F
%8l':2P"$\\&QF3`C4T9A2??B\X@LHIMNf;CS`XtsK5dh)3BtuB>#a*;MI.!UmiAD21(OHr7,%GCI>gN;i-PJ6$_?"HXGAHAqKC2f
%q#mI`HeiK[8F+D@4n'PU.dAN0ePfn`pNtMi?J/2@2")I]$#*HEo2km5N?aFgIDQbGWf$FZC_?@`1:fs;`S"J9#[!"]n%@sXj66I=
%&Os,o^lH_-IGU5I)d_T`jZ?;m]+@n2+^2H5>M<`2>J!@i^iO>`D5e%N<3tI*PrGX@Prk!^e6D<nI32nLCF`nE^OtN<@;h9>MYV5q
%:hCiX0of*0+S_JQpIcdL]LJ+^I"[pF_5p/@f]rUg1tk@WhI*`jZfii1U+p4GKX%'fgDpaI_#cd+IF#p8YbCcrn+4,5V'q0S4H7aK
%$01=eIZNORjXQX6H$J\l:WWj-G#ct8`_#4SWVmS*O;6.aP6#/Wn;NrNC!=D]!Va-K-p,uoKr4S)`@B_Q>_.W)5^8)N/4P-`cQ2iq
%Jg1VdY'^H.eV<TB7A+Y^>7f-Yj"3Tu;gVgE/=Ik4+'?-3SU!pR9(1Z@n-lOV:ln.&AYR<g'bW4gQ;<#m=hikQP^BNN'=JI'_Dl>D
%f?'[bUR`sr#%X!>7YCMt'o74)C,C__?a<9rC4IL4hn\V[6;qP^!KiB/or7]>:kXWf\"q97hY.4a4JCV1il'=`3"1cm(i1$j]uJVU
%0%8*VWK@:1lH+s.l;MU$.@uc#A>@0Z`j79^AgfPXG-`IY$pDFo``N=R6%UdI?U+Y;HUNfC4K!TuIDknA03<jRQ[@?YD<#'pP*3;R
%4g/_MW&EG9h!fhANcBKSgmS3jcL8O*1R=hi"==2aG`SuDRb!m8XSo[J.db>-:tS\fRslmJF)`T3@18/;`_et//$;3&Tq?+MA*+BT
%cB5+aM!Nh8ll"uqdag@Z5G1O->QQ+ODZV#\HmGm!"b^mYa?Z4Fh[X"qo@d:F*/3;"9,aLoK5IEE'W&;3q=@a0L<]%e&2u`=apM9<
%%c`D*`[p0+>DJs'1[P2["g4VL72U6tK;Q+bMWEEBi)8VIlB)#\i]:\c0_TEpXarBF+0RqKj?;Tq,-G_LA=WcVPS3=.-ALA&23enl
%IsY5WhfmB?ZlUYpJtTgmH(K!M6-?#<f%+8ET,T3F')$Vaa`N4J[^n+DN%7=58A^tE."\7opBEGO*?=hH\TmKAB2MXnpWC0&e9aIK
%ak=lb>3">_"9fRg1CBR&T*tJTn%W6&>Wj[>4CYa6*"CZBc=oBe=$BmNFiOK8noO26lWg,!)P(G,V5ksg`\+)pTn'Lg!&3aLGKo)!
%%=?i9UX7(9VYn)Q"m[+(q<VnbouTb&m<(kJ&n"=Ho8J%JFmdgs8!%$*^-sW0EJpDj!L/RW(22.q(tWn2L,-dk-)ga'qi@!<!$_-<
%]YUuCWUWpW_S1%GA)FP5bSQ<sp7B@=BJl#@B6RE=\)"3!"a2Wo)YtVMCpQU3?9m5q\fa?t<pG*`h.HZ=2ObZ*@'`^PC[2nb#Eqe9
%-Uu,T1c6oQ.=jhN,A%S=\VTW0?K#5Wl\*-I9JR,&;ST?igX_Y;l'!$)._jm>^a<@MRWi9\(o)Q!]QtZ6>`/Go*7$!qA\TkliZY[\
%SAGs<fe`p#MDgRpUE)894Wfs>Hg[ZR--^/$N+3]kAN?0)Z[IdRJ)B4\BO7K(I"iCrnhBKHIXo(>gNU=(p!q+q7aaffp1(15e%C.5
%4lM,>8+CsG^[JsPfB:0qT<eLEHN2VmVK(>fHsXeeDB:1;9n2N]35:I1G?Fl%hE1(q?\jH&4on[IFbT_d'1i@(VtkJfiG.5"kWM(+
%<;mSt,S,5o\C.g(n[:t;k#(Dc^)Ur8(@O#XOhaGJTj2(l/,t&eULBMbCA/&(=RST6>L*duG<;FB=#2jAk3&.1S1Mp1D;,"o41ElB
%H&j%rl[O45W=e;S:sZ;d:#@hGPb),1i9;bi-upTZocgk;+c[C5\)7mE;T)U%l.U4mB3IcpjKR8/`U2hOY"7L+Z64.5mO:rf_JfM<
%VVED+e`>tF@OOB8q%G]q0J_eRjK:;Len3CJ,?Yfc-*H\.l^:=-Pc]&1#?OTnFYu6ZIM!]7[.1B+\44/0S1DqlU+TpX>AC?rXZn6Q
%C6.<]#m\`h>C-X)Pf2P4:\plUmd:*fff?:;5.;H?+rBgH53KOteu4@O&h$`g@7W1:&U=6.%B?@[:D-1,*Fjpahe!SrAZ:s#DK'C0
%FRN%@k"6$uo+!oN#6HL;<M/UBRA*g?P#3@sk7bm2Btr$f7VKso=kQ=929Qgq?ScjT'N'\3L?VNt:6WCW3[L%F8U2pC*33\"6)@Z[
%Gss$lrK1HCe6TP"9p<Q?>(Icq.\Dn2M(G>M]?aKV+;p@4FWkZmWo$ErMs#MOIh>bbBIW;F?d%UBe/PWU7*j$QPGLWXh4bBJ8!TM0
%X%.^9]n%:tJ*d9]*]6C]cSIV?5.5q!%^;TSc$pa#O*\@&KW=m88$U[:DudjGUOAj2q/3Y`V1d$NrY/5'?'.0K!NDN^j8$<Lg*pc4
%jB!#ui1JVA"a/a,4ONTj8Y%W.^*Cnl51+mXn&$@]@)oEK,!k=_j0V81+_i`R&rreSLJ$)N56(bsdnSi,OiI?Qps^mKmUVZoQjdeQ
%M.cn'6Ka+uZ0Im<EP-)gqqoVZWZhX)[,uG#lo4rQ'k'eWIUO/^q[#ffXH;tY4PfR\T+Tdip&t*,Or4Q@hBG8T12Q=OpjChC?JH7E
%cr_C_<bPtT8N2VT/&p:A!`HJXc9%!]0c"1[)T*^H]17&.cT@:cW0n[D?f$BVI5kKN()^2g5KLgH&3J9Z#<Vm;rYfIgGL''6F'7I(
%4kGl#86J<E%5@hDB7ZQ=dqhrC/)!tU!b0u^f-@9cSuJgH&oYc+cLg9Rn#*RVUAYgm'uG&4OD16<cbtmNSjXOuZ)fg)YmKPZ_4@UR
%MWNXL=]_uL-m?qA@CTVEq-_QS_8AY?9A_YR10T`_@gqSTD5?kQqQ2.B=O;N^`'e6B9\-e;\jhTX0s^FhGEnhJ42.>[(].a[4VYm?
%Y]6^87Q]9d'ZH^/Rog4b-^bB.c%_kK:l@%'$O#faj)'kl94]g@Q-2As['DG4SD]Nb^$Lu@-\e4H,-:2%b(s)aFB/0)bR[E4GG!hT
%@4gVHBd%3BQNEc>FWT#?_4SELg[TkV?<\::LesMeX-06E'aH3:l>%MW>QEuj`F2KA_rlk/2$H+kHL,qcUG0db#YIUfaA=#t+gO#.
%s&3lS.nLS1:#OJBS.[d]^ChQ+C!:31)-l0]%Xc_F`YDH'i=N^Fbm)tV0O_Hc^s@gI^JejBjsU5^hQBn1e'SMl%?ntkAeV)^R:B:<
%40VB#X;(7*L?<^F5I^36jIctA>n?KqRHC0XWbZMX)dYA</u]Zk,kaBW65I!6!r4^JJR7g1gS-0P\]B!udTnZbdp]P-Kq3YA?3r77
%\<rJ(HWpW37Yhn69!!lR[kUUW#bMb:3!XKl4O>U]WhTqT-2[mBC\9TZ@C!=tiZ;kC1R^b6*r^7Ykg:F_:NB<d/%h#%e[M$?r4L9O
%j`D-PY4175Zrp(4`uS=F.+$H2*H]d%c>;6E$$GkbYi6NBENlJ?Kf:MslfpD?.eM3tV/Et^>[0qYJL\5"8@%F;+;RsQqr]rlER\E8
%/]8i8?]fA\Ifb9XNjR7'*Ce.9d.8p&6GO<F#LO2AOuisA).-jS3tbN(C_u9%>T;H[YL'sMUA"UsleQ]#8"-89?bl[OgQVj-"-Re:
%g$Kh^OBeLH2YI'<@mno7mrU4XJ_dk-c=4%rR2Hm)cU6LJ'r;5bEIX15)qM,UWZSF1(p$gAO*@)d,hEsK)U[6jG@`XCe?:m+'+m_T
%\3]1g*o_]Whb"qlp8BOHagE2J+*41Fqd_rRAc?o;5jji"S9=sYhZ(Y04rakLd?L69h^k>h[eGm_I[hcJS;k@F-NKH==JP/9=TNkf
%Vem6S)HY:64@C[M5"u#(fA=%%KHd!S]7LlHml7;Q<$1O"o^I56=K`R%'AD1JNtWZ'j_c3qhVX8=lPl7X#SUPsNYJGnLR844klo&(
%M_B=$if1\so$Jd<:%!\)1!59'EJJ-@j-o(p:N:)O"COJ?p2r$4Pfh(Jh"hmt9,c>ka)JghC3I^#Q0sc?QLiKJ@]KX=LFHWMY_=i^
%Ess5I<9gSE1mh@L*Y\)'4L[S1O.75g`N!j8=/)o]@.$&t/^$Uq%Y#uT<M+HZDs@jt^Ea3q:ueL@J?HY-.-ieVghX'0_Y]tSR0fAJ
%11?JG/l&j1+TAhhaYU'CG.Cs>=Xsr1Pn^3>#41hk2j8p2P:M$REqMGHCM)na#kdF:RS94%e)/3u8m(UQT6n9?Gs\-p0ruUJNo)h3
%\7p=?nnjZ.pBc?SG7EA`6F^5Gn2hM=i=,D\OQ7ao5X`'Yc3YKM:$5E^Dn^t2s5r[Jnq`6E5QU>#+0U-ZU8q5X.WbnGQKV4A3\:pS
%[`W;37#3ABIffVOF"YMfB:jS=*Zcbe_cDS^:4hBKe*C[STR^3%3ADXs\50cqMSp0Te,-U6`:=`GnQ`1iTHt(!=XD:3TF/._[I33p
%#<_K8bnR%d^FAk$CRT4Y:3M@t,]56ueiNmaGSaRV+\j&l+eIjWgXK^=kiCe#)c?h4m<p`s=`#^<39cV+N+hVK`DI2\mjDAM6Zl'2
%ZB/)/^*_S/"r[/ph[c%W#]So`.j]EJ'G_iOHZHa<$b&UP%O\.Z>V+h8lq^65H7t"ON@jhk'%?MpjVWcI$dRAUULLh`hs,gLSrsAE
%Yii;7'GOabVld3,g#^c:nY.2eOH5&mjIlR^1.Z8NDIl<P[X5nc_tVA:E6<FLJ]^Z`<aLt,ld7WSEc$Jc<\BVdWEoV;lmMd2qM[s1
%a\!3+@sF6mk5J]?.Zm%3E$Ual>@(*1<C$RcN&s-7?tDlpgPpr?$EZM2LcPVA!)d=p@NiB,7V;iDAZOp^UG6ngobth.VKPMU5WZe1
%r<A$'X,PdI,_,92T<-tb/!TO+[tlOSAAf$3n`j*!'90CLm=onjf9p_?fo$B1%5q&,-gg$Y/-;bK/Os4*%$JpcacL0,G1Y[b:=-fE
%8aS88+"l^BN<rWuMs5[7"TS'X'M)cGGZj<+C]PJS6]<V8)SG59K1#%(Y@GjrL%hTYoU&l'#B*1eH'NN5>o-h&$UiCBVZ-)H<OfB]
%8IPTc\+X/_rMoY'`)=@6iTZUEOL*!o9Il]0XPFNP8fUj0^>6gVjefIj#)7*;XRG!%@l*jQnXfg'l6'l7Id"+[WC`?5q7inDgo<<2
%E,pj,EDf3ecN5NpDH9:M#\[*iJ<MWeJ<R+GQD?f#TsmmhLk_@.1Rj2N8@Z2eSQ$,j-kdCcbkJ;-T1W[;R4WhsHb.EfZ5aRTZo>2D
%$r433,HktCZA\uZ'E.7)s/6E)01<Y^Hi2?C^WQJ3#CkUJr[&&hNDT\:D"8`%=h>Lmc4H*L7`H4j1SY`li>0*F>-=b=prj>\+hmo3
%&$0(D[mrB`abJ!.Wr6M&:[#]RX+lK'7@.91$Yo\<au#=Rnf%X:FIaC1b6-Z#rUKX*G-S*JG:4FVb\AJms0$<%,>>jY(5e$3gBbQD
%+CNVbaCB]9P3u=FfE'A1OR@gC:>9DS4\34E;4EWWMDesSC1EE<2it6Ti_cKLS2!L&gu*JAa=n2@GGdUqI0u*[O#%L-X/IJceO_U<
%$b71&ZVbg]mlKC9s7tY3`bpem.XOh1hU<^YGX1L&$-2OX5.4=7LQH=ZVRs)jH\o%oEL/Qgk!`<:o)k^OV&io2aG5H;fWk*mWq1Qh
%YI:F<>Y<P[Kc*O;AR!++F2tY`BRu/WSJWs@B:al^hX;,SkcsLj'`IO`Vb7GTN?'3'\Y8C(8gQ$bo:RT[R:Y[E(k6U#[`H9umA4n\
%-gL6QGrB7>04r[?g+p^U=ZC>OE1H6+Oa`(:#C)b9!F6OY\"UQ-^u4Di18!MJic]L`geQYp1s-Kp/N=,>l]GF=-4dacVk)V'"c";M
%4H3:tA8InYUtcORSZrV2U=5ka-*YLan4*p7Mjs?-_F(!R11Lr$ig>"E=D7#-EWFkpGH^N`#,3ZulflE$RN/u*gcFo[9-%5UH`3ha
%1$H>253@euU/d+s9(:GnCC&!g#?);=5#)@AJ&!Ab/o;csBX(,8Tm#BpCZS8///1scqPiju-':6DWfOhOa=9F]HPfN(@9"G?/(#Hq
%Mt'QbPK#EDdN)4"9:Ho'in@2O$'OHt+l^/9QNI/)1HElBBca')>(2@#K)b:tMqoSIYm`$an>*iYPXsP</atNmjq>$LN_n!O_eUS"
%X_Ban1nC,Rg*F\K&;^8.PP<'ucgS#a>5SbL:Pg\80#9HKd^q?OTM(;*">P:d>AD,PJ[7"(o[]D&npgNFe1%@c5F4DU=9>(>SgYp"
%Rh?A5p(7FXh4gm@6`sH-)n!HW$JQ73H!E"5^;?d<cu8@[KAF[h4E#Ptgc"aQR6SPYT5uVC[P[#4'R$TZ22r;dgu=<gI`BCmS2\H^
%)HdGDf.Mr'Nn!eH![\qr\$+l:FX</riCm-\`6DH\gU$V?gruGX1Sat:!&bXn4N8;NF;]R1=8tB5XrY@P"N:6fQ$KpU<d8$ljW,rD
%VaJi:b>O!Z@=(08.#(%D"$K8miHh=1>ZESU;!JJ('RB(M?:k%u93DtN(aU<r8:'`R/b\)Yh]`8_WE+SZT,M&U$!_VV]/(23K@KEu
%AJWk^B%3*Z2@oi%[:?Wp-A2_*P$gmE:Bggj/(lPAhG`^gCM"]$DsiL&Go0OSSa>.Acg@bi/85f,qckTW\[H*Yaq'IrY=2,>X@Jqa
%$&AO\k$dd$(!KtP!F+lq;Rpg>6$c0Ak]ISV*5YO.99d1\AFl,J(#%*7W"VFhJS$:dS4ku4OgR>mBb0H?fC>g^^YG?kRM]eUfgtSG
%;s=$I21:J^33L*?K`]TZ>$aZW88DIs"O4kj8$0.e%:Fn+q-<.o,QI@M`tkBBU&.f]_hZr:E^ij.*jXic[]/iP^H;Dk3H0Q+R:0u_
%q)P#sjJ,J--R+A"/+hUJG^EAkCE[(?&.bYKm<W<^DKY3J:EIia,IV1.MRK`N&a"F4?!ZG\6_"""J"kYD<HXZSdqY-Fd.m39'Yg]0
%70m_fb5,9N#:5Q]_*h!bKLWF+s*eE]TaET-dd!qGM?ul'1Q,NR>??Hm#pH`M)SpATTr7P^a6i37;dBYu/e-c7O.Pq`gTXd_@[XiY
%J,[#?9\_hLh+L'6Y$%Xq;-m,Z1YT0rhHanCN76<,F[S,2O>ZDiB:9lG.Z<B[^5f();m2kj/P&`U],fX&#P-d.roa)"e:MapKSDce
%\+;mjL,Ij8mBH7%X:nCf5$r#jbu36d>%'h;r'Y^kdWa0.?/eUjnsV]*X9G91gKC=`31%ia&GT8=^Z@!3WcR;IRj`X,p+<BNiumdt
%^B=ZfQSrD9Z)Oj^qUR]%T=_MGJ(sA$/,FA$GtX8(km`J0J*=Bu`eS(lDjI.+XJ&qBqJ#W:"?@cCr!&iBBj#@(b,1u>"qTF0Bbu%@
%,D'4sgUD'M0'Vg"XHBlt-Hd3b#fojJAVJC;K*0O98p.J9U!/H9`R#4Vi(rB9O]K^=P:7+I8jIPMbGk,L9M7+&+("nfb-UAPB'+n,
%.-oPjTMs&jC=VZEmZ<@>T*J)5YmknclgK0GZq1nC,8q*;8mZ=.,i.H2+e(>]Jg,aXk'5H#9RTt$oLaA@QQjb/@'>B*E(5f%]Yu>m
%`0Z%IgL498=+5O$Z,l;Jrd<E+7>#^5s*jY$P>VCSJ$R![QCBKo"WfAKp>"bYWj]@3k0Zh'KCPq1kB.bU+g=Sr8`$7=:!2Mi7=ie!
%,GsE#)C^X<[n"P\c[rHe5a!3!U7k5^'&mG-f4^MF3$nst]\@IagtbmC(IWpUc_M/Nk_al)pX_u<G)jR\.!_E]HXpBbqC@Y5]WT7.
%Q,k_6k/dElD%"<pPaA2B-pfgfS:E7WQf:0_HYCFm,?`Hl1jj88.Mp.O4AVsUEiG4cdB,-*b42\T!l`aMj8Za]hq&JR5Rm]UJoL_T
%4LjE-]SJY*[%e'lqFq+K/[N;PUMN=bUQs1ED`^W+^0lDl[33AVnnY(]L8srDWiE.UNaM,DHf2Of'mi5a_&Vk$3"W]_@fY[r:Ig-<
%Pd^$ZK9,gCL5#F\]l0O3k0`lBQf0$irZC<:YoF)]4l<$MV4QliZV'2JA.slL?1E9pK]-G+m@<uOZb:^=jqQkFrL^:Yd?GR-;+F8b
%.C@.`,8!X$H:BU8,1iA1Z[b)dBrqfNJ$o5>NmUIi/3lo$s7[5P@"IQ2*Z7b0T(a%*Xe*1!+VFp]-7S<XSn!u>>k0$#;KD3*f!p^!
%Z8DX_$U*!`e;&d42!Z;sAPTK>4kSE(;kg#Z\Sg9mp\*\aAY\*Z8,+].a(cuPo'[Cpp.-^<!m5VerS8^iEN41t%nAc@6`mhr=8MNb
%_$JV.T9C[iiaf+72'SOk2)-I9D+h$,nOX@&Lk;RPq.-QRr62bfHFS<Q3bZgO4\5OPiSQR4,u)8A-gu.`$1tQ?19,'`#T-FhP8_S^
%l`>Jo&1ah<`9Q1lj1'f/NgQ";`>5Bf[N03oFMSCT/MRWGK8'V;nb*]toTij6ZBnEh'trXW\,Ep+>P"Gs^NV9C#[b5FnR6=`m:-M1
%r_(C;NEeUSQ!LU3#rrL9eW_k4NOm;?RDMR%&oq@aYqf?3-eBbCBpnF"elU?ZhllGHg;^B<4`ZGo7fCaL.NkqlV:)&fn51c`/V(e5
%)=@B@GK3$p)_])9[VNR!q`UGZcP;7(f"H5:kGYstH)I7lASds=?bOQe*gAot`<#/DD:?\7\'lY?q)NID)<]W83SU;kRkB/knniju
%DD!g%i8L9j+S0<objM]B=,h]Xp@!6N_LVF7c9+VI`._[oa_l>PIr%c]P$E@Q_.h=:pe;\&HKTRO&_Zi<))SgD`&NLP*bB_]g6"!c
%\[G5Dl^[:E_A=hY1"E==k5'8plu%[hRsKa11q:km^W?JfB<V.Q8:"0li=D4:r/]J/qQ=d23Gq.(+upWE#r:MR,EmD,#HBL:,,`O.
%/cXoi`J0uGFc[aB,p$ko?f-u6C$_FkBbCstEIXX)oQ(Z1+3.61#tNrX8cp+TJ>fX-\bjO;R&6q*J8Kd[(3MR6jsT4R8d5R0Ucg"I
%h[]/N<@+osEJb-KK^pGL]PsjHR]iF^ps&j(\'q,D:1j1nb8GAfmjWl6/&(,Y3]apEW`?7q`?&fr+*Gk5iI"ZGQFa\p=iTj],*DZ#
%.^`d@C)af__+h$,0mnD7H-&XMApUCJH*e9"7.6[hn!gQV+8&*q"%G/tJtBcX%/aL[V0Dn4Rt&'2_!#.9`Q.uOad*,3h;N"So3>])
%fTtd7A1EgW>Y5.MVih3Yd6>2]Es1VhlB`D4*'V*$\dH_8$%?ZOb44dO>Q(L/;%,K3O<Qrinu35ZmP'8QlRI_$NU",n\%"XCclu!(
%q+!C2hsXmb@a<:^TnP4R]ZOU]/$sXp^WDSoPSu871ikCjoqF2MRhUjM>$7c+N`9V0ks2tXWU`06#mdqA%p8S:UDE[1?.&#]rU-E6
%WM-k[fX]>?9[rh7qXG$?b=-&7O:'B@LcGA`HOBi:k.GD!)<3MOM$(c#Qp^[5rZ[%78lY_.T!4el(Z/)cj6,9nScZQH4Ya)R!T,j@
%f9kGC/0bSWQe=!j,6P6aV0j'nrkhrf?Z:MZZ@HDV!u")4D5UbK&p`0"\j3KI-lMcE_#m:V%CB)@=62q/l[d*H+tBg160Dr]!_-\`
%Z7[oh#JLo_iKfCi"mLu6qL+<(WCSG2O?,f9i5YPLn<*iF"To>$/mGi3$Un01)Ks%Y;]Lk'+.TWW&&uuG'=cpE^A$p4gFu14_W*WY
%D6pVTIFTo=aY^dse>VLpSpCX$p*7)$*R[+uGcO1q&*U/,G#)IR+?mga^I7P5+o^s_cY)D<S&1gMqB8LuI,0"(!r#nENu6bRUWT[h
%Xtm/,*sOT6,ldX'_81t'`N9UZ^NKi'Id+<`25F7`k])^`W0U0(JKHtijKEUPfW0s/Y]XYk1E=?f5H"@D9^q7W%migal8@ER$=/PZ
%\\HC8n,I(<rO$Q0>W2?!pn_j:n*?lhr-#</j%ecLotjorX@lCPI^Pr\hLjp%T2oC:=&q1Wj*RC23\E=CJ4NsFlgrV/V.,C?W,H[c
%\FKcErV$%T'M,#*O'q3S/QBPBhsJFM(X`Pg@m'G2B-)6Z]6)XhAie'Pa"r&LrkNp=&K1Ii+8gCB#qCM3`)=a'(Xrk?ZJJH2\FLWu
%)VS<FB$#j7n(7>;p[<%\q@(L+gCsAncgIg2WrA<.CKInDErV#s@K3Ea^$KOZ'!T,L50a6;Eif+7?)d[?qee49p_$SeSL:(^OO4D:
%:L<CC?9$sM4D%4qVQW&,0"OuC)</L27\*peLdSk7h2dN2DCH',+fO$MRqo.#[h0=PpgY3;Wi]c%%Eh]586r):\#4kC9HW.Tah"+!
%_`uG<1n-:c'[TOMPbMTOftuV:3H!O0-1_>_OU'YS.'HuBG/F:CT;NJZZsRHp.>"+J2T;YlqW?bM4s0'1/WFO'G@/pPlgMhf)3hhc
%\o`onAKXg45$]VKcTJb0>(DRRp[8c+\;u&9L1:ms"p:VEAj=!t^#'B1X.u*@F;u.AWLn[:<i#2h=`L4=)>0[OBGpKZVS((okB8A>
%oRF="F)"%cEYq?dBRAbVE.G&7B'S`#Q2>MogqPRdkqV[AHF'L<SB^\T`a'WDk)/jAQ#J0C!hQ_,/.FTD>&;+4+5=c/Ir:l2!jq3u
%fXE\Y8TK?N[OD.NWSbEQ3lrcHi"F'.X3=TFC6fN#gPBK1m>Yr/fIUS2f\"H?dk3(YHd()6!@@i??)ILd`!uU^4UUYYZG\FP96pl\
%mJee[R--.^(%.hTOarq?QRt*5NFLZ"2Q\[VWFl0$[?']r8?eX\,tWUMO[&m6X!N!YpR=J=f4gS^50Qq4:o$+K.57O_!rL?W\6\He
%gO0)SW>ulTfdCCHlLleAag)?1b3:)*Eod;`8Vm!(_o*sicCH^dc=tn$7kWWd*ub/"!n>%K'k3[QXT'dA)s=<G]?o"2.24MM;AT&)
%^";*;WSgLRA@``:>j##&K%ceD!uhuP6r=8!'fcu!10'Ke)q2c!kD9Z^g@f3qmdjRu$n%21Hr!`qQO8fjXKUEXO)-ES*F7j/hWGua
%IQD%#FL_1qMp?m'W7oETitW8FV^QOs$j,Nj/%df"\(iOj:VO1]@W.ZWGDDt?S8qq)2==d/o4$ECM&g(92>(`jMT,'XI03gJ,!aHa
%4HsP=?_r9\nJ#BfTiOX7<IPHncF[VXfS1B0fX;J0YJP`gS.8`="iT<'1nKT!b>3N-9M-[*aDb3"7D\t#]buh5\h0upfQp!h40IY+
%5P4gJ*`164]ZX!>c^B,8?5P8E>u/nD+f<a[3/D?m%oEPa,$M7R8um6HNYY:)Pg:#4#RY)(I9F)i=.\)/.+Mldbj?SYSIU>5>\PX,
%9#M`LU,1->VZA6I<5uKGjX[F"[o$P)fL-bL3\o([o]E&IaC)\><KD.ODMSe"ln!8PUUPjB<ZglIB-k(g2?BRp2H<1[f+oSmEiI,/
%D&9CXmBY;`=D^4dRs$7dF$&YGX.:.!p>"N5]0u.!Ac#!X^TVdeJmVF/oD-+c<QhXN8#%Ym/Q`H[TW[_Y//&u>+*G%]6/MR=ZE3G:
%5G=<t74<S^(*Bu-T:,"#C?Q>$p.4e%ihM1!ZU*U)-)*jkq.]lVTt4R](r;nP^YM@qHQLqoL<JPtIbshRFCj`%k!HJrFseO2C!U"%
%o07Th4*,o`=1gtBeQU+O3JJ7_?,>.Z5K8.RZijp"WruF,1CW-)3qot%5liD:],+!,&`YXKl=9Rsn63rZ3cu*il@7-Q)+G<F`GM9i
%Bm%ZtNoi*ZPi(3Tn)IpTcD!4hiu%6,&$J+Tmd0E*-LMdu6QPk`CK]ccS)a-PrnE-_1r*k(e"R'D;btul?j_@AKAQ\-h`5pWVT)/3
%UN-'nK&]bti_]&M.E]B#>mVNK:IW_S5!bdc>Wbu8dFRU@buUd3)TG$URHQp&B0CbY=Boqb9O=nC3Imn/NZ0KTYL<PZYJ<]]B383>
%lR)F\,#?-:L#2aW$\+ZV\g+%De4$4F;&po!2A-?IjMj-i7q$&?'`+ci@fELQn/h9gkM`K!IAqQOCUko9>LcB5a(cBe@N2&kq.-Ho
%O:lKbmu]Y\f)GC\02]`l!\$;Y!rME]p\_0B'D/4`!4lXXj$Ml)Id-sG_F'i0n+S@d(+gdgCS6TkjpU(FijCE>QRC\3e;c]`ehiQe
%,rC]"B7A_SA+?eVZPd;*%o*+#UAR5kp`<%tFX:IqEBP&l[!9cl;Q#]+6d@iMHd@H6pXf^B/r:1o2_6@HiQ$N=*@'bL^F-0GWBABA
%6$t"&(Ljb[c#5a[l"Q$:0a#]V"j:*"mSD$]&es$I7$#"$o;3m;MhPF,`c@S\jdG^'1P#'t?fgK(CV_P5J"rq3*i^oQiVG=&EK0E<
%mbp4,!0!(]IZ<k;ri:6UD@c4iZ]*rA&nK_2Z'lR>6l"<.5)P,/9[$f&#lqOL=]_E4HQm[Y#Y-l!]i0:(lEX2Z7d\PelRUbaP!G>B
%PG?P#<b&8hRDn_QWb^/\*oE7L)J96J=I\b]R1ApIne:bn;"CWr_N#DC&&A1qk&_4'Xc)ZGRTg/%/</!Ih:oqRB.gR;eoe/72FH&2
%N)(iO).#n;rA5;iA!jtl;nJfZ<q&ZHA*;TF6S?D(`b-ZdJbG=Q3X>:07@GT"pnOGMnV[66r=5\bO1f;U:uperYukI;lrSPJn(5Fn
%F#Dd_]\[PlgqT<u&Y`(X]3=.lG92iF[e?9S;LMXtU^C5if8lJAq?N#?YZE&qdZJhQX6`V;$:$@c#B'1^h@_t+^I4GY@C<_CI72?3
%:.F;$D'in<kOV?!DjNUg&bSqpQq;c>jIAZ0W3BNT%.G$U0//&59jDGZZ2spr$Kpg7J*:$N#pl>LnlON5A<3nj:"dD(#[MDH4X<7p
%4RX^*d+6ARs4FNmpr%fE)f!#!<^mq]&Lm%d&A@WhK!_MP2]!"dpUiIg5CRL'E1=m7eF`(IQhZWh*RS[CnkJK/%.9AlS*Fl$+pVQ7
%8sc6VQs:1V[9g?J2$_=J-QU``NN..</nuSDQMIN0WY'jVrGE&0K8[>&@)I0Pj^Pi4PlIHEkH0P4.PLobl:,O*[h@p?a,WNG;[^A!
%$c&6jq\r8GSoC?M(kiaedPo9[5S1i,e#lTe-M4O.+,nib]FT>Mn1;tcO/MfL\Y%=t^Q-PoBV8Xp4o)"qIp\+a;f,W\dV42r]bP=R
%AE%K/SGmhh#8r$W="tK._56a+J]T>7h8au&2;tfA:VI)n=ZJO%4kqD%k:Cl?$qC0mSBd;;?&D,@Oh9BV!NFO/iLKk[Itn)_GC,sn
%IEbBPae;N?ph(t%qe$^'7C']F+MIa&.J]@ONi;j<3Pb6LQ[/'&8/Ft)GtC=cDjG;\a0M7YP)J.HDPR7cLT/;fb#:=ImDE#X<WP(_
%O1Wh*L!kkK8\2N2&VNZD.mq3f<Q=i&N;HnK..l;#qEV>nUX`kL<qoTPS/t!_ZkhS6p:no7fR",,E`u2p7H4/@``L#PNKqN%33(UD
%qmGk\'=*nq&c?X-1R(BH9s]'mII=l'YBm5OX;YFE)KY&A@WjnPZ5n$jl*IKkMuI^fOOf!g?1eQpgH@#N0N>hWpXMo8Uq&h3dsA#6
%pn;kmjpKA$j.&r&+qKn!maYOk037lb&"'9&cph:m9dnsNoC0VWIejQ;'29_;c4B3k#g<+%k"'X5D\_EH]RfPnmFlMmZ%lmsFCg'/
%0:_)*Fsu-\(V$b.M!^(8a=c[<qso#F3U,ts+6tDK_\[[CE3<k_(qVFVCsk=1>1Qp'7[K4YqEbrGO(5q!dpS]"826InepqsG=Wng9
%F!r.^*X6>Md$t"d7F`8e*<$-6+o6GM9*]Y:P_;caj7f8FI7;3R`h=jC,n)m4+m-kkc'quRR)Rq>Gi!=G/le.lhIQi.H/65ar06@p
%X1T+F3#CT.TpA9mZau1UZVc=8&=9q7lXE",m/5cLI]+A9fP@OClc$Le:Rr_D!0/;P]hSX7:\cW/LXe)`#sHoLqSI4VS]@5^;@^@#
%nI;`C^m1hdF0p3ZRND>KeZU],g=S_08jRskg8u*3q72"+A)HLcCO:u*=<9*@'R2_t3S0:?aEbSWf1Bbea*G`Vg]<#Z@BI'0rp^lO
%#=:+&bYf7b49UfF6<i09'B0=Db+s"PNKbL7Fiu"fX?/FB2QKr\H]Z!u`";Y4\6HkV;oa?KPD"!6MC8==/4U`?4JC77J'2DO>9Ms9
%_lZI^Haqnm[GQ,2?+VN$H&8G.(m$kl.W,R+2)4Tk(Yb:u)'!m=`B^qVLC3L5F-f-5`jP,O:L$b3\0&;eJnPN9lB3(PJ4`mh(ji<7
%M;#,N74YOpnPg3Ve%"it-^JZc#]-c)>ii)<XFIpN?qjD_YR`euIqh=[JCOhbL*CW71s4scm:UC3+ug9V>pKbDeBEc9!jRf'7"OX4
%LskGhOPg_`8pI%n6d>eT^kURhB5NVN>3;/*E7I.)I?rLh`VV45)@tpWS.,hIC+KEZ1?>4q*Vm7V6N2`3:C+=@E%.TETXA%U2]IP+
%n*LiZV&.]'qT!#E]^=fc;XGdMKi@VB5CU4HCeUf*A?qcV`Oqhu>jTe1!i%D@$Oth1C@MA()<4''G^hg=/hN_V$PeTiHM4&lbRoeo
%Gf-kB;2YB<X+Ti2<jTgb1<gUEO5=]Lhb+4AOHPM@SaU9F7u5(F3B:ZhQt\0>(10h3oO0I<UGcq;DQRAk,X/K)C2ad)_LsX!e5kP&
%,ukpbXK/mr0M$W'ZXua==@,,:<:\'_EMb0.eIie*f'pqXHA*$\&HIkJB`a:g'tLhdPnl7bUr#OA)7A!aKAF1f?->N@T$Ol0Zg?'-
%Qi(o+$guj^$QPG8U%Mu>"0hDPJt^<%`/Sg_7P;5Os#`VDlPk\Hc*^Ubnglik%OWF0f_57>Yn'V(0LGNkgm;Xc"'Jm_8:ikCMcc_K
%ec^&V@n9FX3/V'<aDV$IKCikj5#:#3-/lop>C2sIh8P5OWa0%tppFGNAk;p+^"TX+]s2\C6s*s0mmH2_+$Kbi<BglA4t?u`\Aim'
%6WgpWL@m"k%)2bJci$#d3^kURB7B1,@3&7n0uD33Y<G'!"EZaNT0=7@e\0E'3'2srUa+Ed$r82u?V[NOei6(nI?bcRAd-%<ds##d
%]V'gJ5af4#+:]0KhU2_CAE?F&P)FP+Ea2Xrbrjr:_I;G``mpDr1om)7<Rb45^5FN]15WAGs&Upq6M&i7_3GegB94Xrqa]HQ:M>aD
%i%p][qQuPbRjuNEojMtr\_'cdajT"[E<ima6t%DW**XCFNQ.hPQHUr#X)d;nr/O.)p^jVF/lCuC9^O/k,E_Q$7)PJ?$L&h+TR$hc
%4@1n!.p8Diej.gYjJ'sF)bIb.^"m5lW28Tup:]TD63R\`9a./]HJin*lu.G5G*0+N_uL>?6Hg(7,1&XPJ*k&-)VM&i7a'b39P[.O
%i`3WSR2.*f3IYDl'm'Uaa2[TU@#HDQ`8#LLH"FQ[re=.l68+9nfS+/p!TtQ^+g:Wira29&&PlZ84>c7:bXuC)?XAn-[K(At7J]:!
%P6-D0cX4QOjZ:>N4i0@KUs0=b7Sm9:_<WmIPY:r,3'MaSkGGUh=\b47++fKEQ>I6hVP[m#AbAJ3hAQj+>HC=6&N^Z#c#Tc4pM;W>
%QOea=nal`!c`'JX_YX6lNbfI;M%^>d-Kg65(&E+^1:_\$35CR]5O%e%Qr<V^,AVXiWqgc.Vh\HhL8<4D.78+<AL/tdp_f(EgA2Nk
%1g<Z$\I=Q,$JI!5Cl1SnK'oP/?6[h4;4E1"d4p/N].Cq9jn'hmC+m>60qc"Gibknli[g\r8tfMILsgI'-<U[)g!jrJ^eYT-"]N`C
%"/KOae5u3D6,;th.2:A1$'cLoKiKC$Qc7=45f1-X\G#gLm:0.PoTiU)Q$H#Z#$rnrNdqXI);_6<1drLoMP))NCA/\5Z_b+*NlW1Q
%%t%B^Ji?>M>M=-h34LeM`&<&,LRuqY`$T^k0-1I#hOIQgT;Oo20Fr5R8YV\oCj5dL6bcWVo'm=s@<ddLB6;6RIqQQ'8ur^$B^[?Q
%a%KG`jru(_@0D"=9FHE0H\]".?cd6_Y\)#cX%5_'[h!s7"LGG7=g<-+YmO[Kq3b;99,O;AbhP\^md6_3*$p[*N5%k;FM=],DCGur
%(t@Lj?Fg`;Z-#=pbUPAW-9og"!c:=PQtEOZSa)C_A]oIK>h^;sPI'DHp`/0..>Z:1lU=t_[HSsR[q-nYTsf@;KVt35QK%mu5PQCs
%[*>/%SX&.7pq*;>qW'a*(,Fc!W@ct.ZQ><A!-"'I!io;CH@GY13CeO!j8J:ns$(u25QCKXqVV9:Ljd\JrL>i2hr`P0J#lhlorha&
%ci<mWr\pQUe'L5R?jf6`?Wc'4aZ\D+&:o]^TtDb=cL.7eQ(1/MJ73&sEC:1TYj.DBY\$"KT<M#`LL71.jO<0/0&f[-It;MYKU>;+
%h8#`71M32AR0^Uc^]2,S$.^W(F,jh%_#D1ZMc8mj5V',i^.k&9UZ(R[7*.T6oSSa6!(B,c]1c30N?gg7k:<[r,;nE]Hs4/WnWh>h
%/I'._S(Qnsn*adiQAN#*)KANghjI07QAQCGQ6RW"mK!_T&#GBXZPX7$fl<u'J=5V$)_7AV4R"+`de$*h-e]X2.lP&:.<f)re[R(K
%VC,3:.p3,.kpPdGjq06g$G\A[*t2AW,!@=Sg#KFGX-F=har/fdVGI]TlAj=M<RAG*QXGKo]<cs=9jZ.\>nW4nNm&s[_\SB3W8$1[
%.Xh</8E,ZXE)GfSPm?17V\I.m9Ps\$.ICac&3nXs\EKKY0bO5I_p.ffI35e<V?B!8PCNYI&6t.W*fMHtr_aa?qE5Rt*QMquJF?4S
%Pn5'uoIj`<_OrH*Ibu<I,.mcs;B[?.`olKg+D)@_iD^ks5S,L`NY_e/"Bte,U8&TP-2*10TOl(HL@V["d_r"AapC]gdJ'Lhh]HcB
%NCsH[XjBC*k[L2/i"0@CA<g&Q[,`?UlA#CkiWejBaDuH=']sgMk<S]B>[+1^=NFft$fde`?SJ?%+_QM$a[]135>'^paRVlWP9_H$
%FZL=-3f=27R^:h4)Z"/jq"&DBFGADMOB,c;DP0XsWJ'E"b)OZ.fZK`i]gQ$2Ru3N:m=acV;_hgseW5g>Ck5'#9#jm,Q2Ohu^djX5
%MmP36J'<7fK3"Om/uuUu@ZrakAo(#?rMjP[*Fq4n;8+r2.?MqbgAq^klVp!oU4,VK".IaI5qUFt45lfGf(QFn=[&AE,/sN*m?#4b
%^F=Bebqk4)Qj5"sJ(e:7MCi6Z<@=D[pJk*=*+YIig7GL)1>e_<=[":.`6qht,3Nru,?!**6:Oo)\Fkc1==[h2W=%hdfW<J&25FF7
%JhbT"#+?9o$Qgt"@0qDaF((9E0t.'LFTD$f1QoZtIYJ,ZV/+Ri+ck`em4$")eri*sR:X'U76ZN`Z/ktgY9tOMn`_a:Tj1!C/YM+b
%^[p=-K$R3*/-^Dr#e.'D0$fc%go1>.$+41_=3WGoQKTM;]G]Br2I`4FjBB^c,[c%QLL)-.:CdiXpl&;mB#][R/s'C(I'Xe'Leu>o
%l0`;okt,Zncj'#1lJ@MTQ#9@+L3LQO(mjcl9''b>2/Kp5&>24mKSI^_IO;V<1$MSg]iRFBYLK%^\%H5)SeH#AS:Y8IB@G1"]nKWI
%0LQ33Y?:Z:Z!tuZA2pt#6n'i-nOm^L(%@\2fML%,*`7*Fd$=C+[br.EJMV6l!S=a%Fqku)ZUqBg(E1lWhF(9>TuS6>oP/+$:=-o5
%pHGeQ>]9RaA7@4Vp!TF]]_L`RNQAq"IC0/(P$"kR]$+1*!,9q,]Lob&B3t/=.ge#,Gb,h%e!O`""V8GV@f`PpdN^-YM67#5bHG/P
%FU;+RT8m&@mhOWpHc?nFmm"4nhWf5Or^r^J.a/@Q5"fOKf_fAh>"W%ID4/[&$+LV(gF6>*UMd8slXs:Hna!D"q7Mc*C3\W]%'A,2
%p+c#nUN%r;Bl0\\`-LBH0pVSi/_m>moV"d2DC79L&hUW:B#a4nf09/l\9)@1fRM0<#8-*U%T3@PnNo;G>9;c.3bauL-\CVaE.uqU
%8XtscfT_j#Ht.ajo9]ZkXF29,ThDM0A?L;TA?t0Aq8<U?&e*]Ls)*(pd?YXqO[ZpgAJbjI]W[MjBK5b=7d2he.nlnom^L,o"dilK
%V/SYLDN;/p#X+\@HX8'1+Z/>Z?iN2Up[tW'.#o^QU(X9C!A5H"KMd?e31cb=*B`ENF[/5HjRZ/$6*oXDV-ifG2nM2+oB[Vc)5]]X
%II[jh@24^G#!h1P-g#uEf,h>K'Drjj[#(kka!NA`#ON6k\,+Kr^b4UbH\2#lhlpZ!.4FG'gb$*@M6oh5d%s:]l(+Ju)i6J!'lH-M
%h3&[nMu$n"GA=-d9Y-t9!CU>!'QA!$b^Y0jBShp'ieuEDX\MnnSsPhOegREOL<oAIXF<+,M]_SZW`\tRL#Wu*nNYLlEQ'dRVCB'?
%h;9_k9k?"Q'bkI+UdsftN^J&XgT0&HB6D"^>V18p"9@+PEL0"D.+mMC8Q[.]pKRrShRsIDNr'O`hdB*=WGAOVg[ug6M;.?2*usPk
%e@>]AdZ'`K'UeTi7(C4OaJ8CuU\fmN]a-$Flg_h,7QiWSR9oY?ZT-XX]Bdu?'PIcQ<2u=WYQio6(gfu5hpT(&F(FSsp.Bc\[FDKG
%eQStW8;ZdhXs1*_O=70$lD[j#HCg`^P$3i,'mq$bPprW+Dack",[RU8I7#)EYiX>06NE8!W8JelJE^=X_d3YW4SVN*I"b1MOO<5C
%3[r3%XAM,XC'_O\_df(:;VQi.gm[Mh[=tJ"dVuNY=?9De&;u<o(Xpp0V@<4$/0o.q2u=Cg+PlT)e-p"R3-3?3q,MEk]MXY=hioG[
%Zf+2B^-cX+A=VRg.)i=cQHCQLr]W>fKR9\P<p.4^<eNBd"Q.2U5HRgh<+0KS]3&9`3'-MM]<&6/#9lGLJQ/Z0,siOR^Jf5GC&V`b
%%gu`C=^Sm(mm3Y'pmp$<p@9T.3DD))8t\+ifDgmsPn8*:oN.0F%@Hb7i-PrRft-SB0CK]G49U]2\e4lm.0k/_f,_"D9DMHbrd4rY
%KJIg!6K_nEd[T=rHgmTq/WBEQdiaYSZ,2tS;"Uko<:JgZ^8rNPQNkLdLsb983:;21#YDrL2gaZ(NWrk?!E2om;;T2UR0NbqE/3mt
%]lb(Nc4sr>\FYVe:="SO;\ZX@S#.0t:_TV;)43;%Q25B1MQ%tDA=qENo6pDtZ`7m\Cadber;f]%7tagSgXMhtk28#Bn[">-BEote
%T?;4i*I>N"kh:g<)sd/V$Iub&"\K"bd1I$j7d="<1fT,V&/QK/_3rX1s"#(ie8I&#PEJdSMPgPTLiantGbC[7JGEe+l4cSYX@)J3
%9MAht>rmX*-_]<I$'GMpe21h3DYEBKCq9eMh(X-r\"_j+]g-A>_M7pTF`hH2(KB6i,1Cdk$Bhf?O*R%^AUT2:jl!Db`RS*peBcA,
%')/6scs'273J/\)R%9oKV`UOb\OG.YZ;B+\r:a2_J#O`V$3=$7>kUF>1eu9r252kCj;ejCc=m%_m2T`"qm5M?eP=Z<(In=8oiaDY
%lk\NFo+LAqHD.=k--\^4"gJA<nH3*OIXa04Q#;!$),i?Qj(rTIj>./2g;^pNIX76$a')l[VnI04G;[N:5pLu7::HnML$\Nga5c#i
%=DMXT<T(_'lqZk6Pg=^L!AI)@m4Y9r>E/%D^%]g=]^I6oYmMgH-i%E4>+36!/0fUFLN!%s&Lr.MBBNj+R2(EIFMTc0Uif/eNO&1K
%-SrH\'shU9n=ZX=<3;ACTfP\',NV@?g=_KiPuM+pphpCD^*7N(3f.TUEPYo/hqC3I<EQq9?g0@/*+H7a<0`;`jFk0s'\_bn/%p71
%?+k'QXP+m%P40R/2sV5pWKq?1=5s*,G^(?`B42Hg7]Wr3TpGb`pTWN1LG4uSA:,7r2fWJSQpB6.LV]>G2ghA0;+#NBj=fN<"?eL?
%_sA,\cp@GBOMnJM'.9i343$o=p;OkZAdAZ>Y.^.^n/T(9:?+&?e&+GuM>E6510:(p[q*uK(r7trK998p:ZI3F5/##j-F]XCInP.b
%P+8"%2T'6ML]3dZ9e]o5R.h#]:=Ys>+a:(ee(1KW5jhk=ra#g/5N`$#\+;J1=:@"6hFWXo,U+MH=^bpuakJ='mZqZ:1G1mrb%G./
%X7LWt<sSkcL&/J,nk;i1oab1i,dO%`eKFm&OOcZe<FHF/$guH)i`i?Q;e-^=EA)>(Z!%i9rS9p)JDZ'/")acZE^WD%8,M;;+&UUo
%_HtnG$"@Ym**[<VSO!D\nX"&%cfp%J]E>Raf6\7oLaiiRRAk*VC)R.)T=I>NitS/uoK;W#X<`1OR-$"sOoioT7l8>mk?$ps6cViA
%"m><:SgsrW<fPeh(S%N']Q^Zp_fQtn")+V>L#imAE%.](VqAk8\ds;c/DdX?7$9E2oGpb.5.?D?"@q?be?E=gatZ(br'&r4/%pi:
%H:"UR5[N%cc>H]AlCfiMNq&jjB&FUk+l29_[9dd"gJbRFA(Ao^V>1lRmYfJkPY=kG3aR<7IhWu$%m5JA)I8,U)KX-/\VbTFaW^Oa
%F!-+GoqIbfM9K.No(3t/=TX7dT269m2729t-4IcDa"8;hA\NF66m52eRBt7hY7Yd!.DSUEA5XdNh$GLnaUGD"E@'lC3mEDQGk,er
%<G#S1ZQA<9:m3g]oWq=7o7*XP*Q4I%$(Xtqo=F0"fRN<-`9]?JX79;!Q7,@9?83]Te$Hib<P3tl/okVUK@(6\KaTT\%uT>Ck<*BL
%e+*2mTU.K]+,dA$EfY/1#i,8):>\_oaVF>m\a,YL-.1k*ZCL"Sk3hZ&$h&<BbMkBD/bRQ8`/j[Q"rU\B:C<VY(gGT?=ocANVUqQd
%ALVZSRZ-hhlb?YOCU/4`S/U:Y(7*b*CQ88!Eq(%0Rl55hhk/@>H=I8&5;FC2I`&.Ad&gU9C?bRj.3)UkF#&i4K]3RI<0G$O3W]rl
%GjnPNH(*kH18s'']@@q_!8XTT5!SA#_DUPqb'Z&W0AQmf0lOf7YD\<bl=-(GOX^LuchSON#a[^bbNn`+&U@2>;/\lH%M'Q_ZF_!V
%BS:XrAV"_$[>$-oQj.hM0`b\L;M[9Lj7bB^n]I&QjKE*9bPG;+D:!R[8.@f7k4ub@qtJgY8,A4rMoLM>*)a@*4js%qO6_-L.G9N\
%_Z1nN(P9Aln@Cjh2;E]gXobp@bM'I,^QBCO+<dY?\o^1n4n;`8VLk7GR#n7LE@*6I>!ciP%!7TbY2hja[,"-'-g<0lN$#5Q:e>94
%[/dNcPgtjn;i_kliDhGTS"3.4]LDD`c_TqAM$!KbAltp^oDf,D$D?MUG[c7I.XT5dPS5]3W;FYuiO)`hiAd*ImSO?NH&q;Vc*[=G
%iagQlZgH(S<NfYHljg`t(BCmC2TR3H5j8m5M"WEnX!*rtTS%8?]fEq%]IbOke=pu^D^4(igPR6Hc=0B,2(!9q:11Eq%'k:]TSROJ
%Eot^n^<3g.dh2ic,4^-hc[B965>,(<oo)QfOSY98"lBlQeE:\i5O;6S8U:u2,Ac:DBP`DEn]`$IXHuJ=R_g?*39^rdR039-.RhFQ
%hp.k?9]BQ$Y4nUY]>,)PG!+nJ$CuH*Oe\-Y=+/\N-TIXR*2o*8<hU&m-Yr.o,^X/*O0B*ilT?pG5<k&o38`B?^Bb0U)JKMk:/(<8
%qHdegJhMf0GUVFd5aE38bfWn6JdNOFceE!mOt^*OdQ_*=F#93T^(VS5(^`EG2jMab4qkC5-IkV[`k)cudf"bDqX#@Rou?WldbH@]
%@=5[Z5@:\U#(BC[@mO>AIt@((<(j/.F\)Zl%Z=;prD#K=1CBUoh,kGuKV+S$3`fBB%/uhWRb(Y[T]*Y*BEV$ec]8/9kOm.ETE2un
%42tRec9\qUMX8A(P"U2Z[XfW%Lhn3K7EE+jWp)^$7,+7N93V87rP0#[P:PTY)1=[R'q@_LJH002"PtuZoN5Hjg)s)7i8`DCI`Gt+
%!E0[1_U7kM[_RGKU9j[M'-?7XN5o"OT[*uEq&7JM8,W`4\%"U`T-6Ds,&$lm`/.g!SD73]V18eWYlAXm[9X(HLP&"S:_GDCH3aE/
%_XaP&UdKKO_+Ik+mgCq/56Ab1qL-(Sf1G'`gB\u]KK2/'KnqTm>@So2q%4)RF:>ZVBmamlLaP(&+?X.TSD>D4:_rfKA.1*=U0=r]
%=\"Jlk2fb!DtQ#D9EmMLZYC"b/r!9Yr!:YWfe)0d1'\@(S%gdJ/a<04BjL4.BG/[0Z@KneP8\I?-M=0fZ+a6uZM+d^b`_3lP@S<D
%/W4WJ44G3NN@NR"3#GG"A"TO6IqQF$-WV*3Ru9T-="$<MZqK3@G(#_\@GgC_Cd+";HQZpe,(_O\&%C>_e=.ALcu],VT$[Wb^cI^S
%S3_lT"0ct:jXgd\8X$R*o%"_tqL5asJj-m+HmKt!g`nM8Vs=HP9ie).]!1O9ll_VKJRqh]\e>J`'-2=5GA!(ia^Y+0<;;scM.P-<
%9Hp3(;E.F@9;IN^.@a].9Id`"%M"+Ej]TV/;XZK=\CpNZCpSc8jN=O?ZPJQLXPH4E=RfX]`12$F0*0WIAocD7D^h)nSp2OsUNZXC
%&e#f#8("\(C4T%saoS?-Ed@GM;[Ch5?LV=+MV`'iYbL0Er1>d;T1YZE79L=ja]Y\6TunD8(n,kC1pH4[GAEN++UH#)87=<%=X459
%M\<'h1]@AlnUf"imo.5u.H7Gsjo")!i6UlQKS?Jk:S8"ZaCJC/F-SP%4f=npl=)7Is7q3*)W1gkQscJs31]#)J0V?hrQ]0$kq't$
%do9R.VR<KY!#aO[-7!R"ZY&3fl/K-=?h&KcNqo)J/p/WgK*[dC7`sM0Y'NSJ%Xa1-GjZhpMjm"n2G46Jbd,_,;Uun!=6)/XTSrk.
%cDK+lj=F`q=hB(!c4S7;mP*RP?TBq$`=,:-K\rb($7n0]j"im``c%:Qo#4>2\i%#rG>LYYjRJ'r8@,+1NJ/eB<$e3.Mg"3g=iKB<
%,<?-=Be&l)l<_djddtTL[B09El"6Z)K&(qh:/5,U+AWII2a7i1G4REV`*:I]S?Uj@Y_'A=nT8rG&XbE(Z#4&%/7aJX_NUT:J(L*V
%Z/3CGa,[XsQnF,lr#SZ,h:6O.)tAeeodD&E4b!nE61+*f$jVJXKhe59e`XW?$LR\jD_K>)f?8p.btsQRS9WVncd*)H;_`H*5Elpr
%9X2HR5TW6ON37]Rgd)?^PmTC1:'Mde!?#?2cg+nPGA6>>cdF:uLXse\b(WS"]kgHbR$9[m#o2GaF)O]&KsE0j&u2P//05&#]M\c=
%g?7L*mHGB_kk0LuK[Uc:IU#PQM.0XS!t>jQ$1-U*/s\KT'hXmGT`L97^.RiC5S"m)"4uoES>f(Kp@h(FP,^cb^VWQTls7ooAH!i`
%'6I_U1(d6Km[d9&JML0?`#d*,"\/$4T3FCE6Dh9Nbf%8L$iiV$_g]Z'+BDAR\)3%TYsHi$B=Qi']qj2;Z(XHtGci@7RCM#K-70#Q
%^R%)u)e7T`hm97`<5-T/-?V8LRPAuA'l3oJ!#cR%AUImS>Br[leg-*4UE4-j=h/$Fi`;e;;S+fQRPgjS>B7@T0)MnnH^o&\U!afZ
%P6l%CSfYis)UrBE,r0Y4Dd8UEZ/MF#ck7h"8[o:r@i[[XrcKmI^^BS;8\L2.<#\:@_&&:k1`t-%$6T"/Ts/c)&udI^7MG657r\s=
%`sD@'jN$`NnL:F`%KoKIkl?c)?\"EKRUfPVo3uH+]`&+ZI''`n4f)q.i-H9tm`"F,M*L%FM5t_KDt-dThaK?<^Jn5GKtrm"Q>?dS
%X@BMWc6V=Y[VDAm,=Ebu$D1ip?iO[SEtRR6F<W+*97X+_dUt'Q6)E4=J<_Co&=AO_Bt^5_pggTl8+pjJb?EfsRo^Hb1Z9l:MLH1Q
%YK;QC((bHc6-mZ*m`L51>,'qo7"pTUl.aEd>Y1Q,]NKA-q<R9f1N[=.`4fJW[ugILJ)jbVQds9^6u=E+ni=qPWEdcPUg+.L%t!ha
%%V4@^4!$2)Ap[=nkQNljfdmQg9/U7ofM\7$8I+n=ZP<lt]N7/)OV,C`NK+hFrJ,dhJ6sI<-D*a7]!6_>a];FLj[addEEE"u0dd,L
%j7qJ8!FMp<7ZQ2Y\^ru_44e`jHV0/M$du1Po20>oM7"#C)e=\GJR#(n.h(!tH1\8)?SKDf/2nKsDh[m5n&]lFJrBHBK&jFGTI-:p
%]3>?+W6r(dE.DAYrJfT<A!7aqkda75mIS'<bZjO?\\"=F6^!?T?Ns^Q;_78u-7-_.4:dX[,tko/rCh5[Pjd[,3F`SX0^b_sG@`CK
%Y_...!#+N4hpPSHVNUBdG.9jRD`2O*Ust@q"!JHnJ=_49ZFnNDAp[Tqq_c\^Nu-:<]4`58o(LP]U/JZLFu9CM3@iaZ/%#`P=o:A;
%PZ7p<6?A_I$%=1O*LED8V=au?TJZe@o%gGo^Xqjm'j2`X1o?[X"`3<0]/F)pGHSMRMI]E4m$6[t&=/iuU7W-,!CZ`>i3_@eEcf&_
%4`IN.\'\L`cp[`ic0>dVS:^uO0hYX^HE^YZm=H#bhiKQ^*2#Anh3++#M),WJpNH;NB+q`7(?]Si`D[H.OS-!B@/B\&I\8TZ68EN+
%cf_R)?a1tV6PG/3Wq;((I<ZrGL>9i'I:HHD3Dh/W.Bs:T%kAh-o5d"Ld0"cJk/Jn>R9"ri(=kPr5Y3XmU^W?\9[d9U+5-/f0jJb2
%5$iI]h^H>>B67UoEdGXQJo%>S[lR+n_U$09FLt+!<M8Sk*kb;)_>O5n<!(l@W*DoWC^pU_!Pc*J"!e2'^D]V>N5fDU$sQg\.%&n6
%0EU+WWo)-5q$[gMf:*$bZGH4BO!hnp(L.Le;<f!:M&S]`nj*:b^Ud0J71DZTWuQ!p`Z&k,GQhb9!j1?fB%a[ZUJF&AWg7fNX59>_
%J4hZSc\U&)J`tTr*<hrt_WPqY*D6lGfR7E`DV2lEH-g-IE&$2rA3WdZREi:1otJ/DHhHl;MI$03E)4LGWIl?JDF*0EANNNBE=+*g
%5F$Ih8QJt:*_D#4),<@8o<cSrr5$;qBk@b&>t1&MA.Mt>W`MJtWtUNKWT^COdLi2Y6gn$H!Q:-fG2h[\lec/4,/ddTO>-+,RbWU4
%)Lki1mUD[NQ2k(ee`?T+/?0h(hs_.86Nme5P2.!ok]O<Op.&BHk:>:`H0Rq3:tbiFi'I!\Z7cu!>c4$`P=u2.\>k^5KTX?F>L<:7
%XFb^"Xd3Eb[SrJ@.^)d7(nlLNXPp+=W"/YffVm/bM7gS,RhGZ.k+<YRi)S]d_9R\W]aC']_c*jf'ZC(X:l=^:ICKVe@*;qW^A>=!
%r(],5.2%L3DGcHH=2LM)[RK,AGj7t:PLl(KUXGl:*rn(gdi%QG*A'tcj%+:>Ug2)SS=4cF+>D-+ZV[/E%8`5iZ@?^m?eWN`kOtf/
%?Mr6bC6lP1$8`XjV?2afaf,Nmd(<qRK&Vj;hE`O%j&"0A$6$JPC%]Ejn9_`<Q(Ui9bKYt[fq/TFf1V8\iYZ>55keU>8BM$;SWlCp
%,P7[p*#ZAgnun9Dd%9FSU$8\PNJS3Fd?<AS/!qd0,,@Srq\eLV0=f+"I;o=Pb*q0o8OjYu.dqNqmB2%O[s>IYpNM:^rYI#lQ5].[
%_M#OoXS7&Ie8?(2nt9eJiP/h1^*!_I$haj1gp4oL?lpT']TbDY%N-*t&#FgLcB*H8)1*+<UX9oJ87qH,ku9(&"t@6gE'Q5iE=22o
%JN]59",6`&T@>FGjsA)_E/mWYqpfGgDNH:I>d9!DM#?]_Kr>1P*g'JaT$pLp=;p=7Ng(:o3*"Xi@E<Gfs!(@s!2m85R5\OI<E,9_
%#Z)\gO3GghaP:EJ4a*lohPtXBRBpG,e\($CORDkUFCi285nMB*4;YeUlHX9_Z0gLVe:CSDJNq!EAo(SfpB5KO.QCV$[9"o2QCQLV
%\k]5hZ11S(X@O2]1YO<TYL1.t(=niF+#$7H;5fTF6a3^[BjQNi2gSoO0?tiTp&o,l0jPrMA,1<\!4LbW.adktZF,-c[;;kb85'-N
%&ti_j)[cnifRp-([AWKqLfW!BGsf#sRJN#*mj;Ed]E7.-Su+*_FVF7C53N*q`d/q+=:tZE.C^BNSs-*+`E"5qO<e(2^u4V=+93Gi
%]e6E,:O!Q&Kq9J;hWf/Ibe_M4I9%iXkQ/t.3#K8=)eYaa?cJ=,>ujIO&`K3d+[6O/:[2>@gn2S75)/HanBCoG[aIArD[:ZV`!bf3
%oBZ,F7G4H=@eMsa(nOPknC/eX8b4:Zi%Kdo:toc7UK-7J%b"GZ(./@i9**tkMsQimP"ec1WJ_j(>oGOiQ5=*K>CB$P&6(Jh.ajr8
%T-\l=BNB6fqet3m>9oc2+"(J+k\h;,]$d'e:HldTmR*6/7#'L/n\k,=eVesjSnQ3++$t$<_l_+e4mZUrb=&/*LR<X&P/hHFgQnR^
%#a?[K+P;QEP,>S6HhS0f;MM$jm+PLd7r&DUH$@2im@`dJBJN!NR4#(=`ZLM/U^RdlPXH*cMc7gOPcHE4<AqV953XsHYMB"J0X:s'
%&0lP=[/r;8SU)5O^i;:aj5ddi3J_IDKfnGbY1h.!c!'uPq,FZ/%TNR=?UjG[e-;n`Z+/f_0W#hp<Kp&qfBhs%38:[^4,V->TE[37
%_$OVBBSjlj^6KlP%D1'O>e.`c.$YhclEO-r:boC\e.W$u904(d,Bk"I.is"3(2tl3FY6-lO]]"ZC`MA^`*,8^'4,LO___K;21rT7
%rPG1p1DIpE3nn6PKh:BWr?'08=R:GBBHaJI8g,8qPWRPre6WOW2GJ(<[WTNWDGd.HlsA.K^Z%e4g6BuW4CdJ@#7Us'*HlGQ!ah6Y
%j@d5+;#h`C=4s;TcuDUD?S8)T0&-lWfCBQla@(22JhOf(eVp;c#;cB$"4$A#*=(=<6:_-LAg/5pnfu^U^M\s@=Z'Ohh>QR3GP\[H
%Da&9cn$)^i`1!Xklo"eg@cEldSr%'rM"I&hV#)a5U,5>L.H,O'0b]WrD#7@R18W6Q-_'tX\t)dnW!plWV/3TX8YJ5fe$-c%_.?53
%mh9h'fBX4M5nMFHNh36U0hE!d^*]eEZL/ea_#O>%s+\[3$T`e+8+n\Uq66aOAWs5A,_@HR\N>uH9@HecJ:IWqOt"btaqBd.g;5a"
%Q^D>.l_$fVD+uMpbS-Ak9orrD'Y<1,330K7iuD<4@#@_T^1FG3k>mFp2P!):'L/j&G5j+A5a>gTa4pT%?`:"MY[h)Fg;8e<OB^mb
%F#%3c!YV`4*cluS0jQ5PdVC:4-44'Zl$/',/doq-s,'i07-[;KWk7;Rod)G=0W>[8=JrU$Zi^\/lo]:</LkE2qOu%(0#/E2@p\\p
%`UX59/*bC]Kq&$Cg:b:qi-gajb>L$^-Z`D`3X`*mKC#f!A."rTXWMA_4o7X3PaKQKcVTF@)+NCo1%=XC]NJ%*%o$OPd:KZ:PpTX1
%%U"S/c]TsD`=s_GoBNN(i+4VIVH.3*V<gaB8i2ph@pLRX:iHU<m\<I57<)iS+Xo^&$U5$\QL?A4k%#]C:$:c$W=<k&W%`\jeE*'-
%*R[]/Tj0!HHANX(E?(Bf08ft1h,j-fbrE)(q?3jYag>1AeCBm$RF6YB^82g-nX9L#^=gI*T"gQm28I3S+>JjupV=,u%Q3.,de5<;
%2F0KU6>Zp#!l'3JW'>(m0bLT0YaN&1)Lg-t][k\[g]PIi*J(^JT4OMc_PGWWT/E;7-Uc4i-upB__762_kQ8^Ma^erpId];BBFlQb
%H`@7b.VTcT&/psMHIfMWnF*;kT7tL!^IXNYFY*10V;/SN$M&!32G\SDZPG]u7oXj&[LR]Zj)t8SPGmf3&#u\MpWh@r[E2p?k*WU#
%h,L%th"ndtq!VcF(alOi(QQX@`Y@b!(cg:D<No;Od$&$A2M#4;JC_F.=c.s1X'/q`jHO6\$HjV_"4X<l"Ft3HlM255Y_^BNK7]Ws
%*-=]l'i)R$J>+[D7iY(g).j[;1hD@1+q;iHcC;Y/br_"\n^Dfu-%bq_Z"s\a_9)f#jjY!rOScBaqOsBRs%Nh_p]L3A1ST<)na1ME
%<p=>>]_I;6cpU&)c&,r+.OOCjBT>uPccfI6N)N%jPRblCEg?RgB@EHK%W7tk@5ai;gKbd9nI.q@<+_&Z!7uM%6q.g7&M<TYC9j38
%h&$o6HR"Vfm=\/5eAY+sAmbhT7@cT8[461M-$s@6$rA8oLn<W98rsMfchG"oaEu9tA=RD"'<W_O2'<iL#ePAEJST[e84>hWhdfdV
%'e^-`P%inUO.-j[ZuFY@fu.QRefl*K@%e/?XgRc+^puMpZ5<b17ujU$X7;/Je\SYJ9fM9A^ulIJQYGZc58d!"</:f\2#tTiK7q#s
%K,eNTWtTqIXh0OFV6rEO)^G&:@M+WVV3RJpLsQs6H*5&IQ(N3p,*qgeJV1OfqHp8Kk6Rf!O(3eY'%8(;>17ODn$06@B081%&Q)k/
%$<CP\Lr3umY'm>ns*o\92NiJl3HBceG4fpMmJU)sf+aa0,2QMCpL1"[&$!o$32cdOQd1&gPicD@VlmW!Bbga^lJ2Vu^1q5O:Xf^,
%B#n0`-ajf7/I'#]^D^#;K5+WqD5+t4&qn#W+pS0#M^.l0*,Vipe8J'uC5U-s\f*J]K#3(rX4GE3Jl<^W>VSI[Y-fe\+$P^'*[KfE
%*ObWC(V[^@;a$b?#"stj8*Vcb[3m$%M,K?9,T`7FSa[&GZg24-a-+und-P\tqm.[uVUYocZAFfIm\$7a%s8.2NXb_p,[cdOi/d0'
%e>D2+0s\>k&Y7fedU+coi`JW/RN4BLSUssE'u4*SF(oAh]5i,H^+ImA/KkSmIXbCQgYWGFOi*]6='Za0!BO=C.O;W^*U9Na',MP-
%lS<#*7!r,f#s?5b'fc2i!jYh&c<G$!e/3qfd[qY[+HY,_TTckc3ue#[bAJdj&"Ds7T/)kYo#,Kdf7a`#!`J;F6OG6ZMWc>:/rLR'
%LI"@nl!pCiP^creRSrG]hjE+:!=]7VXeZV+*&Nok).H:[/ZA_OiA&'q+=B[\]qoOY7Z(F4=<l*GNND(<QpPrj`f1t=C2*;ps,(qi
%a7&^+kMQ4`eaf36DF_W=TX'Em$5@,rOMUE+p@JUna9\=%gh#E_[4F>8"?HKU4e`gIPQ]+Y-"_a++RMI-'r0>pAlFAWZ+,>IY0&Q9
%)Ja\?]MlD+h/i;\?/3J2mjQC&HheRtd0O+;)7[5&$oQ`-[U28k;sdds5-N2RQAt.4=SJBNhnjUe/(L+b!8Zu(4)qJH=frlV\SB`'
%#s*G!boY05s%!hH,ig"LA1usQ>lrnah7tE.b7ita[)sQOo`37H$r1n@fPX>1:)h/<9iMp\FmiVQ=<l5b>s*,*71DF<[W[Ajd9581
%I+U^!\nT`rqW.oApd8-5!\_"?/O&ec@\=Y29[tR5BrBJO<#1iV6Fl0ZONGbkD@Xl>r7s(j:R"XfQuX#Tm7C`_I!P.#>^5eTVL/p2
%gBF%q1%%cdf'b50dGo@9)m"d`=%,?NlV+gr![qO$mKUmC4dhC`0GHi^@BIglOh4,NSu^E]?k:\`YPqA-QC.Bf:ZA7iac!5%VH\pU
%*qr^>8u"2:N3P()b0nH)oWK^=aP+dVSd,ShoXibtPZXZrqX9JG+&fEp/(ahn,n^9EJXJ^71\!YrH;7(i)n[n2U05HPT?77*lTW&C
%"^eqi93F"*AC<0R=uU"W/Z2Dg[-P5FTV"&4&<:JIna0=/7NYPZ(*J+e3j.\$"ZS*=+HGQJkV,^H8Jb`DPXEC$)*c'NN/S3%r,lr,
%L\k^SS]S+s:A[a>qpY<(5l#&14-3W.5)C2T:Fq_&'h^B40^Vm,n0$V\[r*5%SnH&^?2-P=95.&FYJ.@&MEP+"1ke>JMQ@RaCZ=FQ
%n+P=ZOD2,Zen(0NaBrLQeIh-]BWY##E+>`5BG"+3B$%Uf<WlM3MbD2dpsrDRp@EK%ESf_U8H?NfY,Wf^jPJ#&lr@He68aHXnLKlR
%:=$";9g\Y2$)7-"&4^N&'jRtSHA7s'(Ebr-7/02SoZ(bDb$nt:'epCpS,I"WG<'l@k4IbDh]6@dF1os*67ed^e]c:*?RlESM"^[G
%`!f[`Kbe3$'.9J!#<&NqDI6)PFk.++r[r_fmo\PqkZf>Pi8Ofme\IT#R*4UWq6/:47^Fno*'<"P):fgE0$@L7L/^Dc.S\!">$aa!
%n?08GJ3(M:7W=JbQ8ubP)(Y06#Dm/mXH@S[S!3cWL`argWjD@+6di9G>n#>M`KVebeP8!:<M`J7g2pJC_j^/NBTKP6K>Zm/1%h7D
%<(co,]u$4V-aSABUJiob:c%"X1/?KD9rB8c!GaZDB6U!5#.]<KQ'+_cq#]L1X.(AsfJD+([[mBr>qn58<(agcZ.rt&!q)9(kXbeZ
%*P#'T#NM_^+mbi!$Eq\mrtJ?J1ij?&;c(=-[]7TA'^dt+[Cd%`VD)@er&MX7,b6dbk<?e:3\m;X$qc[e.^VFkjl3%[/7S_0,7V1g
%YrL$krll"LVp:%/jP`#l[EEo(nh@)%n`X\iX;a^>[Q;D>%6uH&[ra<!*LXo!oh;5+?Y:fV98VT]CV'RIjD)^^i[Q[_<]SOYCZNE8
%1eU.9_f+VH83D[1`Q02q4gKcl1i=3f;e8CFPeGq!Na8N1n<O(+.tVV?$Hk-?d>oKG<J59&Bge#g`O`6V,do8HRY]fLb+1R2gp)9g
%ZbS\!?+2Es0;O"afACI3=dtRjZ>K42X<EcBlf0.UR^`0!GT06?;X@KFY$R-KCSJ3>\!<`a?.ii</(T2P3b/,Q\pCE+QVhZi"BN$s
%0GTuf-BPp0mTH*nqX^;*7m$H?kjY<^53g"Ag'OXRmP:YZDRBb_"do6$.rkk#VH^&?`edmmelbQ[P48ZcXUD%>#`o142po[&HNp7L
%\8[AA36=BB/>11r"3fmM_APj]g`WqM8s8.<Gna+'#4WC_e27,4:#;_Z9m4\@,USK>^oGmpbI'lA^r_"BD:ur=&CcDpn4ZLd@0B8J
%l>)6TVhAOemi.Zl$_4(U[Q#,dSTLK&10$uK;)N7CGA@^MOu^]*K9uL-Hg.(KLOtY'FZ6qT#-0>#f1*m7&L?FHP'W5[l\@i$gqFpr
%?/dcPA<@$;au77TJ"e/Gma>`%DKEp-pH0`YdhSJ`%-.Ga2XAq2<=&D4cQgAijI5)ZART?*=3W'OPe$,AP6(6nDr&Qmi>r>-!^K\h
%-`^p4JrhST.];`e(Dp(2Q93#k6bU$SjC,`2jTDY!,;`TA@7Xqi.fQ6!5WP^;>bj(<<B[,'HEUGQU;W9aL%*GgHi0q*e+pchmrDg.
%d"VE5_VEnUHC.+g4'\Pm(]05_fWo3rL51NUX8rB,jSI_%E:^0XcU8P9FPc*W3jeA8UBii];>eLE=LXe_T5W@njlJR/`B_qoQq5Eu
%'Sk%aG<r.K4Zu6/U]QdV$2P[)#))e\*7A>1Pa&HK,Cmp\*-.l-SI^1=>(OJI,cRSgDl\mH3i1JjB>Lo<ei/Ilq2K(kn&gKn/#a`Y
%c+]?FrA2Zt?-,sGn0c&*=enFsr!P:C/[b_9>MNX@b<oadZ7bhm*]G_%&_V3d8s(^r:i>)j+nOe2<e?Ien#%.\dC!hbJXBK'A2e;s
%qmXgCp,T8RamXB`lnQI'&'`^8:JhgtR&E2SP;g(^`.'4>gS%YomM"r89.RjQY^X]%%%\%SKk6ZlQS`maqI(emIHmi&a\W&#R2tk%
%oO+.0mte]?40he_//t7T3CrfWE`TJdm<TSI#aKVr6Be7>0csu4?iVB7TrF>8O.sRXWR0ZGEBm?'oQ6lL0aZOs3mu%CTjN+EAX>'O
%CNL3q!\$d@aXT+7Pt:D"f<'LPe8L*Wa@p7CiAEbAU!T!L(^X0d0F7DaE4K-Zf9="ZW^0d%kF2aO[(_hm/e>\QqIfq/T8N]L5.,:E
%m,^i1oDlmIaE$0]<V5e>oEm8>Q!=o4#Gmj1Mhji5D&2BbVrs%$\Ns%55J1g7GVXCf=u(\:q(#Lb`jO[)9UM^QXBgj*\"GL%;pHet
%Q@P6@]OXq_0AKQ\LaOj6EJO!6ThuH.GI$(1fTZ4YU<oKn.lU(>r"2ciSCNhaA8]Zq]!6tm'5OLI]6m-s22_S4_n/qs+SW9"pr-SW
%;4rp/b$ZE%c*FNhNotZ4?%?GH.S`0c)S($@gCo]bXRb]N;qN-iK3\jd6qpcWI2/lfFZg4X\D[:VP`EBok_gu3D/8+s\ZI[2B!\QF
%Htl-lpELd";tkH3-W4[cH1u=)WdC?@^&?X#MN(2@8Xd[Lq!X6Can.bG77d&d71>J*I''HN]2J_1^&Td&j(T#?8rN*5LhXT0$6#R<
%e.j>'FDWDDeQkJj<FUUUpWoH)OBA-?KdT2bc'c%L/AQl$0Cp\m\FZqTK!#8afOHCVMEe+mb'aMRjX"Q0'iJnh,\p)eb(sbt/:h's
%U04k;&qnU%l7ae6(Rd`'@sX&2,!>Ke_;:UY>H0k3/4(L_&%W^f'8M'W6N/2e+edS8X"7=)H"0"WkH$stM]b<k/,.]mflpd\M`2b-
%]'?hulI$i`p:kpaH69f8b\&(O<SbDi"L#>p`;h-i3>;/JC`k;n#L^7<qr6MP$5%HJgQu/EG?0b3%lW]29ui32oJ)N3(qU[d(gm&4
%0g0PSAVk_RlT\QXY9M3/[$)*<Vj7PdD1<37,R^>_Ks/@%T/.#p=Zd"`IhdAUbu[G1en=\5l\l;(W\+Y3%Fd(D7ccRGk8[:[7na(6
%F92=!?c.<t2=d$$HDLecjZ6Ni<C3fmrCKd^fYi=jXV3k>8GMq[*g_QOY;=&jZOR;/XroigU'+Du&dl[5T`)]>?XgTV\UeJn&I7L-
%PQnf",KCP^MfEFtga-C!bKFqq\g"*6FkQf9AJ#p5%FB=<[&9M35FS&p3US+_3(-9EEi_[=MQ;i<3\F0SKC9r6nS5'$JT<B^'Q^;m
%IUEZs$p+=+%_cGi%'_Za*Fqtmq^mI_-$)3t$=ZdRe6,WV<^O-N8aINnY'0mTh6Ze2;7lTReh@mNeR5$=.<J!W>s:OFKOVca!?#3i
%n-l.+^3/DZ!QF)X"g^tCqha?X'eYB?qEDBsl`N\<-MXD^.f;Ns%+G=XDK<DuR4?bCbQ-IC`YXe#*Y>]!>_Fc(>8jQ!bVf$!bn#Hk
%TPU8pj"\)^g:&Y2\)5PeDQ;)K'92+-'/MqZb)9,ms%%/S4.Z#8Q5/`UU'_4\<[p)NL6[rR1'=hEG?X?g`bgF6rV"g.C2eoHe)_ds
%G-,DK3?d47q?=&P22%^mPI>i1=ug:BB8??s5Pl@];UN"O^T./*P:W20.Ll2uc6pg/e>aY1b"B[[Z2+o`,^-"H+2TlF9DR*q>mYO]
%*?GZohFRB3H^Bt+X)\nTRqoLUK(bV7FNE)*e@eR7R+i4&DS<p.+miiP>#/f3[3MF\`.V5]kboA3#i?JR:qhVL<@/:?TlVGt+tjCR
%0W"*/R`M9<4`F-;*;BMGVTIkOgse-d-1j1^(WBAsfUaF&.C`UWED5r-")t0cbs0&JpK1Ose;8JV=2jsA-rT^3'Yq)5Q3NloGjMg6
%A[T0`\0Jc]_sGL>%2mX!btYp@Je,B!L^/B?o%`e![5j6R+Nh']leL2%50A#R[-F8N<TV[2?q/Vfg`qJMQ7'(GHrkesA+&C3>Df!F
%),u0hK;7K<:&a2M0)$q4nZ0Z214F13"TsaL#mi]CQoa,UT<BqW>ut;h7o^D1.\!Ot(il\*4@0eVgTp+@U#C%8SLj*@GH.+\EZ'fg
%[,]X2GFiqS>k177CU#+PTZX_h`&f=k%[tfWCMh"-;a=oM8i@(ZD&d^PRDj_:c[AE/Z8E5D=u_Nt17Da/PsU(p=#iMs3"&a7p[>!W
%GM7k^+h92p+";@3$8(45_A$$O<EY+"aTaZ%';-fpd-r`.NbO5`@OMpC$+3*K0N5,TeXkV))FHWn@gVD5],!kpe[O+*cX5XP'n[%H
%(2dH?P=9jnG*.H/pN#-V4VnTGiRR@T_q/AJr[Wr9G9P0YR7uGnju_p3)it7rq6j.0ab`q%#XBU8-1NV@&+N*GN0*B>=:BTp4sMTW
%6Qao_MtiRVJ[f,I/1?"E-u<"L5GS4!>6_K_(%IF(&iioHY<pL[q\2LsC!h(!J@.`3ae3I$6U"YQ*$WK>?:mmj9bsCl<j%i%!6Ls=
%69m(]"@sYZIfd-%!n:9V6[tB5VXl`5C]EJ4AcXITl,(1d_0W05<KX<DKtq^g;CLW=S3/+1nlC<5c/X&TWn<R1jKRio]NbdjYNe8A
%4;a5NLNR.J<E_$`a2Hks?ALrR5ul_L(WAmN,W0ajZ-SYM=%u)%XU[u@k#FVdU'^L8U!]_`=?LHGTEB8@Vc9k(W>Dci%*"6]X:=Nl
%go.NL%aag\03,D@YC&,qg(V9mCMl21<"Jth>>Nb#Yf^Rqe$OIMYM$,CK.'do410#6H>7j=$MW\-AP2WufUe7MR[gnfo1cL('a&`s
%_YQ)VS?/eFnR5-fU($pW7s)$cEo@YD]bfVWe^%bDR94D%Hc^qI"m8cJ?RJ0374',h/(4M*%jIV]4;];QK^E5TEUX7ePD`.I.'_^*
%8j]toTW,!G"hE</33sk]fGo9Gc8BMH(`T`iV.i<pACg*-8K3OSa&?iCTLA9L4V13q:#]e&;f$)OT6DT_R!C&<Gj\h1@m6TW+-r<U
%2VdSVhsiJ(a#k9HZCK$Q[3THlV%dgcns8V41EPGg75tW)V'r+s[I#FJHRAEgO++,b3d42A':V@:WBI-q_T8Mt4KMe!NRL`0."8A(
%j3DV!P;ufJeZrMG-LFpe1U;+V],&l?ehBFg[IUi\pO0b[)nSG?Y9g^=gj2+lmkeu$plie'.e;aQaZ9uq"i_8pb%Y*fR9J%*+K[eU
%&1N&1A-]ch!c1O;G8SNHO\r@r71lGgj5uAFd0T@:eFi;NM\Y*nX$krr'.M]fqO#8;:49H*GuaY,V$C$&&Eop?1DAq>N>j10][^T]
%W68RO;a[uY?]6`RLZBuC""%9%M4%]SR^a/?bI7H5COF"p:HX.2kVJ6R'oR<I?!nX"q2Cl<-<X1M^B\g"!nD7?%V8S&!['G&FFcUt
%1@\k@cBJH'>/<g/qSG'dO,E[SQElI_#,7*1=(#&YA_"d+giakD2C/?=QD\0=n2hj8_u(QE$nGUJ5=&ip`C;KRk,VK@<Q[j2`l*>l
%TILn2?]E46&>LETEtotr@5[*<;mqQfHgSs`5M*_K>89E2'Kamk7$`OhK=H;t2(Mi\T%+'"ThC_d>C^QeFXSgr<)sr`>Xd-er:acc
%%XepbV#&;&pfgTE[<I+&B<hM'JhK&\G\U;Ta=qIZQKB'^d7Hg18a@?6X\u`K@FeVm<tX+M+L0s#/JT;q.M10AB^^b3%7r>PY@\,=
%3"*Jt"V-c3DN?0lY:^M,U4s9i.c\G4f+2`tUL&]HOIF*=g2$rc1.nHnX@-_FJg-ahidg+35!+Uh?r\!,TUiSDf3P9-@"pJ7LT.DV
%9K,dSJ)H1+*eIA]>Z>?UXlG6KW"lpEc,7`1Zh`pB(>#SqOe5Tf1LNHOr"Xh!-5"^mWk6`BDPL=,lM\p5.qg43h=AENd?<h,]+W[d
%?peoM[,aCtF+dh_KUZ'je@".*Z!&%6k)WhGMtUS371%G<B8l),!MOCZ<Ka/'13`7%(/3d0n3hbNg!^=B&P/)*Xoe[5HK"S5L/kX#
%T!/nR`H76oDJDX^6JR1IMX5:aaOXgc+s59U9ub\Mbs"lb25V`mY9+Yr&$@dtZZdnCYJQB/I>n\S:>^TR>NCoYlHUdCQ6qG2pEb*/
%`gu$+Mtu$q+K0tCT_DEomqh0+)Q^rcH;1VtbcD*ZXHNE3AL&FijX<mg8Ug@T9s4-hq&[)?9VdYo'oL@A=Vp^;Qu8rD0YQNW6]&/8
%.e=mn#Ns-I!@l5N\W]\r)'\$;8WE-L+"0::Psf5UOm>'L7NOHV?1BUfMZ7R4N>rd),+(;ZfR*V?'<dL1!h3_Q_mDb&9MD(p%69JQ
%%'\2EGKPiKhI@?Hon4+3p?aQg6=AC8C2\oF?ZLu"]SEBqN"^aZgC[n7WhPkEd!(3@F7)l:s,jeS7?3A+m'XOrR;^L;^>rmTGh;3`
%Uo[6,D5uRqSBqS\qKa"qo:h('ie%4dU?iuF7(tsNRU^j.:4X[[_]Uuqph^AX@@<e30Qk85I*1bHJem[V!bL]:0_0/Unha)kVYesU
%mELPO@I=Jj+&T]8E[Z@c>pO1%.3M0LZQIJ_)b%rj1LeFFRXN@]a1;rkd0_=t=%8BTgOfTgXfl3mZ1,]jn<g+(Jj16Sc]6//[lZ-f
%9d8GrmG4JjA7kP.XD.KASli<!?>Kgn@h[1>Xc7'WoEiV\5GmhfI4b]d73D16<ak;noh)+3^5mY7KFm`Sg-A!=[Vb6LhH2%OG]uAp
%H]9S(eg48C4mqN,rtTU>KJd-3T%J'QQ*QMU6EX"G!F^0<M*Ca^nYLsSXc@7Z1ppP4s%BeinR_\uXkgVXK'?t*Pj,UA#XeL-!Roe!
%9g::"Ie4-?O3i]q'3kb@RUL8<0FeOJCeGb$=Yr*Yjs#2XX-s.m,!QSNobh)F`RASU\*llDl`S8_T$GSd;$"p[hM5'Q^*hCMPLR?O
%I9m/WECc!94JT"WYF&D4qDe%.S8#-3"`2n1n/U*#?0n'3%]36NGO:gkd"]$VbT=nfF=RU?HDYFs==D"!\&;gfZl^p?KdmkQo<.Ri
%c9!0@T3?\E[.[j9jhOfD7_p'IdI+l=9,H,%&Z;<D3BnjBT@`_5*]Lcnbrr"TgLN=6Anb;`pG:*[>8,QDUE/(p/F#%'lDXV8Z[<l6
%Fn_'Qn]*#G.6MU(b(qt$O^&.R.Aa^i`<6)/<=Kiq55=*U:QL=/XTe/>FRiM7fD;Y&(ZE.VGA?n%_n\%7V4uT[hH?iWbY-cd\26.Q
%'PuA0PpOHaHp(Z@8*J$)5.U+1-`qm/=$>8G4&iL<=mNLhn"-d4>@2f>Oe_qZa;?5^4MC'9<h?gY<nd;!i[M?(=;@^_O*T`623SIe
%i9^t-mY?i"Nuga-p@j=/QqG!*o%9q3lR)4_gHu(%95UquS8DiCo=-<]FP,9N>'TbG[Re*T1$(%%LLl&fFOdOCS)H5KZ"-(-KCcqh
%nu,.T^\s99fTCj>@_d3[,BDiM%]>YGFV#p:-CJEJ75Pl";G?,ql]+f^H1,&8-+pC;-su"0&&@85Q5fN$P5b2F2)MN<^C0RXNB!fo
%*L!ackmY`'LJG#/8%9[`TQ%E@2YL5+o9s6V9%X1TWM;V)\DglE=\=s%G!VpBT(\b>M`U*i.58;Q`d)>ETE'PJh:*J1\W5TRXa28Q
%mMlYfEYuhnP<Vk<p&=q#_R2lcV#&boK^/KH1\T?!)q3Q<chNk5M=5iEJ%kdDPS%qjcWGmljB:^\dQj3acV>&b[e1>)Yn=UF9uq)U
%MVfUPk3$n\QU8R/dDNe>(DS\jR@_7f>l.>@O)'4%C#lK#"!`'@s,L6lDOBuG@$>d5a^4K#]DN#RgKsPBF1*!l<Nd-YUI\5Tpq+V&
%NG[OeIcujA;,isCZQLiep?X5_7m-seIA[D@$-olQ4LYIhlk&>Z[X3Ec`^r@/(;o*nq^c@;%!bLkoZoW)`G:\Oo0\FrgXt0tT%a"C
%rP$>*HG^H?`k*+?H<[L0D,1%CG2cUQ%I<dnmr=eT;L\r&X/!PS5?C"RJMLq9>+H]-?F0P=F@buuVknjk$a4%6V4J.oo1r(F*rqJ0
%\S@Hfr;'KSQ58o/+dqh`NsIWh[dMH:8-@_lFr/(nVam0MO80,#7Ipo;ILM0'[=h\pG2K9+o&`<S'/T.Af]Mp+c^!30*S*]SiAf?S
%q`=mH;hi3tl0G1Ck5=o$M]Z$MaQO:s#q7Y/.MmS'N5Es40.\E55aC0,O0kb:^gnpgU'#>.F0ErJ-XhZVN^3]Fl9]hjZ.I%h+JB^=
%7SbjP!5tQ#M;kq.9X!duT6IR(9<g5X5C*LN=<r[E$**e4fV<sho&XH8R4(<:1P1Ir/^EE!U%<b8mNjC"qT24n_&@"ukt-BgWJX:r
%g6U\bIdN0qf@3@>[D71K5Pt=<'jR%;ZRCFU\`R2+[S(k0(UjB@o*lM(U;b;YI-F>bde9S`(:;=`"64H:b>C624+uCeb?o'LP/Gdc
%s*<EBebE:^KQ,7.j2]rQTkdXM0B%5&pJsAEk&6;W.@XYD+2Z$XoL$t'na4dqGchIYPCiSpe,'JB/Fe^.s)DG)"GMsV2I?f_6^rHP
%r>n)4^LsMc)h)PXRlg%ZC_%]0(-,?4-ZJn4aV!p2Vg)]qe=`:2c^DP2?TVk4jDr`EV[)+6\_"3#GpHM>Pfh0&21[8lcog*l^$5p.
%p3qs"$t3lEkogB-0Ib[S[Yhomg@+t=aO&,<i,BdmUbL`):-Y?Q/VpKUS[+8:aNF`pS,m[Yo'FPXT%,_2=2HlQ@aQLkS=B`Ea0<#7
%Qaf/]&5=0^qdr(Qh9Xf!'-ioXb5_KaSP-.l8Q(9*-2Bd\8P.9,TmT(Zi,0ec9/$@n1Lq5t5iPh>l3>2AkH8_l*k1U[P3db;H_6js
%4*P:I7'*d7Q)nt>pYl0nc+iI>C,mBZCp=QQC3><3*8gti#Nk#G?i1UY)R798.GB9&7rRF-7Z&`NDCmoLjU>*SiG=F)?MPRQ"5t_,
%/@_C+8s.qaP<1L31?#d'cJmcr%ekr6?$hZ^4ZU6X$*_9PBq_HF&&*JDgWe<Fi1XpFpMLDVCJCWMrJZbJ:Lrh/(3j?q9t-3G]QEh*
%_*6!o8ap9XBs/#UVti#J[8X?s<$+$XIG1@,V<]tK;J_S`H#7P4'5o/$p?moA,SKqpTag3oK(0ucla<+$=U-5&McL\@k<(X+iRIFi
%j)DVh0_jiA!NkphW:J)3JcpC'0`0Gi5>.C)EE6E2'I$VoJeM`T^E^m6$UJ0kXjU9TfoLshVS8GZ(stjZ.ul;u61$^?ad0!joN7t2
%O5!&$KM0ELO[=Jtn84fia1J4@:/rrCCq70HNu$;CUTYhf*+[O(J_MZ"6>O3NGT!BIAgHQX-Y^7E5[J@++=X"d\INX?#SV<Ler6C-
%*3>t5f!:kl-DVp6nl%R(V9,Vg+:-8m4%/0*)Wp8fN`Atq.+/?/)W[oo2,YO^AqZ@/l/hN+;t2>RA9r*V,:;/]O*tH.gk:jB%Sa7`
%Lp;POCOUMr/gb/F^&@1D[7knG]*C4"De?tCoGjR"h4C>iX0[\jTL7=`j+V8<CHk6MIWjDY4T_;1;nFOMASXBI-^/-"fn+FOA*jUL
%J:h-?+Oa*Rp\QZUO%PH\i>g&1q-;KJ/n-+B9<BtE!**JS*lt(R'6Ibhap+YB%Lr+iRaeg8<L[#J4Zp)#Emd@,Z!t=Z7`3:6CY7#I
%L;--V[`>j'ha2!]St9DtCSl?8gPaCl1;dd\c-\Q,h!G<rlr]^6]m%Q6X.'S[b+)4Yqt+,Z_KB0t5Ps'&-bV!XXaIRXY&ZbH31Q4f
%FHpco5OKnEXY=<HX$G*ijjiM[[jpqV6DakY_&Tm9<dUn(LH!lpHN33@e+So[o!i.#qbgn.P<2*3>L4.tBI](tFe%3%m,;Ep=cB<S
%:Xc(-Sds(`s4XLcmXgIoc$Z1!DU2Wl!MO0=*b*(A2/J3<8$B,h'mi2\WLS1?r*DM'UHX5dMa6QFc*e7W4d!4;"5\MB*_7Y,lO3=E
%_Vr`IEhF:.b$F"=_ZCf[-G6;>SB\*<H_-PdIXX%r+-Du:.3EUEE.CQ3m:ia.M/_"!!@:EdXiChTk3-F:,/>I.cHSf>HiE(WQ(T_1
%\PcJC)6P6*`]C5YcEj,Nhn%?#4WIIc/XQ0u8MqP@Z@hDNhJ6rS`?#3OS+6jZYGB3,)C',9eWM3TYf3;BE<kbPSu9cP#AA3jc6WYG
%h@#VVI.dpC3"c!=6[?"D%&rc^SIC0f^]gMGCKcrE%=9)?E(TZ)M=t.-4+ha>A]WU)KR<p>-@/1]qAK"1RbJJ7F':&H4&r]J,V1@+
%\tlsRQ,B_X<86sn$lg!ebF;KHAIY/DcI!R3\Ktj0l1g;M89GI),a?ae3Y4,ceS)&^f4#aMMuFI=$sUG$42bem]\:UVfdNS*+Y,6"
%U/QhP`ss'RmL=btiodn$(Q/J)eQ/4[.pAE=F.2G@oK_B5_N7_i9)3nZ*SP_a*efCW3:P(e<YRo<E?o&ghtK8,2.6REf3.Kl3l@o7
%/_6o\Y=d/q.](Z8=dH$48c]^=c!G-q*CsG8:n@cRl4mUMACPF_W38PJ1iPp9/1c_-1XEG!1R.Uh"Bj8632&dB+bi%t6^3UmXMZ:B
%\?&Y*_G.Ap&IFYXK#Hqsr#-;[[Mf$4H3003//Xb=H@?p8ZXiZfMT_6]T_PV@MVRKFX&:BB\\_i\d/tOqbo^q79M44Y;GlC$JaCsC
%^+pjqab9n9iKZd/NF-0->uLW,/!c`Cp6mq@$=HhD1!n(#LH(UlguR[WAp--P_DYrB.=&Q>Sha)"p3@!XD<"SI3mq^O1gs4YIor$a
%MbYV_A6Rb0MDl2j_ST?;F+,$[Q65.,(--ePe)R^2>o.K`.ToTeOBR#O""eDPJBZB1\P5YhF2iX8A#n[b/mXNV7()ue.]77a2TiI'
%i^5lQ>ld4Dp@^ZqR,=^;3oWOe#>QB00%)s&laXil(p-?dRR:Tmj-(o.qcJ#t9N[c,16B&BI`t`CTr5@_N_RGPC3q32nZYe)G)h>S
%*b=HeQ_':0!P/iNG?mEhKdbFq#14[aUkQ-E=9rcU5n@_9o7B:tnt;cn-P9;bk3:FcDNGjpSU@ai_Ddad8rY\NDJ.3XhsoG;3o`M)
%p!nHEqeK:;Vc&FF$-2^U&DOb+7aOom*3,;^gb.8.gQF,iIZ;6cI6;kc'+nuZ)Fl234q[V)_JA#Jm>NIY4$H=$kT)AbR7##Oh-$d5
%.$mhlXi+t`B,h-6)>UkP79!!4-\7l'kpk@p0=9q6]U=NLL`a=q&Y;r9XbNjR.i"4,eqa=2>'_eOH?7s*8qDKR;RkRG:/1s@hB^2@
%Xlj=j!l"KJ;R0)`L%48i:*H5@A#_]`a/CXp-4%mN;5tsAY>K1qp-Xabhfb=),iA)rn8m%Gj84pE.Ae-N4ksg!ETM?YD6&arlL__E
%6<F-n(\n^r_;Mk5B(+fW?>%7rR]/\^h7;WqYpeE,AqCNgEUTWL>h6mi"U=qM^iYpa?cMBs*fjN_(jQPrZ`K?r#-3JcBYZrr*#"pX
%UpqgIYj&gQC@9;)lN1W'e+p6?3_FlWM+ugsl)=<pN%2!9V"cn5\>PX3LOX.\GN7F)a+RP%:$1(O,$D?BGj/oH$;ToY_DQb4fY6Z9
%75%M6rdeN/)AJEA2G\a_Z<=]'TG'=,n.b+4#4e2n1#':@"R8fajjG"q(%$C#2a"K0]!FscafRo)--i_[d!Jl];AA'eW-co/'oD?Y
%BPg8KM,3\4hn,NkQU3jBY%!bJ!7>>'>F]Qq(5:ZC+`&NA/Vl0=P[A!uqRI&TKKKF<T>;<Vf9/AG6Gj],_J,-M03Mr'odCoYCk1!2
%^LnYlh8_lW#k^X+C57i%RlRP#;Y+.iKXS*X9e:F3gS@(^QG-Wl%l7cV6.,@2NRY=QmM"hn-$C;t;1ZlIo@m:T69e7Xq*5_*4./A@
%k]jYG3t>YaTQYTQdKfUe7XPohXLIaP6JW?BIl,E>+:iJZXA#UHjKj@iPnFX6B\Cs?WL0!9pWgLZiH6UMN]8J3;CQ0e=/<hHD/gS9
%Vs!c&%!mp$]]TfPn3Lt+Ca`ng(qn5*WfW?SOjDq+NC^l^q@HJ2acrZd:8%P%p%CbRS_+`HJk(Q]\sNm\"c?L:"Y[4E\5shT$Mk"8
%obm=NaWN!$U5H3KMbdEOb9,,n0;2MO.3E(h>9rN$^[Q4+`jS3<b"k:uJTfuf'DVu%5DqL;>>'N!7$&iiL,dKd@YGas\WO0a.gK:/
%5&'1aLn?Qg67NV6S%Pbo?-dAJc9RUk@_A%jJ?ND+2;:`W0l15a]m>?2ObCj$7VF+dOY!@<(Ph>'$Zo9(0CuiV)&sTJ+PhcHY67(F
%N^VrE@-^N&\=F9j4TJ551iGn^5.a8=RT[Y[QK%4FaQ:iZKr-K94i<rP>Q-u^2M*EkL=NC?pf_[6:8JC%.4(i<BV%mk*=aSMkW)+3
%7*.JJUN!_=A9s_O$WErEBqtIc31I##HH3&@J<Y@9<E#8MT`Ji!kGkJB7O+;s<?@kg4Jm2Ud%YF6hfYAm%`O90%osEfc+;!'0AD_f
%Z[*Lg1PDi@l7m*ND0ZBj4lX.+MQ/8%gaEHam,EWR8J\gWX4S!cQ`]R5Mp'hmMCat7))j/XP>K5J2K1kZkbbSa^lP]9(R^)$/'J.D
%M!Bo,IpIN+2cD=[,U$6"WFY;TpG[YTjI^eNeZWJe!T*'NK\o^<+=%#aB_n$M(,58+:!jsP/MAr!&M-\rVNeaMa@bEIN)dTN/.SIo
%1`kZ-3h/kYKIl2b.pg,6A!jWq_Fdp$eu<]qVW:0;\Y,9^2kkdGRjW6U\k!Fkd6/+PbA2PCLDtnDE;aQ^fRcP7Q!p@t,uY8t(eK<*
%fW=^t<?!>9@F2omd'<u]+B(cANLEWXS8^-'OPNr"><R0LjeUZXOEq?YU&7W>1MDan]l&s--)m-QP,T35LMFB"0@.<pUVLT2Y9LN2
%YI=."Z?h2ZKtBZpI"["o*H#2]L/Qb&$q#Z!@)HE?h<,MAT%sS(]u'=pD5%<+H`,7nr8J>S8g`+*RKCe]-F.?#F6YrVnVa",$D_>G
%Q'-n-<RD^r[4g?qE?K*U]Vj!5dKtjt%$d@ge(l7bktJ`RGJRl')V0j]_d5YWXghla"1>0)g6(D5naXCOd5cU-dK$j'/a72/NPcu.
%VE;gtLImT9,_&Ua\]c_QSbVtfCjP]1o^\ud%YmL1K<]dmBtoY88<4<ig6EZ?gI$(%:39U1L>>CZ+?ai&J7qQQ<#R>JLtE9DJG%eL
%</\YSRUW*qKd1[Dq%Sccg!9h=>G9/Q+M,%%,PgHLMpo@W(b@1HOV5q)Z1_:g!M3ae-sA,P;L(1jMR<eHlRj^EUG%j4UJ.F[$4V9?
%1o=K<qD]8jOB^[1(K[XU:8_6DDXktEI9R#=9:N\>#21`mP;'VPAesD#?,`L`)O]I[Z1*Pe%@O6^^C^bY7g*RK?5?N/+qmej>G#P7
%X#UkAA6VM1*Z3G'F>'N?Q#&2b+RXUWH6"cc<Z]P.pp@%?U:StUFRfu<05/^']-6'Tp3_j5/aI"c@Ua!.EtfgO%8p6WgWNR/JJ?K4
%LeXeffc=!m4BQK8Q_H&P<7S.Wbq^jP,XReT'gLog:%/Dr=ZU=lGNEro40G(_`GG=`*tVBY4nWf]NL(nha`4LZA-ZBJk7&bW"#=^.
%:1>CP75o=/O69ODdfRH'JL8q0l92KeYjLj3WGI-$UUErfpf4hA("u_@laa!Qk,D.OI"l!a'[B^Adces`@3rOs'lAOV"cS%1Y/@BG
%M6dUW'X%@e-ZC"sX.r3:V;7D.'*-6\n!$oJ9[Zp&p3p:,c9pNdjl`K]2hc54b<<<p3\qm"A,\:=gmJ2`F8&kK7$SooK"-<JlCZ!2
%Ue&pm'fD7iO=i@P>/q>nW\AQLM[Em]`ar73mVTb)<h0!@gPN"GWS=Z5-lPHH:o5Nn6F4ALa"hp"Npm.f>CoSa"$,brP\H/QVuD-m
%OE)qr\7_pd1ZZQlQ;H4o-FIO(KFAeh[NGo.SI?'?L&ao;*c!J9ctSHj$uZh<!Vfdm`M+Q$EUdQUL?00:*Zn*RQ4/BZSP]lK14pU<
%E[rfPG"7Varea3D.blC821Q#\S%Im,A=K_^0FY7TdB']'b6K^9ND`fX*>kU&KnQnNCGV^KF>NRl8(s*e*oK9J!EM,G>R^-4/<q=k
%jlP(ck`iq,l,4q20UnE1-tTa?;d(K(Nu=j,q4hCW;fK\#]Ln)l%2tHeifWI6]ohZ54=/d>4](3:Yf6qBih]WK)FbSTW?(Le'b[Y_
%Mc!I9dcTbP1=Z*;96)O,hgGqWR;C8jaYc[:6mclFCFaEh/OHd2`*J.Y(uH!A`(E=MUgI<75'q:/%E^=(7V(5h$-\+FqXHT.!"@[.
%Sm00tF_UI3N"0id0%(V$=CZK$625ekm^[9A$5rOPRAure-ukVg7l1ncW,.<`ka;"al9<+0$Zm`24+]\*;XP:uf;)(IJ9N$8GPn0L
%#WN9+R(sJ)&]h+C_:X(EFQE'J=c!9"0:?6s&8g^km3T_B7h;_$>d6,keHN9<'@b@W6iUsiVRh>]=P@Wg,[:pjYl<DJ^BHmqI>ZNp
%37^T!j-^q(A$lc9gN.G2)^r.;YF\aZVP--867,ijlGA[/6@t08\@!67nPtHuL]!PmS=E7;Ek%"!F*(69?Q!->5dnSrEsqmM<i(Y_
%YbcCa'mU`B:J%!;2>O<Xi8a;K@%d4`CQPV&h*oo-P%eHep*q@nbt:9;EBGT>)A9ki8]]KM6Lg=0'!$LVL[Sj2Tfh[V+\UD3@Xrt>
%/e49aR@4XI!]15FJn>VFp3J6!"rek5)BJr"#'!*jp3?79/O6hKlnCSII.0Kd3\&\fAKVe;EhTmc+9NO%#"^tLWtXZaJLlfe%6]_3
%C[BDI6\pF09e^"sRNZV'.d5Ir$/)q=4@I%\QWNfh]K6-;$kl\p0%>dKdK=Uq^(&1,Q9:Y*)"!D<EcDPslmb:(LLA42+;Rk&OSf/@
%PHlM#B`k5H:p`h06@;q:rUesD@&:(6ZB^[c'W^;V'C)_<bnS['IW#1,=>_@sXW!;c(*Qe*l$5s88a(HYJ^DS,J.'a;LdX!rGRt,'
%Kio$9(9Ig6Pd,=+1WOkOIA9rN0;RgQ^Gb-8Rf!_b9Q@XPVN6j=;bY1T1'+En/b>cJ.YpI*DfE?m5%W@3D5mr</"5P%p5nj-&srq+
%<Wb7'C_[`5FQ)Zu2Qc2g*6uH?BaQEWD3!`ebD)(p5M8\V4Jmh6BgmQda01M_P*+0=ShG&M8N9fA';/ZM2J&(=-!`#3.S,s$67kgJ
%0-h"5oR&_-TQ7TlZ0`0GBW=I>BjhcKV-_Oss(Y0gfLX?n/K0o!LnR#7dc6n5)ppHSTH?@2mScl6Gm#old!]DFYpZmmDCgqN[YtrZ
%T__j`0df@n77Z.VETjFr>M2';89Prc/u+%6aApdHBrZ4J#XiCs\&V%!E%k9n@<hkp4s-/7-*VV?lg^JkZK#0(^Q(k>r=E!$*(oVP
%`+hN4(f[5DW9[\s=tJ@,67I@.$?An*'CetnC'Gcn6j#_J=+29VPI>7H)jC:)@pDMXVLcB97(3E())8<0:DYc(YqZ:39X5hk6BpB#
%&(\cUB2tuUbW59/HnF#ipjLc?TL`P:NqWsF[o]&C1RqQ(m>9."o#VNQb_DinhTmoicP2#[/6D6Q8kGtG*qc$^S&g2^Rl[GP:Y`at
%5:0"VEG9@l,@8s\3&=MnBN_W@rCWAXWQ0:/%<;O_i`9U2'Va>6IPIf;*];I/*G$Cam^oMk^"pohq=(?OX`9Rl/-T8ICkrKmq80YT
%O_,/%TiEUS)_O:>9urdXW1WfMIbsE9eQau82Rd,AZlE-mHNcZ:INPdsL`'Aa8384t<(X@TgC\`c#Z97#eLVH-*pSua/DX,>-2&uh
%fsMaeK6)*n]/P%a$BTN%<$/%ApoWf..8dY.02d()jKQVcR<LXH:%8cid-+0^L[/=m2SQOX8L_nE6_'RO*2dokngQ^b-pPUdbA`1$
%oVu(<@Tjs*=Xsu^;ENNNmhW6c9f8<C+L;s2U2?B]0TT^Y!P;*BHqLLAm+l7S'KP/OG<HGNq54a:g=B_A^1D?K=1\`;DpMCRF2j.'
%2@7[UXYFVm56MDDMSk%eFPskG0cnc_@!a#ch;+t?6oWN7Pc/5c?ffQLJu*6"ju1;O6B=dAX7R,sZ/dQ1U5.*T1DB8d6,6Njd@7+4
%Sgbi2`^`M/0au)1d^qJuWY?K)>\%[4\3UV+O$q]QSMa1q'IA:@.[C:X]$_'m<Y/4cTdEE!Y?,X4rGQ58UhZ?E>"9nr:MZN$U9MXg
%I_\1+*_NcC04fT1>hl<=,PP>KQl7CNfRG]#9U=5V#Hnb-WkPkG\eSXo1B_XKlS`Y?b]H1^87oSVJ:=SWaH#o'MZ&WZ<)=.>CiY5c
%Q)Os&&S"""`_tZ+6t9aRC+N*CA;@*AFG@dnc@AX*.VIc1gqB:r[Ob'&/,lieV&";loj^VtWL+SZPUa8(1cd_mZ?U9YWl>gF:l(Rh
%lL$F0Ajp5;E^PV&H*([2U)T.,#Jm:6.Am@$hgIY2/V!BL+25oO^]!Y-H4fmC;78$j,lL`-6Wqt3o)$aV\DF2m^=mmqbC$LmH'R7!
%8p"Bm4R\0"ccVnVntC8ud>K.3ZY\l3ht/7KMHoHE7P=?`X*Tn8]nj%%`EX>oS8U8l0?UMC$/(6flp['1-='9$?Md4Pp8WdmQd!-V
%lWt9Mmo$hpR_I+b^V;*,r1kTcd2Te-'42H4"UI>i,BNc6L3sS-IMPtulRuUuR\/]3YHlJ5H0C0BoNc;P;<jLORa`/0lC5HZ70WRg
%Q$j=r^8Pu-27fEf]J#`2=(UljK_RuOr1Z`2QS-$ES3Q82hZ_JI_Whs1onuN@Z^gneoDL9OIo2?CB['mAkqCc`:\sd<^m5F"!E`Co
%?c]g''hZT1C"!G?qoFg/hn.-m_7cjtnK`b!L[PEr`gA)8<oErCku<R\Cu_`O1)9[[r\V7K',MelJ*;`^S^j'J7-L5DT=f8>d#ZmL
%G8ae1TS'P"`:p(88R;hmlZ53iX@E$/TGW*:==I+)OLn@77(.FQ7j@[i*rEgYf:\HGC>67k!uR:J3`PK\mQq!IUOtLZ=s#h[h6A4&
%=]rCZTK,EDAD6QRkb&=T3Od.6B,cWo7OFX+*=(!^U`je$DZaPGG'c5VMJS1e"@9]/(jL3%A&<mn^MT5=H#jesLIcAQ8#Y/[RY0)W
%:&"K6OSpH!IFm2eLiP]dGMi&+s%P,nD^5,KXg]+?\+ae!PO&"E*p0dVHLY#h?L>`1]f=,XDu/I:5PsSE(]N+<^DmN.jlGoY`4-dT
%Y32(nZ0$*%\Y#%fa/Pt(fDTf73Q>>7HacB$jm[LT@c#G*[mTKQanFl7hjjZ"Ol1\3\/mCX8!3\:j`\.Z4p!m>Q/Y@7p1M/<`F$@W
%rguE&pZZT[I/!SHs'>Ykhu3JVT0E;4QX>4:iQ^lj5CEIpb<Q!sq*4lMb:asOqrs06s6%SKkF[8'_k0-ml-"RirR]4g^O5k;TDn?'
%Q^9r9q]Gf=(>\VmiVW(np\017iOf*pTYaf9~>
%AI9_PrivateDataEnd
